Search.setIndex({"alltitles": {"": [[661, null], [664, null], [667, null], [674, null], [681, null], [681, null], [681, null]], "API Reference": [[677, null]], "Absolute and Relative Error": [[669, "absolute-and-relative-error"]], "Acceptance Standards": [[674, "acceptance-standards"]], "Affine Operators": [[668, "affine-operators"]], "AffineConstantOperator": [[268, null]], "AffineCubicOperator": [[281, null]], "AffineInputOperator": [[294, null]], "AffineLinearOperator": [[307, null]], "AffineQuadraticOperator": [[320, null]], "AffineStateInputOperator": [[333, null]], "Applications": [[682, "applications"]], "Basis API": [[661, null]], "BasisMulti": [[1, null]], "BasisTemplate": [[12, null]], "BayesianROM": [[615, null]], "BibTex File": [[682, "bibtex-file"]], "Block-diagonal Linear Basis": [[661, null]], "Branches and Workflow": [[674, "branches-and-workflow"]], "Brief Example": [[681, "brief-example"]], "Building Documentation Locally": [[673, "building-documentation-locally"]], "Calibrating Model Operators": [[683, "calibrating-model-operators"]], "Centered POD": [[661, "centered-pod"]], "Code Style with Black and Flake8": [[676, "code-style-with-black-and-flake8"]], "Comparison to the Intrusive Galerkin ROM": [[685, "comparison-to-the-intrusive-galerkin-rom"]], "Complete Estimation": [[662, "complete-estimation"]], "Compression vs Projection": [[661, null]], "Compute a Low-dimensional State Representation": [[681, "compute-a-low-dimensional-state-representation"]], "ConstantOperator": [[346, null]], "Contents": [[677, "contents"]], "ContinuousModel": [[205, null]], "ContinuousRegTest": [[644, null]], "Convenience Classes": [[662, "convenience-classes"]], "CubicOperator": [[357, null]], "Custom Bases": [[661, "custom-bases"]], "Custom Estimators": [[662, "custom-estimators"]], "Custom Lifting Maps": [[663, "custom-lifting-maps"]], "Custom Nonparametric Operators": [[668, "custom-nonparametric-operators"]], "Custom ODE Solvers": [[683, null]], "Custom Solvers": [[664, "custom-solvers"]], "Custom Transformers": [[670, "custom-transformers"]], "Data Compression": [[683, "data-compression"]], "Default Solver": [[664, "default-solver"]], "Definition": [[661, "definition"]], "DerivativeEstimatorTemplate": [[53, null]], "Deterministic Reduced-order Models": [[671, "deterministic-reduced-order-models"]], "Developer Guide": [[677, null]], "Developer Notes": [[663, null], [668, null], [670, null]], "Dimensions": [[675, "dimensions"]], "DiscreteModel": [[215, null]], "DiscreteRegTest": [[648, null]], "Dissertations and Theses": [[682, "dissertations-and-theses"]], "Documentation": [[672, "documentation"]], "Documentation Structure": [[673, "documentation-structure"]], "Domain Decomposition": [[682, "domain-decomposition"]], "Evaluate ROM Performance": [[683, "evaluate-rom-performance"]], "Example": [[663, null], [664, null], [668, null], [668, null], [668, null], [668, null]], "Example Data": [[661, null], [664, null], [670, null]], "Example: Canonical Projection": [[661, "example-canonical-projection"]], "Example: Contributing a New Tutorial": [[673, "example-contributing-a-new-tutorial"]], "Example: Cubic Spline Interpolation": [[662, "example-cubic-spline-interpolation"]], "Example: Hadamard Product with a Fixed Vector": [[668, "example-hadamard-product-with-a-fixed-vector"]], "Example: Hadamard Scaling": [[670, "example-hadamard-scaling"]], "Example: Specific Volume Variables": [[663, "example-specific-volume-variables"]], "Example: Weighted Hadamard Input Operator": [[668, "example-weighted-hadamard-input-operator"]], "Example: Wrapping a Least-squares Routine": [[664, "example-wrapping-a-least-squares-routine"]], "External Inputs": [[685, null]], "Finite Difference Estimators": [[662, "finite-difference-estimators"]], "First Attempt": [[683, "first-attempt"]], "Fit-and-Transform versus Transform": [[670, null]], "Formatting with Black": [[676, "formatting-with-black"]], "Full-order Model Definition": [[684, "full-order-model-definition"], [685, "full-order-model-definition"], [686, "full-order-model-definition"]], "Generalization to New Inputs": [[685, "generalization-to-new-inputs"]], "Generate Missing Stubs": [[666, null]], "Get Training Data": [[681, "get-training-data"]], "Getting Started": [[683, null]], "GitHub Actions": [[676, "github-actions"]], "Governing Equations": [[683, null], [684, null], [685, null], [686, null]], "Helper Routines": [[672, "helper-routines"]], "Helpful Jupyter Book References": [[673, "helpful-jupyter-book-references"]], "How to Contribute": [[674, null]], "Index of Notation": [[675, null]], "InputMixin": [[372, null]], "InputOperator": [[373, null]], "InterpConstantOperator": [[384, null]], "InterpContinuousModel": [[226, null]], "InterpCubicOperator": [[398, null]], "InterpDerivativeEstimator": [[58, null]], "InterpDiscreteModel": [[238, null]], "InterpInputOperator": [[412, null]], "InterpLinearOperator": [[426, null]], "InterpQuadraticOperator": [[440, null]], "InterpStateInputOperator": [[454, null]], "Interpolatory Estimators": [[662, "interpolatory-estimators"]], "Interpolatory Models": [[667, "interpolatory-models"]], "Interpolatory Operators": [[668, "interpolatory-operators"]], "Interpolatory and Affine Parameterizations": [[686, null]], "Jupyter Book": [[673, "jupyter-book"]], "Known Basis Matrix": [[661, "known-basis-matrix"]], "L2DecoupledSolver": [[109, null]], "L2Solver": [[122, null]], "Latest Commit to Main Branch": [[680, "latest-commit-to-main-branch"]], "Latest Release from PyPi (Recommended)": [[680, "latest-release-from-pypi-recommended"]], "Learning Operators from Data": [[668, "learning-operators-from-data"]], "Learning Operators via Projection": [[668, "learning-operators-via-projection"]], "LifterTemplate": [[94, null]], "Lifting Maps": [[663, "lifting-maps"]], "Lifting and Nonlinearity": [[682, "lifting-and-nonlinearity"]], "Lifting and Preprocessing": [[670, null]], "Linear Bases": [[661, "linear-bases"]], "LinearBasis": [[21, null]], "LinearOperator": [[468, null]], "Literature": [[682, null]], "Load/Save HDF5 Utilities": [[672, "load-save-hdf5-utilities"]], "Low-dimensional Approximations": [[661, "low-dimensional-approximations"]], "Lp_error()": [[0, null]], "Matrices": [[675, "matrices"]], "Methodology": [[682, "methodology"]], "Model Classes Do the Work": [[668, null]], "Model Constructor Shortcut": [[683, null]], "Monolithic Reduction": [[661, "monolithic-reduction"]], "Multi-dimensional Inputs": [[685, null]], "Multilithic Reduction": [[661, "multilithic-reduction"]], "Multiple Training Trajectories": [[685, "multiple-training-trajectories"]], "Multivariable Data": [[661, "multivariable-data"], [670, "multivariable-data"]], "No Better than the Basis": [[683, null]], "No FOM? No Problem.": [[683, null]], "No Free Lunch": [[670, null]], "Non-orthonormal Bases": [[661, null]], "Nonlinear Manifolds": [[682, "nonlinear-manifolds"]], "Nonparametric Models": [[667, "nonparametric-models"]], "Nonparametric Operators": [[668, "nonparametric-operators"]], "NonuniformFiniteDifferencer": [[63, null]], "Normalized Absolute Error": [[683, null]], "Notation": [[661, null], [670, null]], "NullTransformer": [[548, null]], "Objective": [[683, null], [684, null], [685, null], [686, null]], "OpInfOperator": [[479, null]], "Operator Inference": [[677, null], [683, "operator-inference"]], "Operator Inference Regression Problems": [[664, "operator-inference-regression-problems"]], "Operator Inference in Python": [[677, null]], "OperatorPosterior": [[624, null]], "OperatorTemplate": [[490, null]], "Operators": [[668, "operators"]], "Operators with Entries are Not Recalibrated": [[668, null]], "Original Paper": [[682, "original-paper"]], "Overview": [[661, null], [662, null], [663, null], [664, null], [667, null], [668, null], [670, null]], "PODBasis": [[31, null]], "Package Installation": [[680, null]], "Parametric Models": [[667, "parametric-models"]], "Parametric Operators": [[668, "parametric-operators"]], "Parametric Problems": [[682, "parametric-problems"], [686, null]], "ParametricContinuousModel": [[250, null]], "ParametricDiscreteModel": [[259, null]], "ParametricOpInfOperator": [[498, null]], "ParametricOperatorTemplate": [[510, null]], "ParametricROM": [[628, null]], "Partial Estimation": [[662, "partial-estimation"]], "PlainSolver": [[135, null]], "PolynomialLifter": [[99, null]], "Prediction: New Initial Conditions": [[683, "prediction-new-initial-conditions"]], "Preprocessing Data": [[670, "preprocessing-data"]], "Preprocessing and Time Derivatives": [[662, null]], "Probabilistic Reduced-order Models": [[671, "probabilistic-reduced-order-models"]], "Problem Statement": [[681, "problem-statement"], [683, "problem-statement"], [684, "problem-statement"], [685, "problem-statement"], [686, "problem-statement"]], "Projection Error": [[669, "projection-error"]], "Proper Orthogonal Decomposition": [[661, "proper-orthogonal-decomposition"]], "QuadraticLifter": [[104, null]], "QuadraticOperator": [[519, null]], "ROM": [[636, null]], "ROM Accuracy": [[683, "rom-accuracy"]], "ROM Computational Speedup": [[683, "rom-computational-speedup"]], "ROM Construction": [[684, "rom-construction"], [685, "rom-construction"]], "Re-projection": [[682, "re-projection"]], "Reduced-order Model Construction": [[686, "reduced-order-model-construction"]], "Reduced-order Model Error": [[669, "reduced-order-model-error"]], "Reduced-order Model Evaluation": [[686, "reduced-order-model-evaluation"]], "References": [[678, null]], "Regularization": [[684, null]], "Regularization Matters": [[683, null]], "Regularization Selection": [[672, "regularization-selection"]], "Regularization: Stabilizing the Inference Problem": [[683, "regularization-stabilizing-the-inference-problem"]], "Repository Organization": [[674, "repository-organization"]], "Scalability": [[682, "scalability"]], "ScaleTransformer": [[557, null]], "Scaling / Non-dimensionalization": [[670, "scaling-non-dimensionalization"]], "Second Attempt: a Better Basis": [[683, "second-attempt-a-better-basis"]], "Selecting the Reduced Dimension": [[661, "selecting-the-reduced-dimension"]], "Set up and Solve a Low-dimensional Regression": [[681, "set-up-and-solve-a-low-dimensional-regression"]], "Setup": [[674, "setup"]], "Share Your Work!": [[682, null]], "ShiftScaleTransformer": [[566, null]], "ShiftTransformer": [[575, null]], "Shifting / Centering": [[670, "shifting-centering"]], "Shifting Affects Model Form": [[670, null]], "Single Training Trajectory": [[685, "single-training-trajectory"]], "Solve the Reduced-order Model": [[681, "solve-the-reduced-order-model"]], "SolverTemplate": [[145, null]], "Solving the Reduced-order Model": [[683, "solving-the-reduced-order-model"]], "Sorted alphabetically by author": [[682, null]], "Sorted by year then alphabetically by author": [[682, null]], "Source Code": [[680, "source-code"]], "Specifying the Model Operators": [[683, "specifying-the-model-operators"]], "Sphinx Autodoc": [[673, "sphinx-autodoc"]], "StateInputOperator": [[534, null]], "Statistical Methods": [[682, "statistical-methods"]], "Stay Tuned": [[686, null]], "Structure Preservation": [[682, "structure-preservation"]], "Summary": [[673, null], [674, null], [676, null]], "Surveys": [[682, "surveys"]], "TODO": [[673, null]], "Testing Source Code": [[676, null]], "The ROM Class": [[683, "the-rom-class"]], "Tikhonov Regularization": [[664, "tikhonov-regularization"]], "TikhonovDecoupledSolver": [[155, null]], "TikhonovSolver": [[169, null]], "Time Derivative Estimation": [[662, "time-derivative-estimation"], [683, "time-derivative-estimation"]], "TimedBlock": [[652, null]], "Timing Code": [[672, "timing-code"]], "Total Least-Squares": [[664, "total-least-squares"]], "TotalLeastSquaresSolver": [[183, null]], "Training Data": [[683, "training-data"]], "Training Data Generation": [[684, "training-data-generation"], [685, "training-data-generation"], [685, "id1"], [686, "training-data-generation"]], "TransformerMulti": [[584, null]], "TransformerPipeline": [[595, null]], "TransformerTemplate": [[604, null]], "Truncated SVD": [[664, "truncated-svd"]], "TruncatedSVDSolver": [[193, null]], "Tutorials": [[677, null]], "Types of Models": [[667, "types-of-models"]], "UniformFiniteDifferencer": [[68, null]], "Unit Testing with Pytest": [[676, "unit-testing-with-pytest"]], "Vectors": [[675, "vectors"]], "Version 0.4.2": [[679, "version-0-4-2"]], "Version 0.4.4": [[679, "version-0-4-4"]], "Version 0.4.5": [[679, "version-0-4-5"]], "Version 0.5.0": [[679, "version-0-5-0"]], "Version 0.5.1": [[679, "version-0-5-1"]], "Version 0.5.10": [[679, "version-0-5-10"]], "Version 0.5.11": [[679, "version-0-5-11"]], "Version 0.5.12": [[679, "version-0-5-12"]], "Version 0.5.13": [[679, "version-0-5-13"]], "Version 0.5.14": [[679, "version-0-5-14"]], "Version 0.5.15": [[679, "version-0-5-15"]], "Version 0.5.16": [[679, "version-0-5-16"]], "Version 0.5.2": [[679, "version-0-5-2"]], "Version 0.5.3": [[679, "version-0-5-3"]], "Version 0.5.4": [[679, "version-0-5-4"]], "Version 0.5.5": [[679, "version-0-5-5"]], "Version 0.5.6": [[679, "version-0-5-6"]], "Version 0.5.7": [[679, "version-0-5-7"]], "Version 0.5.8": [[679, "version-0-5-8"]], "Version 0.5.9": [[679, "version-0-5-9"]], "Versions 0.4.0 and 0.4.1": [[679, "versions-0-4-0-and-0-4-1"]], "What is Operator Inference?": [[681, null]], "What is \\Z?": [[664, null]], "What\u2019s New": [[679, null]], "Writing Documentation": [[673, null]], "add_logfile()": [[653, null]], "apply()": [[269, null], [282, null], [295, null], [308, null], [321, null], [334, null], [347, null], [358, null], [374, null], [385, null], [399, null], [413, null], [427, null], [441, null], [455, null], [469, null], [480, null], [491, null], [499, null], [511, null], [520, null], [535, null]], "basis.ipynb": [[666, "basis-ipynb"]], "bwd1()": [[73, null]], "bwd2()": [[74, null]], "bwd3()": [[75, null]], "bwd4()": [[76, null]], "bwd5()": [[77, null]], "bwd6()": [[78, null]], "ckron()": [[359, null], [521, null]], "ckron_indices()": [[360, null], [522, null]], "coeffs()": [[270, null], [283, null], [296, null], [309, null], [322, null], [335, null]], "compress()": [[2, null], [13, null], [22, null], [32, null]], "compress_entries()": [[361, null], [523, null]], "cond()": [[110, null], [123, null], [136, null], [146, null], [156, null], [170, null], [184, null], [194, null]], "copy()": [[111, null], [124, null], [137, null], [147, null], [157, null], [171, null], [185, null], [195, null], [206, null], [216, null], [227, null], [239, null], [251, null], [260, null], [271, null], [284, null], [297, null], [310, null], [323, null], [336, null], [348, null], [362, null], [375, null], [386, null], [400, null], [414, null], [428, null], [442, null], [456, null], [470, null], [481, null], [492, null], [500, null], [512, null], [524, null], [536, null], [645, null], [649, null]], "ctr2()": [[79, null]], "ctr4()": [[80, null]], "ctr6()": [[81, null]], "cumulative_energy()": [[48, null]], "datablock()": [[272, null], [285, null], [298, null], [311, null], [324, null], [337, null], [349, null], [363, null], [376, null], [387, null], [401, null], [415, null], [429, null], [443, null], [457, null], [471, null], [482, null], [501, null], [525, null], [537, null]], "ddt()": [[82, null]], "ddt.ipynb": [[666, "ddt-ipynb"]], "ddt_nonuniform()": [[83, null]], "ddt_uniform()": [[84, null]], "decode()": [[616, null], [629, null], [637, null]], "decompress()": [[3, null], [14, null], [23, null], [33, null]], "draw_operators()": [[617, null]], "encode()": [[618, null], [630, null], [638, null]], "estimate()": [[54, null], [59, null], [64, null], [69, null]], "evaluate()": [[228, null], [240, null], [252, null], [261, null], [273, null], [286, null], [299, null], [312, null], [325, null], [338, null], [388, null], [402, null], [416, null], [430, null], [444, null], [458, null], [502, null], [513, null], [646, null], [650, null]], "expand_entries()": [[364, null], [526, null]], "fit()": [[4, null], [15, null], [24, null], [34, null], [112, null], [125, null], [138, null], [148, null], [158, null], [172, null], [186, null], [196, null], [207, null], [217, null], [229, null], [241, null], [253, null], [262, null], [549, null], [558, null], [567, null], [576, null], [585, null], [596, null], [605, null], [619, null], [631, null], [639, null]], "fit_regselect_continuous()": [[620, null], [632, null], [640, null]], "fit_regselect_discrete()": [[621, null], [633, null], [641, null]], "fit_transform()": [[550, null], [559, null], [568, null], [577, null], [586, null], [597, null], [606, null]], "frobenius_error()": [[545, null]], "from_svd()": [[35, null]], "fwd1()": [[85, null]], "fwd2()": [[86, null]], "fwd3()": [[87, null]], "fwd4()": [[88, null]], "fwd5()": [[89, null]], "fwd6()": [[90, null]], "galerkin()": [[208, null], [218, null], [230, null], [242, null], [254, null], [263, null], [274, null], [287, null], [300, null], [313, null], [326, null], [339, null], [350, null], [365, null], [377, null], [389, null], [403, null], [417, null], [431, null], [445, null], [459, null], [472, null], [483, null], [493, null], [503, null], [514, null], [527, null], [538, null]], "get_operator_regularizer()": [[159, null], [173, null]], "get_var()": [[5, null], [587, null]], "gridsearch()": [[654, null]], "hdf5_loadhandle": [[655, null]], "hdf5_savehandle": [[656, null]], "inverse_transform()": [[551, null], [560, null], [569, null], [578, null], [588, null], [598, null], [607, null]], "jacobian()": [[209, null], [219, null], [231, null], [243, null], [255, null], [264, null], [275, null], [288, null], [301, null], [314, null], [327, null], [340, null], [351, null], [366, null], [378, null], [390, null], [404, null], [418, null], [432, null], [446, null], [460, null], [473, null], [484, null], [494, null], [504, null], [515, null], [528, null], [539, null]], "lift()": [[95, null], [100, null], [105, null]], "lift.ipynb": [[666, "lift-ipynb"]], "lift_ddts()": [[96, null], [101, null], [106, null]], "load()": [[6, null], [16, null], [25, null], [36, null], [113, null], [126, null], [139, null], [149, null], [160, null], [174, null], [187, null], [197, null], [210, null], [220, null], [232, null], [244, null], [276, null], [289, null], [302, null], [315, null], [328, null], [341, null], [352, null], [367, null], [379, null], [391, null], [405, null], [419, null], [433, null], [447, null], [461, null], [474, null], [485, null], [495, null], [505, null], [516, null], [529, null], [540, null], [552, null], [561, null], [570, null], [579, null], [589, null], [599, null], [608, null], [625, null]], "lp_error()": [[546, null]], "lstsq.ipynb": [[666, "lstsq-ipynb"]], "lstsq_size()": [[204, null]], "mask()": [[55, null], [60, null], [65, null], [70, null]], "method_of_snapshots()": [[49, null]], "mpl_config()": [[657, null]], "operator_dimension()": [[277, null], [290, null], [303, null], [316, null], [329, null], [342, null], [353, null], [368, null], [380, null], [392, null], [406, null], [420, null], [434, null], [448, null], [462, null], [475, null], [486, null], [506, null], [530, null], [541, null]], "operators.ipynb": [[666, "operators-ipynb"]], "opinf": [[665, null]], "opinf.basis": [[661, null]], "opinf.ddt": [[662, null]], "opinf.lift": [[663, null]], "opinf.lstsq": [[664, null]], "opinf.models": [[667, null]], "opinf.operators": [[668, null]], "opinf.post": [[669, null]], "opinf.pre": [[670, null]], "opinf.roms": [[671, null]], "opinf.utils": [[672, null]], "ord2()": [[91, null]], "ord4()": [[92, null]], "ord6()": [[93, null]], "plot1D()": [[26, null], [37, null]], "plot_cumulative_energy()": [[38, null]], "plot_energy()": [[39, null]], "plot_projection_error()": [[40, null]], "plot_residual_energy()": [[41, null]], "plot_svdval_decay()": [[42, null]], "pod_basis()": [[50, null]], "posterior()": [[114, null], [127, null], [161, null], [175, null]], "pre.ipynb": [[666, "pre-ipynb"]], "predict()": [[211, null], [221, null], [233, null], [245, null], [256, null], [265, null], [622, null], [634, null], [642, null]], "project()": [[7, null], [17, null], [27, null], [43, null], [623, null], [635, null], [643, null]], "projection_error()": [[8, null], [18, null], [28, null], [44, null], [547, null]], "refit()": [[212, null], [222, null], [234, null], [246, null], [257, null], [266, null]], "regcond()": [[115, null], [128, null], [162, null], [176, null]], "regresidual()": [[116, null], [129, null], [163, null], [177, null]], "requires()": [[658, null]], "requires2()": [[659, null]], "reset()": [[117, null], [130, null], [140, null], [150, null], [164, null], [178, null], [188, null], [198, null]], "residual()": [[118, null], [131, null], [141, null], [151, null], [165, null], [179, null], [189, null], [199, null]], "residual_energy()": [[51, null]], "rhs()": [[213, null], [223, null], [235, null], [247, null], [258, null], [267, null]], "rvs()": [[626, null]], "save()": [[9, null], [19, null], [29, null], [45, null], [119, null], [132, null], [142, null], [152, null], [166, null], [180, null], [190, null], [200, null], [214, null], [224, null], [236, null], [248, null], [278, null], [291, null], [304, null], [317, null], [330, null], [343, null], [354, null], [369, null], [381, null], [393, null], [407, null], [421, null], [435, null], [449, null], [463, null], [476, null], [487, null], [496, null], [507, null], [517, null], [531, null], [542, null], [553, null], [562, null], [571, null], [580, null], [590, null], [600, null], [609, null], [627, null]], "scale()": [[613, null]], "set_dimension()": [[46, null]], "set_entries()": [[279, null], [292, null], [305, null], [318, null], [331, null], [344, null], [355, null], [370, null], [382, null], [394, null], [408, null], [422, null], [436, null], [450, null], [464, null], [477, null], [488, null], [508, null], [532, null], [543, null]], "set_interpolator()": [[237, null], [249, null], [395, null], [409, null], [423, null], [437, null], [451, null], [465, null]], "set_training_parameters()": [[396, null], [410, null], [424, null], [438, null], [452, null], [466, null]], "shift()": [[614, null]], "solve()": [[120, null], [133, null], [143, null], [153, null], [167, null], [181, null], [191, null], [201, null]], "split()": [[10, null], [591, null]], "stack_trajectories()": [[225, null]], "str2repr()": [[660, null]], "svdval_decay()": [[52, null]], "tcond()": [[202, null]], "transform()": [[554, null], [563, null], [572, null], [581, null], [592, null], [601, null], [610, null]], "transform_ddts()": [[555, null], [564, null], [573, null], [582, null], [593, null], [602, null], [611, null]], "unlift()": [[97, null], [102, null], [107, null]], "unstable()": [[647, null], [651, null]], "verify()": [[11, null], [20, null], [30, null], [47, null], [56, null], [61, null], [66, null], [71, null], [98, null], [103, null], [108, null], [121, null], [134, null], [144, null], [154, null], [168, null], [182, null], [192, null], [203, null], [280, null], [293, null], [306, null], [319, null], [332, null], [345, null], [356, null], [371, null], [383, null], [397, null], [411, null], [425, null], [439, null], [453, null], [467, null], [478, null], [489, null], [497, null], [509, null], [518, null], [533, null], [544, null], [556, null], [565, null], [574, null], [583, null], [594, null], [603, null], [612, null]], "verify_shapes()": [[57, null], [62, null], [67, null], [72, null]]}, "docnames": ["source/api/_autosummaries/bigLp-error", "source/api/_autosummaries/opinf.basis.BasisMulti", "source/api/_autosummaries/opinf.basis.BasisMulti.compress", "source/api/_autosummaries/opinf.basis.BasisMulti.decompress", "source/api/_autosummaries/opinf.basis.BasisMulti.fit", "source/api/_autosummaries/opinf.basis.BasisMulti.get_var", "source/api/_autosummaries/opinf.basis.BasisMulti.load", "source/api/_autosummaries/opinf.basis.BasisMulti.project", "source/api/_autosummaries/opinf.basis.BasisMulti.projection_error", "source/api/_autosummaries/opinf.basis.BasisMulti.save", "source/api/_autosummaries/opinf.basis.BasisMulti.split", "source/api/_autosummaries/opinf.basis.BasisMulti.verify", "source/api/_autosummaries/opinf.basis.BasisTemplate", "source/api/_autosummaries/opinf.basis.BasisTemplate.compress", "source/api/_autosummaries/opinf.basis.BasisTemplate.decompress", "source/api/_autosummaries/opinf.basis.BasisTemplate.fit", "source/api/_autosummaries/opinf.basis.BasisTemplate.load", "source/api/_autosummaries/opinf.basis.BasisTemplate.project", "source/api/_autosummaries/opinf.basis.BasisTemplate.projection_error", "source/api/_autosummaries/opinf.basis.BasisTemplate.save", "source/api/_autosummaries/opinf.basis.BasisTemplate.verify", "source/api/_autosummaries/opinf.basis.LinearBasis", "source/api/_autosummaries/opinf.basis.LinearBasis.compress", "source/api/_autosummaries/opinf.basis.LinearBasis.decompress", "source/api/_autosummaries/opinf.basis.LinearBasis.fit", "source/api/_autosummaries/opinf.basis.LinearBasis.load", "source/api/_autosummaries/opinf.basis.LinearBasis.plot1D", "source/api/_autosummaries/opinf.basis.LinearBasis.project", "source/api/_autosummaries/opinf.basis.LinearBasis.projection_error", "source/api/_autosummaries/opinf.basis.LinearBasis.save", "source/api/_autosummaries/opinf.basis.LinearBasis.verify", "source/api/_autosummaries/opinf.basis.PODBasis", "source/api/_autosummaries/opinf.basis.PODBasis.compress", "source/api/_autosummaries/opinf.basis.PODBasis.decompress", "source/api/_autosummaries/opinf.basis.PODBasis.fit", "source/api/_autosummaries/opinf.basis.PODBasis.from_svd", "source/api/_autosummaries/opinf.basis.PODBasis.load", "source/api/_autosummaries/opinf.basis.PODBasis.plot1D", "source/api/_autosummaries/opinf.basis.PODBasis.plot_cumulative_energy", "source/api/_autosummaries/opinf.basis.PODBasis.plot_energy", "source/api/_autosummaries/opinf.basis.PODBasis.plot_projection_error", "source/api/_autosummaries/opinf.basis.PODBasis.plot_residual_energy", "source/api/_autosummaries/opinf.basis.PODBasis.plot_svdval_decay", "source/api/_autosummaries/opinf.basis.PODBasis.project", "source/api/_autosummaries/opinf.basis.PODBasis.projection_error", "source/api/_autosummaries/opinf.basis.PODBasis.save", "source/api/_autosummaries/opinf.basis.PODBasis.set_dimension", "source/api/_autosummaries/opinf.basis.PODBasis.verify", "source/api/_autosummaries/opinf.basis.cumulative_energy", "source/api/_autosummaries/opinf.basis.method_of_snapshots", "source/api/_autosummaries/opinf.basis.pod_basis", "source/api/_autosummaries/opinf.basis.residual_energy", "source/api/_autosummaries/opinf.basis.svdval_decay", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.estimate", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.mask", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.verify", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.verify_shapes", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.estimate", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.mask", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.verify", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.verify_shapes", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.estimate", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.mask", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.verify", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.verify_shapes", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.estimate", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.mask", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.verify", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.verify_shapes", "source/api/_autosummaries/opinf.ddt.bwd1", "source/api/_autosummaries/opinf.ddt.bwd2", "source/api/_autosummaries/opinf.ddt.bwd3", "source/api/_autosummaries/opinf.ddt.bwd4", "source/api/_autosummaries/opinf.ddt.bwd5", "source/api/_autosummaries/opinf.ddt.bwd6", "source/api/_autosummaries/opinf.ddt.ctr2", "source/api/_autosummaries/opinf.ddt.ctr4", "source/api/_autosummaries/opinf.ddt.ctr6", "source/api/_autosummaries/opinf.ddt.ddt", "source/api/_autosummaries/opinf.ddt.ddt_nonuniform", "source/api/_autosummaries/opinf.ddt.ddt_uniform", "source/api/_autosummaries/opinf.ddt.fwd1", "source/api/_autosummaries/opinf.ddt.fwd2", "source/api/_autosummaries/opinf.ddt.fwd3", "source/api/_autosummaries/opinf.ddt.fwd4", "source/api/_autosummaries/opinf.ddt.fwd5", "source/api/_autosummaries/opinf.ddt.fwd6", "source/api/_autosummaries/opinf.ddt.ord2", "source/api/_autosummaries/opinf.ddt.ord4", "source/api/_autosummaries/opinf.ddt.ord6", "source/api/_autosummaries/opinf.lift.LifterTemplate", "source/api/_autosummaries/opinf.lift.LifterTemplate.lift", "source/api/_autosummaries/opinf.lift.LifterTemplate.lift_ddts", "source/api/_autosummaries/opinf.lift.LifterTemplate.unlift", "source/api/_autosummaries/opinf.lift.LifterTemplate.verify", "source/api/_autosummaries/opinf.lift.PolynomialLifter", "source/api/_autosummaries/opinf.lift.PolynomialLifter.lift", "source/api/_autosummaries/opinf.lift.PolynomialLifter.lift_ddts", "source/api/_autosummaries/opinf.lift.PolynomialLifter.unlift", "source/api/_autosummaries/opinf.lift.PolynomialLifter.verify", "source/api/_autosummaries/opinf.lift.QuadraticLifter", "source/api/_autosummaries/opinf.lift.QuadraticLifter.lift", "source/api/_autosummaries/opinf.lift.QuadraticLifter.lift_ddts", "source/api/_autosummaries/opinf.lift.QuadraticLifter.unlift", "source/api/_autosummaries/opinf.lift.QuadraticLifter.verify", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.cond", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.copy", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.fit", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.load", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.posterior", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.regcond", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.regresidual", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.reset", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.residual", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.save", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.solve", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.verify", "source/api/_autosummaries/opinf.lstsq.L2Solver", "source/api/_autosummaries/opinf.lstsq.L2Solver.cond", "source/api/_autosummaries/opinf.lstsq.L2Solver.copy", "source/api/_autosummaries/opinf.lstsq.L2Solver.fit", "source/api/_autosummaries/opinf.lstsq.L2Solver.load", "source/api/_autosummaries/opinf.lstsq.L2Solver.posterior", "source/api/_autosummaries/opinf.lstsq.L2Solver.regcond", "source/api/_autosummaries/opinf.lstsq.L2Solver.regresidual", "source/api/_autosummaries/opinf.lstsq.L2Solver.reset", "source/api/_autosummaries/opinf.lstsq.L2Solver.residual", "source/api/_autosummaries/opinf.lstsq.L2Solver.save", "source/api/_autosummaries/opinf.lstsq.L2Solver.solve", "source/api/_autosummaries/opinf.lstsq.L2Solver.verify", "source/api/_autosummaries/opinf.lstsq.PlainSolver", "source/api/_autosummaries/opinf.lstsq.PlainSolver.cond", "source/api/_autosummaries/opinf.lstsq.PlainSolver.copy", "source/api/_autosummaries/opinf.lstsq.PlainSolver.fit", "source/api/_autosummaries/opinf.lstsq.PlainSolver.load", "source/api/_autosummaries/opinf.lstsq.PlainSolver.reset", "source/api/_autosummaries/opinf.lstsq.PlainSolver.residual", "source/api/_autosummaries/opinf.lstsq.PlainSolver.save", "source/api/_autosummaries/opinf.lstsq.PlainSolver.solve", "source/api/_autosummaries/opinf.lstsq.PlainSolver.verify", "source/api/_autosummaries/opinf.lstsq.SolverTemplate", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.cond", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.copy", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.fit", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.load", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.reset", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.residual", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.save", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.solve", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.verify", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.cond", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.copy", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.fit", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.get_operator_regularizer", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.load", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.posterior", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.regcond", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.regresidual", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.reset", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.residual", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.save", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.solve", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.verify", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.cond", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.copy", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.fit", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.get_operator_regularizer", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.load", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.posterior", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.regcond", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.regresidual", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.reset", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.residual", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.save", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.solve", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.verify", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.cond", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.copy", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.fit", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.load", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.reset", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.residual", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.save", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.solve", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.verify", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.cond", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.copy", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.fit", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.load", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.reset", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.residual", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.save", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.solve", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.tcond", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.verify", "source/api/_autosummaries/opinf.lstsq.lstsq_size", "source/api/_autosummaries/opinf.models.ContinuousModel", "source/api/_autosummaries/opinf.models.ContinuousModel.copy", "source/api/_autosummaries/opinf.models.ContinuousModel.fit", "source/api/_autosummaries/opinf.models.ContinuousModel.galerkin", "source/api/_autosummaries/opinf.models.ContinuousModel.jacobian", "source/api/_autosummaries/opinf.models.ContinuousModel.load", "source/api/_autosummaries/opinf.models.ContinuousModel.predict", "source/api/_autosummaries/opinf.models.ContinuousModel.refit", "source/api/_autosummaries/opinf.models.ContinuousModel.rhs", "source/api/_autosummaries/opinf.models.ContinuousModel.save", "source/api/_autosummaries/opinf.models.DiscreteModel", "source/api/_autosummaries/opinf.models.DiscreteModel.copy", "source/api/_autosummaries/opinf.models.DiscreteModel.fit", "source/api/_autosummaries/opinf.models.DiscreteModel.galerkin", "source/api/_autosummaries/opinf.models.DiscreteModel.jacobian", "source/api/_autosummaries/opinf.models.DiscreteModel.load", "source/api/_autosummaries/opinf.models.DiscreteModel.predict", "source/api/_autosummaries/opinf.models.DiscreteModel.refit", "source/api/_autosummaries/opinf.models.DiscreteModel.rhs", "source/api/_autosummaries/opinf.models.DiscreteModel.save", "source/api/_autosummaries/opinf.models.DiscreteModel.stack_trajectories", "source/api/_autosummaries/opinf.models.InterpContinuousModel", "source/api/_autosummaries/opinf.models.InterpContinuousModel.copy", "source/api/_autosummaries/opinf.models.InterpContinuousModel.evaluate", "source/api/_autosummaries/opinf.models.InterpContinuousModel.fit", "source/api/_autosummaries/opinf.models.InterpContinuousModel.galerkin", "source/api/_autosummaries/opinf.models.InterpContinuousModel.jacobian", "source/api/_autosummaries/opinf.models.InterpContinuousModel.load", "source/api/_autosummaries/opinf.models.InterpContinuousModel.predict", "source/api/_autosummaries/opinf.models.InterpContinuousModel.refit", "source/api/_autosummaries/opinf.models.InterpContinuousModel.rhs", "source/api/_autosummaries/opinf.models.InterpContinuousModel.save", "source/api/_autosummaries/opinf.models.InterpContinuousModel.set_interpolator", "source/api/_autosummaries/opinf.models.InterpDiscreteModel", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.copy", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.evaluate", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.fit", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.galerkin", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.jacobian", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.load", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.predict", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.refit", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.rhs", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.save", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.set_interpolator", "source/api/_autosummaries/opinf.models.ParametricContinuousModel", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.copy", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.evaluate", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.fit", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.galerkin", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.jacobian", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.predict", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.refit", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.rhs", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.copy", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.evaluate", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.fit", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.galerkin", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.jacobian", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.predict", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.refit", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.rhs", "source/api/_autosummaries/opinf.operators.AffineConstantOperator", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.apply", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.copy", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.load", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.save", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.verify", "source/api/_autosummaries/opinf.operators.AffineCubicOperator", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.apply", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.copy", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.load", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.save", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.verify", "source/api/_autosummaries/opinf.operators.AffineInputOperator", "source/api/_autosummaries/opinf.operators.AffineInputOperator.apply", "source/api/_autosummaries/opinf.operators.AffineInputOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineInputOperator.copy", "source/api/_autosummaries/opinf.operators.AffineInputOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineInputOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineInputOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineInputOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineInputOperator.load", "source/api/_autosummaries/opinf.operators.AffineInputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineInputOperator.save", "source/api/_autosummaries/opinf.operators.AffineInputOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineInputOperator.verify", "source/api/_autosummaries/opinf.operators.AffineLinearOperator", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.apply", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.copy", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.load", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.save", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.verify", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.apply", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.copy", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.load", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.save", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.verify", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.apply", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.coeffs", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.copy", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.datablock", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.evaluate", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.galerkin", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.jacobian", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.load", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.save", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.set_entries", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.verify", "source/api/_autosummaries/opinf.operators.ConstantOperator", "source/api/_autosummaries/opinf.operators.ConstantOperator.apply", "source/api/_autosummaries/opinf.operators.ConstantOperator.copy", "source/api/_autosummaries/opinf.operators.ConstantOperator.datablock", "source/api/_autosummaries/opinf.operators.ConstantOperator.galerkin", "source/api/_autosummaries/opinf.operators.ConstantOperator.jacobian", "source/api/_autosummaries/opinf.operators.ConstantOperator.load", "source/api/_autosummaries/opinf.operators.ConstantOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.ConstantOperator.save", "source/api/_autosummaries/opinf.operators.ConstantOperator.set_entries", "source/api/_autosummaries/opinf.operators.ConstantOperator.verify", "source/api/_autosummaries/opinf.operators.CubicOperator", "source/api/_autosummaries/opinf.operators.CubicOperator.apply", "source/api/_autosummaries/opinf.operators.CubicOperator.ckron", "source/api/_autosummaries/opinf.operators.CubicOperator.ckron_indices", "source/api/_autosummaries/opinf.operators.CubicOperator.compress_entries", "source/api/_autosummaries/opinf.operators.CubicOperator.copy", "source/api/_autosummaries/opinf.operators.CubicOperator.datablock", "source/api/_autosummaries/opinf.operators.CubicOperator.expand_entries", "source/api/_autosummaries/opinf.operators.CubicOperator.galerkin", "source/api/_autosummaries/opinf.operators.CubicOperator.jacobian", "source/api/_autosummaries/opinf.operators.CubicOperator.load", "source/api/_autosummaries/opinf.operators.CubicOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.CubicOperator.save", "source/api/_autosummaries/opinf.operators.CubicOperator.set_entries", "source/api/_autosummaries/opinf.operators.CubicOperator.verify", "source/api/_autosummaries/opinf.operators.InputMixin", "source/api/_autosummaries/opinf.operators.InputOperator", "source/api/_autosummaries/opinf.operators.InputOperator.apply", "source/api/_autosummaries/opinf.operators.InputOperator.copy", "source/api/_autosummaries/opinf.operators.InputOperator.datablock", "source/api/_autosummaries/opinf.operators.InputOperator.galerkin", "source/api/_autosummaries/opinf.operators.InputOperator.jacobian", "source/api/_autosummaries/opinf.operators.InputOperator.load", "source/api/_autosummaries/opinf.operators.InputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InputOperator.save", "source/api/_autosummaries/opinf.operators.InputOperator.set_entries", "source/api/_autosummaries/opinf.operators.InputOperator.verify", "source/api/_autosummaries/opinf.operators.InterpConstantOperator", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.apply", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.copy", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.load", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.save", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.verify", "source/api/_autosummaries/opinf.operators.InterpCubicOperator", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.apply", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.copy", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.load", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.save", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.verify", "source/api/_autosummaries/opinf.operators.InterpInputOperator", "source/api/_autosummaries/opinf.operators.InterpInputOperator.apply", "source/api/_autosummaries/opinf.operators.InterpInputOperator.copy", "source/api/_autosummaries/opinf.operators.InterpInputOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpInputOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpInputOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpInputOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpInputOperator.load", "source/api/_autosummaries/opinf.operators.InterpInputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpInputOperator.save", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpInputOperator.verify", "source/api/_autosummaries/opinf.operators.InterpLinearOperator", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.apply", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.copy", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.load", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.save", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.verify", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.apply", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.copy", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.load", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.save", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.verify", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.apply", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.copy", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.datablock", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.evaluate", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.galerkin", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.jacobian", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.load", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.save", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_entries", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_interpolator", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_training_parameters", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.verify", "source/api/_autosummaries/opinf.operators.LinearOperator", "source/api/_autosummaries/opinf.operators.LinearOperator.apply", "source/api/_autosummaries/opinf.operators.LinearOperator.copy", "source/api/_autosummaries/opinf.operators.LinearOperator.datablock", "source/api/_autosummaries/opinf.operators.LinearOperator.galerkin", "source/api/_autosummaries/opinf.operators.LinearOperator.jacobian", "source/api/_autosummaries/opinf.operators.LinearOperator.load", "source/api/_autosummaries/opinf.operators.LinearOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.LinearOperator.save", "source/api/_autosummaries/opinf.operators.LinearOperator.set_entries", "source/api/_autosummaries/opinf.operators.LinearOperator.verify", "source/api/_autosummaries/opinf.operators.OpInfOperator", "source/api/_autosummaries/opinf.operators.OpInfOperator.apply", "source/api/_autosummaries/opinf.operators.OpInfOperator.copy", "source/api/_autosummaries/opinf.operators.OpInfOperator.datablock", "source/api/_autosummaries/opinf.operators.OpInfOperator.galerkin", "source/api/_autosummaries/opinf.operators.OpInfOperator.jacobian", "source/api/_autosummaries/opinf.operators.OpInfOperator.load", "source/api/_autosummaries/opinf.operators.OpInfOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.OpInfOperator.save", "source/api/_autosummaries/opinf.operators.OpInfOperator.set_entries", "source/api/_autosummaries/opinf.operators.OpInfOperator.verify", "source/api/_autosummaries/opinf.operators.OperatorTemplate", "source/api/_autosummaries/opinf.operators.OperatorTemplate.apply", "source/api/_autosummaries/opinf.operators.OperatorTemplate.copy", "source/api/_autosummaries/opinf.operators.OperatorTemplate.galerkin", "source/api/_autosummaries/opinf.operators.OperatorTemplate.jacobian", "source/api/_autosummaries/opinf.operators.OperatorTemplate.load", "source/api/_autosummaries/opinf.operators.OperatorTemplate.save", "source/api/_autosummaries/opinf.operators.OperatorTemplate.verify", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.apply", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.copy", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.datablock", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.evaluate", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.galerkin", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.jacobian", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.load", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.save", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.set_entries", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.verify", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.apply", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.copy", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.evaluate", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.galerkin", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.jacobian", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.load", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.save", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.verify", "source/api/_autosummaries/opinf.operators.QuadraticOperator", "source/api/_autosummaries/opinf.operators.QuadraticOperator.apply", "source/api/_autosummaries/opinf.operators.QuadraticOperator.ckron", "source/api/_autosummaries/opinf.operators.QuadraticOperator.ckron_indices", "source/api/_autosummaries/opinf.operators.QuadraticOperator.compress_entries", "source/api/_autosummaries/opinf.operators.QuadraticOperator.copy", "source/api/_autosummaries/opinf.operators.QuadraticOperator.datablock", "source/api/_autosummaries/opinf.operators.QuadraticOperator.expand_entries", "source/api/_autosummaries/opinf.operators.QuadraticOperator.galerkin", "source/api/_autosummaries/opinf.operators.QuadraticOperator.jacobian", "source/api/_autosummaries/opinf.operators.QuadraticOperator.load", "source/api/_autosummaries/opinf.operators.QuadraticOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.QuadraticOperator.save", "source/api/_autosummaries/opinf.operators.QuadraticOperator.set_entries", "source/api/_autosummaries/opinf.operators.QuadraticOperator.verify", "source/api/_autosummaries/opinf.operators.StateInputOperator", "source/api/_autosummaries/opinf.operators.StateInputOperator.apply", "source/api/_autosummaries/opinf.operators.StateInputOperator.copy", "source/api/_autosummaries/opinf.operators.StateInputOperator.datablock", "source/api/_autosummaries/opinf.operators.StateInputOperator.galerkin", "source/api/_autosummaries/opinf.operators.StateInputOperator.jacobian", "source/api/_autosummaries/opinf.operators.StateInputOperator.load", "source/api/_autosummaries/opinf.operators.StateInputOperator.operator_dimension", "source/api/_autosummaries/opinf.operators.StateInputOperator.save", "source/api/_autosummaries/opinf.operators.StateInputOperator.set_entries", "source/api/_autosummaries/opinf.operators.StateInputOperator.verify", "source/api/_autosummaries/opinf.post.frobenius_error", "source/api/_autosummaries/opinf.post.lp_error", "source/api/_autosummaries/opinf.post.projection_error", "source/api/_autosummaries/opinf.pre.NullTransformer", "source/api/_autosummaries/opinf.pre.NullTransformer.fit", "source/api/_autosummaries/opinf.pre.NullTransformer.fit_transform", "source/api/_autosummaries/opinf.pre.NullTransformer.inverse_transform", "source/api/_autosummaries/opinf.pre.NullTransformer.load", "source/api/_autosummaries/opinf.pre.NullTransformer.save", "source/api/_autosummaries/opinf.pre.NullTransformer.transform", "source/api/_autosummaries/opinf.pre.NullTransformer.transform_ddts", "source/api/_autosummaries/opinf.pre.NullTransformer.verify", "source/api/_autosummaries/opinf.pre.ScaleTransformer", "source/api/_autosummaries/opinf.pre.ScaleTransformer.fit", "source/api/_autosummaries/opinf.pre.ScaleTransformer.fit_transform", "source/api/_autosummaries/opinf.pre.ScaleTransformer.inverse_transform", "source/api/_autosummaries/opinf.pre.ScaleTransformer.load", "source/api/_autosummaries/opinf.pre.ScaleTransformer.save", "source/api/_autosummaries/opinf.pre.ScaleTransformer.transform", "source/api/_autosummaries/opinf.pre.ScaleTransformer.transform_ddts", "source/api/_autosummaries/opinf.pre.ScaleTransformer.verify", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.fit", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.fit_transform", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.inverse_transform", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.load", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.save", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.transform", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.transform_ddts", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.verify", "source/api/_autosummaries/opinf.pre.ShiftTransformer", "source/api/_autosummaries/opinf.pre.ShiftTransformer.fit", "source/api/_autosummaries/opinf.pre.ShiftTransformer.fit_transform", "source/api/_autosummaries/opinf.pre.ShiftTransformer.inverse_transform", "source/api/_autosummaries/opinf.pre.ShiftTransformer.load", "source/api/_autosummaries/opinf.pre.ShiftTransformer.save", "source/api/_autosummaries/opinf.pre.ShiftTransformer.transform", "source/api/_autosummaries/opinf.pre.ShiftTransformer.transform_ddts", "source/api/_autosummaries/opinf.pre.ShiftTransformer.verify", "source/api/_autosummaries/opinf.pre.TransformerMulti", "source/api/_autosummaries/opinf.pre.TransformerMulti.fit", "source/api/_autosummaries/opinf.pre.TransformerMulti.fit_transform", "source/api/_autosummaries/opinf.pre.TransformerMulti.get_var", "source/api/_autosummaries/opinf.pre.TransformerMulti.inverse_transform", "source/api/_autosummaries/opinf.pre.TransformerMulti.load", "source/api/_autosummaries/opinf.pre.TransformerMulti.save", "source/api/_autosummaries/opinf.pre.TransformerMulti.split", "source/api/_autosummaries/opinf.pre.TransformerMulti.transform", "source/api/_autosummaries/opinf.pre.TransformerMulti.transform_ddts", "source/api/_autosummaries/opinf.pre.TransformerMulti.verify", "source/api/_autosummaries/opinf.pre.TransformerPipeline", "source/api/_autosummaries/opinf.pre.TransformerPipeline.fit", "source/api/_autosummaries/opinf.pre.TransformerPipeline.fit_transform", "source/api/_autosummaries/opinf.pre.TransformerPipeline.inverse_transform", "source/api/_autosummaries/opinf.pre.TransformerPipeline.load", "source/api/_autosummaries/opinf.pre.TransformerPipeline.save", "source/api/_autosummaries/opinf.pre.TransformerPipeline.transform", "source/api/_autosummaries/opinf.pre.TransformerPipeline.transform_ddts", "source/api/_autosummaries/opinf.pre.TransformerPipeline.verify", "source/api/_autosummaries/opinf.pre.TransformerTemplate", "source/api/_autosummaries/opinf.pre.TransformerTemplate.fit", "source/api/_autosummaries/opinf.pre.TransformerTemplate.fit_transform", "source/api/_autosummaries/opinf.pre.TransformerTemplate.inverse_transform", "source/api/_autosummaries/opinf.pre.TransformerTemplate.load", "source/api/_autosummaries/opinf.pre.TransformerTemplate.save", "source/api/_autosummaries/opinf.pre.TransformerTemplate.transform", "source/api/_autosummaries/opinf.pre.TransformerTemplate.transform_ddts", "source/api/_autosummaries/opinf.pre.TransformerTemplate.verify", "source/api/_autosummaries/opinf.pre.scale", "source/api/_autosummaries/opinf.pre.shift", "source/api/_autosummaries/opinf.roms.BayesianROM", "source/api/_autosummaries/opinf.roms.BayesianROM.decode", "source/api/_autosummaries/opinf.roms.BayesianROM.draw_operators", "source/api/_autosummaries/opinf.roms.BayesianROM.encode", "source/api/_autosummaries/opinf.roms.BayesianROM.fit", "source/api/_autosummaries/opinf.roms.BayesianROM.fit_regselect_continuous", "source/api/_autosummaries/opinf.roms.BayesianROM.fit_regselect_discrete", "source/api/_autosummaries/opinf.roms.BayesianROM.predict", "source/api/_autosummaries/opinf.roms.BayesianROM.project", "source/api/_autosummaries/opinf.roms.OperatorPosterior", "source/api/_autosummaries/opinf.roms.OperatorPosterior.load", "source/api/_autosummaries/opinf.roms.OperatorPosterior.rvs", "source/api/_autosummaries/opinf.roms.OperatorPosterior.save", "source/api/_autosummaries/opinf.roms.ParametricROM", "source/api/_autosummaries/opinf.roms.ParametricROM.decode", "source/api/_autosummaries/opinf.roms.ParametricROM.encode", "source/api/_autosummaries/opinf.roms.ParametricROM.fit", "source/api/_autosummaries/opinf.roms.ParametricROM.fit_regselect_continuous", "source/api/_autosummaries/opinf.roms.ParametricROM.fit_regselect_discrete", "source/api/_autosummaries/opinf.roms.ParametricROM.predict", "source/api/_autosummaries/opinf.roms.ParametricROM.project", "source/api/_autosummaries/opinf.roms.ROM", "source/api/_autosummaries/opinf.roms.ROM.decode", "source/api/_autosummaries/opinf.roms.ROM.encode", "source/api/_autosummaries/opinf.roms.ROM.fit", "source/api/_autosummaries/opinf.roms.ROM.fit_regselect_continuous", "source/api/_autosummaries/opinf.roms.ROM.fit_regselect_discrete", "source/api/_autosummaries/opinf.roms.ROM.predict", "source/api/_autosummaries/opinf.roms.ROM.project", "source/api/_autosummaries/opinf.utils.ContinuousRegTest", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.copy", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.evaluate", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.unstable", "source/api/_autosummaries/opinf.utils.DiscreteRegTest", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.copy", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.evaluate", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.unstable", "source/api/_autosummaries/opinf.utils.TimedBlock", "source/api/_autosummaries/opinf.utils.TimedBlock.add_logfile", "source/api/_autosummaries/opinf.utils.gridsearch", "source/api/_autosummaries/opinf.utils.hdf5_loadhandle", "source/api/_autosummaries/opinf.utils.hdf5_savehandle", "source/api/_autosummaries/opinf.utils.mpl_config", "source/api/_autosummaries/opinf.utils.requires", "source/api/_autosummaries/opinf.utils.requires2", "source/api/_autosummaries/opinf.utils.str2repr", "source/api/basis", "source/api/ddt", "source/api/lift", "source/api/lstsq", "source/api/main", "source/api/missing", "source/api/models", "source/api/operators", "source/api/post", "source/api/pre", "source/api/roms", "source/api/utils", "source/contributing/documentation", "source/contributing/how_to_contribute", "source/contributing/notation", "source/contributing/testing", "source/index", "source/opinf/bibliography", "source/opinf/changelog", "source/opinf/installation", "source/opinf/intro", "source/opinf/literature", "source/tutorials/basics", "source/tutorials/euler", "source/tutorials/inputs", "source/tutorials/parametric"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["source/api/_autosummaries/bigLp-error.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.compress.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.decompress.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.fit.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.get_var.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.load.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.project.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.projection_error.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.save.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.split.rst", "source/api/_autosummaries/opinf.basis.BasisMulti.verify.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.compress.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.decompress.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.fit.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.load.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.project.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.projection_error.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.save.rst", "source/api/_autosummaries/opinf.basis.BasisTemplate.verify.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.compress.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.decompress.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.fit.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.load.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.plot1D.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.project.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.projection_error.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.save.rst", "source/api/_autosummaries/opinf.basis.LinearBasis.verify.rst", "source/api/_autosummaries/opinf.basis.PODBasis.rst", "source/api/_autosummaries/opinf.basis.PODBasis.compress.rst", "source/api/_autosummaries/opinf.basis.PODBasis.decompress.rst", "source/api/_autosummaries/opinf.basis.PODBasis.fit.rst", "source/api/_autosummaries/opinf.basis.PODBasis.from_svd.rst", "source/api/_autosummaries/opinf.basis.PODBasis.load.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot1D.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot_cumulative_energy.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot_energy.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot_projection_error.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot_residual_energy.rst", "source/api/_autosummaries/opinf.basis.PODBasis.plot_svdval_decay.rst", "source/api/_autosummaries/opinf.basis.PODBasis.project.rst", "source/api/_autosummaries/opinf.basis.PODBasis.projection_error.rst", "source/api/_autosummaries/opinf.basis.PODBasis.save.rst", "source/api/_autosummaries/opinf.basis.PODBasis.set_dimension.rst", "source/api/_autosummaries/opinf.basis.PODBasis.verify.rst", "source/api/_autosummaries/opinf.basis.cumulative_energy.rst", "source/api/_autosummaries/opinf.basis.method_of_snapshots.rst", "source/api/_autosummaries/opinf.basis.pod_basis.rst", "source/api/_autosummaries/opinf.basis.residual_energy.rst", "source/api/_autosummaries/opinf.basis.svdval_decay.rst", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.rst", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.estimate.rst", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.mask.rst", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.verify.rst", "source/api/_autosummaries/opinf.ddt.DerivativeEstimatorTemplate.verify_shapes.rst", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.rst", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.estimate.rst", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.mask.rst", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.verify.rst", "source/api/_autosummaries/opinf.ddt.InterpDerivativeEstimator.verify_shapes.rst", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.rst", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.estimate.rst", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.mask.rst", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.verify.rst", "source/api/_autosummaries/opinf.ddt.NonuniformFiniteDifferencer.verify_shapes.rst", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.rst", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.estimate.rst", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.mask.rst", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.verify.rst", "source/api/_autosummaries/opinf.ddt.UniformFiniteDifferencer.verify_shapes.rst", "source/api/_autosummaries/opinf.ddt.bwd1.rst", "source/api/_autosummaries/opinf.ddt.bwd2.rst", "source/api/_autosummaries/opinf.ddt.bwd3.rst", "source/api/_autosummaries/opinf.ddt.bwd4.rst", "source/api/_autosummaries/opinf.ddt.bwd5.rst", "source/api/_autosummaries/opinf.ddt.bwd6.rst", "source/api/_autosummaries/opinf.ddt.ctr2.rst", "source/api/_autosummaries/opinf.ddt.ctr4.rst", "source/api/_autosummaries/opinf.ddt.ctr6.rst", "source/api/_autosummaries/opinf.ddt.ddt.rst", "source/api/_autosummaries/opinf.ddt.ddt_nonuniform.rst", "source/api/_autosummaries/opinf.ddt.ddt_uniform.rst", "source/api/_autosummaries/opinf.ddt.fwd1.rst", "source/api/_autosummaries/opinf.ddt.fwd2.rst", "source/api/_autosummaries/opinf.ddt.fwd3.rst", "source/api/_autosummaries/opinf.ddt.fwd4.rst", "source/api/_autosummaries/opinf.ddt.fwd5.rst", "source/api/_autosummaries/opinf.ddt.fwd6.rst", "source/api/_autosummaries/opinf.ddt.ord2.rst", "source/api/_autosummaries/opinf.ddt.ord4.rst", "source/api/_autosummaries/opinf.ddt.ord6.rst", "source/api/_autosummaries/opinf.lift.LifterTemplate.rst", "source/api/_autosummaries/opinf.lift.LifterTemplate.lift.rst", "source/api/_autosummaries/opinf.lift.LifterTemplate.lift_ddts.rst", "source/api/_autosummaries/opinf.lift.LifterTemplate.unlift.rst", "source/api/_autosummaries/opinf.lift.LifterTemplate.verify.rst", "source/api/_autosummaries/opinf.lift.PolynomialLifter.rst", "source/api/_autosummaries/opinf.lift.PolynomialLifter.lift.rst", "source/api/_autosummaries/opinf.lift.PolynomialLifter.lift_ddts.rst", "source/api/_autosummaries/opinf.lift.PolynomialLifter.unlift.rst", "source/api/_autosummaries/opinf.lift.PolynomialLifter.verify.rst", "source/api/_autosummaries/opinf.lift.QuadraticLifter.rst", "source/api/_autosummaries/opinf.lift.QuadraticLifter.lift.rst", "source/api/_autosummaries/opinf.lift.QuadraticLifter.lift_ddts.rst", "source/api/_autosummaries/opinf.lift.QuadraticLifter.unlift.rst", "source/api/_autosummaries/opinf.lift.QuadraticLifter.verify.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.posterior.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.regcond.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.regresidual.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.L2DecoupledSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.cond.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.copy.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.fit.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.load.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.posterior.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.regcond.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.regresidual.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.reset.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.residual.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.save.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.solve.rst", "source/api/_autosummaries/opinf.lstsq.L2Solver.verify.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.PlainSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.cond.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.copy.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.fit.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.load.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.reset.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.residual.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.save.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.solve.rst", "source/api/_autosummaries/opinf.lstsq.SolverTemplate.verify.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.get_operator_regularizer.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.posterior.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.regcond.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.regresidual.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovDecoupledSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.get_operator_regularizer.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.posterior.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.regcond.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.regresidual.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.TikhonovSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.TotalLeastSquaresSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.cond.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.copy.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.fit.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.load.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.reset.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.residual.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.save.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.solve.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.tcond.rst", "source/api/_autosummaries/opinf.lstsq.TruncatedSVDSolver.verify.rst", "source/api/_autosummaries/opinf.lstsq.lstsq_size.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.copy.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.fit.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.galerkin.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.jacobian.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.load.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.predict.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.refit.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.rhs.rst", "source/api/_autosummaries/opinf.models.ContinuousModel.save.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.copy.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.fit.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.galerkin.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.jacobian.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.load.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.predict.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.refit.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.rhs.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.save.rst", "source/api/_autosummaries/opinf.models.DiscreteModel.stack_trajectories.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.copy.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.evaluate.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.fit.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.galerkin.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.jacobian.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.load.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.predict.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.refit.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.rhs.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.save.rst", "source/api/_autosummaries/opinf.models.InterpContinuousModel.set_interpolator.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.copy.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.evaluate.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.fit.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.galerkin.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.jacobian.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.load.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.predict.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.refit.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.rhs.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.save.rst", "source/api/_autosummaries/opinf.models.InterpDiscreteModel.set_interpolator.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.copy.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.evaluate.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.fit.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.galerkin.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.jacobian.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.predict.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.refit.rst", "source/api/_autosummaries/opinf.models.ParametricContinuousModel.rhs.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.copy.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.evaluate.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.fit.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.galerkin.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.jacobian.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.predict.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.refit.rst", "source/api/_autosummaries/opinf.models.ParametricDiscreteModel.rhs.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineConstantOperator.verify.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineCubicOperator.verify.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineInputOperator.verify.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineLinearOperator.verify.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineQuadraticOperator.verify.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.coeffs.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.load.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.save.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.AffineStateInputOperator.verify.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.apply.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.copy.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.load.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.save.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.ConstantOperator.verify.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.apply.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.ckron.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.ckron_indices.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.compress_entries.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.copy.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.expand_entries.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.load.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.save.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.CubicOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InputMixin.rst", "source/api/_autosummaries/opinf.operators.InputOperator.rst", "source/api/_autosummaries/opinf.operators.InputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InputOperator.load.rst", "source/api/_autosummaries/opinf.operators.InputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InputOperator.save.rst", "source/api/_autosummaries/opinf.operators.InputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InputOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpConstantOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpCubicOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpInputOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpLinearOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpQuadraticOperator.verify.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.load.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.save.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_interpolator.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.set_training_parameters.rst", "source/api/_autosummaries/opinf.operators.InterpStateInputOperator.verify.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.apply.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.copy.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.load.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.save.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.LinearOperator.verify.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.apply.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.copy.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.load.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.save.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.OpInfOperator.verify.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.apply.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.copy.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.galerkin.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.jacobian.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.load.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.save.rst", "source/api/_autosummaries/opinf.operators.OperatorTemplate.verify.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.apply.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.copy.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.evaluate.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.load.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.save.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.ParametricOpInfOperator.verify.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.apply.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.copy.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.evaluate.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.galerkin.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.jacobian.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.load.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.save.rst", "source/api/_autosummaries/opinf.operators.ParametricOperatorTemplate.verify.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.apply.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.ckron.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.ckron_indices.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.compress_entries.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.copy.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.expand_entries.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.load.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.save.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.QuadraticOperator.verify.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.apply.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.copy.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.datablock.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.galerkin.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.jacobian.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.load.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.operator_dimension.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.save.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.set_entries.rst", "source/api/_autosummaries/opinf.operators.StateInputOperator.verify.rst", "source/api/_autosummaries/opinf.post.frobenius_error.rst", "source/api/_autosummaries/opinf.post.lp_error.rst", "source/api/_autosummaries/opinf.post.projection_error.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.fit.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.fit_transform.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.load.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.save.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.transform.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.NullTransformer.verify.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.fit.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.fit_transform.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.load.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.save.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.transform.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.ScaleTransformer.verify.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.fit.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.fit_transform.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.load.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.save.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.transform.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.ShiftScaleTransformer.verify.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.fit.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.fit_transform.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.load.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.save.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.transform.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.ShiftTransformer.verify.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.fit.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.fit_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.get_var.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.load.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.save.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.split.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.transform.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.TransformerMulti.verify.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.fit.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.fit_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.load.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.save.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.transform.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.TransformerPipeline.verify.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.fit.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.fit_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.inverse_transform.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.load.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.save.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.transform.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.transform_ddts.rst", "source/api/_autosummaries/opinf.pre.TransformerTemplate.verify.rst", "source/api/_autosummaries/opinf.pre.scale.rst", "source/api/_autosummaries/opinf.pre.shift.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.decode.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.draw_operators.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.encode.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.fit.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.fit_regselect_continuous.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.fit_regselect_discrete.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.predict.rst", "source/api/_autosummaries/opinf.roms.BayesianROM.project.rst", "source/api/_autosummaries/opinf.roms.OperatorPosterior.rst", "source/api/_autosummaries/opinf.roms.OperatorPosterior.load.rst", "source/api/_autosummaries/opinf.roms.OperatorPosterior.rvs.rst", "source/api/_autosummaries/opinf.roms.OperatorPosterior.save.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.decode.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.encode.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.fit.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.fit_regselect_continuous.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.fit_regselect_discrete.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.predict.rst", "source/api/_autosummaries/opinf.roms.ParametricROM.project.rst", "source/api/_autosummaries/opinf.roms.ROM.rst", "source/api/_autosummaries/opinf.roms.ROM.decode.rst", "source/api/_autosummaries/opinf.roms.ROM.encode.rst", "source/api/_autosummaries/opinf.roms.ROM.fit.rst", "source/api/_autosummaries/opinf.roms.ROM.fit_regselect_continuous.rst", "source/api/_autosummaries/opinf.roms.ROM.fit_regselect_discrete.rst", "source/api/_autosummaries/opinf.roms.ROM.predict.rst", "source/api/_autosummaries/opinf.roms.ROM.project.rst", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.rst", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.copy.rst", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.evaluate.rst", "source/api/_autosummaries/opinf.utils.ContinuousRegTest.unstable.rst", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.rst", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.copy.rst", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.evaluate.rst", "source/api/_autosummaries/opinf.utils.DiscreteRegTest.unstable.rst", "source/api/_autosummaries/opinf.utils.TimedBlock.rst", "source/api/_autosummaries/opinf.utils.TimedBlock.add_logfile.rst", "source/api/_autosummaries/opinf.utils.gridsearch.rst", "source/api/_autosummaries/opinf.utils.hdf5_loadhandle.rst", "source/api/_autosummaries/opinf.utils.hdf5_savehandle.rst", "source/api/_autosummaries/opinf.utils.mpl_config.rst", "source/api/_autosummaries/opinf.utils.requires.rst", "source/api/_autosummaries/opinf.utils.requires2.rst", "source/api/_autosummaries/opinf.utils.str2repr.rst", "source/api/basis.ipynb", "source/api/ddt.ipynb", "source/api/lift.ipynb", "source/api/lstsq.ipynb", "source/api/main.md", "source/api/missing.rst", "source/api/models.md", "source/api/operators.ipynb", "source/api/post.md", "source/api/pre.ipynb", "source/api/roms.md", "source/api/utils.md", "source/contributing/documentation.md", "source/contributing/how_to_contribute.md", "source/contributing/notation.md", "source/contributing/testing.md", "source/index.md", "source/opinf/bibliography.md", "source/opinf/changelog.md", "source/opinf/installation.md", "source/opinf/intro.ipynb", "source/opinf/literature.md", "source/tutorials/basics.ipynb", "source/tutorials/euler.ipynb", "source/tutorials/inputs.ipynb", "source/tutorials/parametric.ipynb"], "indexentries": {}, "objects": {"opinf": [[661, 0, 0, "-", "basis"], [662, 0, 0, "-", "ddt"], [663, 0, 0, "-", "lift"], [664, 0, 0, "-", "lstsq"], [667, 0, 0, "-", "models"], [668, 0, 0, "-", "operators"], [669, 0, 0, "-", "post"], [670, 0, 0, "-", "pre"], [671, 0, 0, "-", "roms"], [672, 0, 0, "-", "utils"]], "opinf.basis": [[1, 1, 1, "", "BasisMulti"], [12, 1, 1, "", "BasisTemplate"], [21, 1, 1, "", "LinearBasis"], [31, 1, 1, "", "PODBasis"], [48, 4, 1, "", "cumulative_energy"], [49, 4, 1, "", "method_of_snapshots"], [50, 4, 1, "", "pod_basis"], [51, 4, 1, "", "residual_energy"], [52, 4, 1, "", "svdval_decay"]], "opinf.basis.BasisMulti": [[1, 2, 1, "", "bases"], [2, 3, 1, "", "compress"], [3, 3, 1, "", "decompress"], [4, 3, 1, "", "fit"], [1, 2, 1, "", "full_state_dimension"], [1, 2, 1, "", "full_variable_sizes"], [5, 3, 1, "", "get_var"], [6, 3, 1, "", "load"], [1, 2, 1, "", "num_variables"], [7, 3, 1, "", "project"], [8, 3, 1, "", "projection_error"], [1, 2, 1, "", "reduced_state_dimension"], [1, 2, 1, "", "reduced_variable_sizes"], [9, 3, 1, "", "save"], [1, 2, 1, "", "shape"], [10, 3, 1, "", "split"], [1, 2, 1, "", "variable_names"], [11, 3, 1, "", "verify"]], "opinf.basis.BasisTemplate": [[13, 3, 1, "", "compress"], [14, 3, 1, "", "decompress"], [15, 3, 1, "", "fit"], [12, 2, 1, "", "full_state_dimension"], [16, 3, 1, "", "load"], [12, 2, 1, "", "name"], [17, 3, 1, "", "project"], [18, 3, 1, "", "projection_error"], [12, 2, 1, "", "reduced_state_dimension"], [19, 3, 1, "", "save"], [12, 2, 1, "", "shape"], [20, 3, 1, "", "verify"]], "opinf.basis.LinearBasis": [[22, 3, 1, "", "compress"], [23, 3, 1, "", "decompress"], [21, 2, 1, "", "entries"], [24, 3, 1, "", "fit"], [21, 2, 1, "", "full_state_dimension"], [25, 3, 1, "", "load"], [21, 2, 1, "", "name"], [26, 3, 1, "", "plot1D"], [27, 3, 1, "", "project"], [28, 3, 1, "", "projection_error"], [21, 2, 1, "", "reduced_state_dimension"], [29, 3, 1, "", "save"], [21, 2, 1, "", "shape"], [30, 3, 1, "", "verify"], [21, 2, 1, "", "weights"]], "opinf.basis.PODBasis": [[32, 3, 1, "", "compress"], [31, 2, 1, "", "cumulative_energy"], [33, 3, 1, "", "decompress"], [31, 2, 1, "", "entries"], [34, 3, 1, "", "fit"], [35, 3, 1, "", "from_svd"], [31, 2, 1, "", "full_state_dimension"], [31, 2, 1, "", "leftvecs"], [36, 3, 1, "", "load"], [31, 2, 1, "", "max_vectors"], [31, 2, 1, "", "name"], [37, 3, 1, "", "plot1D"], [38, 3, 1, "", "plot_cumulative_energy"], [39, 3, 1, "", "plot_energy"], [40, 3, 1, "", "plot_projection_error"], [41, 3, 1, "", "plot_residual_energy"], [42, 3, 1, "", "plot_svdval_decay"], [43, 3, 1, "", "project"], [44, 3, 1, "", "projection_error"], [31, 2, 1, "", "reduced_state_dimension"], [31, 2, 1, "", "residual_energy"], [31, 2, 1, "", "rightvecs"], [45, 3, 1, "", "save"], [46, 3, 1, "", "set_dimension"], [31, 2, 1, "", "shape"], [31, 2, 1, "", "svdsolver"], [31, 2, 1, "", "svdsolver_options"], [31, 2, 1, "", "svdvals"], [47, 3, 1, "", "verify"], [31, 2, 1, "", "weights"]], "opinf.ddt": [[53, 1, 1, "", "DerivativeEstimatorTemplate"], [58, 1, 1, "", "InterpDerivativeEstimator"], [63, 1, 1, "", "NonuniformFiniteDifferencer"], [68, 1, 1, "", "UniformFiniteDifferencer"], [73, 4, 1, "", "bwd1"], [74, 4, 1, "", "bwd2"], [75, 4, 1, "", "bwd3"], [76, 4, 1, "", "bwd4"], [77, 4, 1, "", "bwd5"], [78, 4, 1, "", "bwd6"], [79, 4, 1, "", "ctr2"], [80, 4, 1, "", "ctr4"], [81, 4, 1, "", "ctr6"], [82, 4, 1, "", "ddt"], [83, 4, 1, "", "ddt_nonuniform"], [84, 4, 1, "", "ddt_uniform"], [85, 4, 1, "", "fwd1"], [86, 4, 1, "", "fwd2"], [87, 4, 1, "", "fwd3"], [88, 4, 1, "", "fwd4"], [89, 4, 1, "", "fwd5"], [90, 4, 1, "", "fwd6"], [91, 4, 1, "", "ord2"], [92, 4, 1, "", "ord4"], [93, 4, 1, "", "ord6"]], "opinf.ddt.DerivativeEstimatorTemplate": [[54, 3, 1, "", "estimate"], [55, 3, 1, "", "mask"], [53, 2, 1, "", "time_domain"], [56, 3, 1, "", "verify"], [57, 3, 1, "", "verify_shapes"]], "opinf.ddt.InterpDerivativeEstimator": [[58, 2, 1, "", "InterpolatorClass"], [59, 3, 1, "", "estimate"], [60, 3, 1, "", "mask"], [58, 2, 1, "", "new_time_domain"], [58, 2, 1, "", "options"], [58, 2, 1, "", "time_domain"], [61, 3, 1, "", "verify"], [62, 3, 1, "", "verify_shapes"]], "opinf.ddt.NonuniformFiniteDifferencer": [[64, 3, 1, "", "estimate"], [65, 3, 1, "", "mask"], [63, 2, 1, "", "time_domain"], [66, 3, 1, "", "verify"], [67, 3, 1, "", "verify_shapes"]], "opinf.ddt.UniformFiniteDifferencer": [[68, 2, 1, "", "dt"], [69, 3, 1, "", "estimate"], [70, 3, 1, "", "mask"], [68, 2, 1, "", "scheme"], [68, 2, 1, "", "time_domain"], [71, 3, 1, "", "verify"], [72, 3, 1, "", "verify_shapes"]], "opinf.lift": [[94, 1, 1, "", "LifterTemplate"], [99, 1, 1, "", "PolynomialLifter"], [104, 1, 1, "", "QuadraticLifter"]], "opinf.lift.LifterTemplate": [[95, 3, 1, "", "lift"], [96, 3, 1, "", "lift_ddts"], [97, 3, 1, "", "unlift"], [98, 3, 1, "", "verify"]], "opinf.lift.PolynomialLifter": [[100, 3, 1, "", "lift"], [101, 3, 1, "", "lift_ddts"], [99, 2, 1, "", "num_variables"], [99, 2, 1, "", "orders"], [102, 3, 1, "", "unlift"], [103, 3, 1, "", "verify"]], "opinf.lift.QuadraticLifter": [[105, 3, 1, "", "lift"], [106, 3, 1, "", "lift_ddts"], [107, 3, 1, "", "unlift"], [108, 3, 1, "", "verify"]], "opinf.lstsq": [[109, 1, 1, "", "L2DecoupledSolver"], [122, 1, 1, "", "L2Solver"], [135, 1, 1, "", "PlainSolver"], [145, 1, 1, "", "SolverTemplate"], [155, 1, 1, "", "TikhonovDecoupledSolver"], [169, 1, 1, "", "TikhonovSolver"], [183, 1, 1, "", "TotalLeastSquaresSolver"], [193, 1, 1, "", "TruncatedSVDSolver"], [204, 4, 1, "", "lstsq_size"]], "opinf.lstsq.L2DecoupledSolver": [[110, 3, 1, "", "cond"], [111, 3, 1, "", "copy"], [109, 2, 1, "", "d"], [109, 2, 1, "", "data_matrix"], [112, 3, 1, "", "fit"], [109, 2, 1, "", "k"], [109, 2, 1, "", "lhs_matrix"], [113, 3, 1, "", "load"], [109, 2, 1, "", "options"], [114, 3, 1, "", "posterior"], [109, 2, 1, "", "r"], [115, 3, 1, "", "regcond"], [116, 3, 1, "", "regresidual"], [109, 2, 1, "", "regularizer"], [117, 3, 1, "", "reset"], [118, 3, 1, "", "residual"], [119, 3, 1, "", "save"], [120, 3, 1, "", "solve"], [121, 3, 1, "", "verify"]], "opinf.lstsq.L2Solver": [[123, 3, 1, "", "cond"], [124, 3, 1, "", "copy"], [122, 2, 1, "", "d"], [122, 2, 1, "", "data_matrix"], [125, 3, 1, "", "fit"], [122, 2, 1, "", "k"], [122, 2, 1, "", "lhs_matrix"], [126, 3, 1, "", "load"], [122, 2, 1, "", "options"], [127, 3, 1, "", "posterior"], [122, 2, 1, "", "r"], [128, 3, 1, "", "regcond"], [129, 3, 1, "", "regresidual"], [122, 2, 1, "", "regularizer"], [130, 3, 1, "", "reset"], [131, 3, 1, "", "residual"], [132, 3, 1, "", "save"], [133, 3, 1, "", "solve"], [134, 3, 1, "", "verify"]], "opinf.lstsq.PlainSolver": [[136, 3, 1, "", "cond"], [137, 3, 1, "", "copy"], [135, 2, 1, "", "d"], [135, 2, 1, "", "data_matrix"], [138, 3, 1, "", "fit"], [135, 2, 1, "", "k"], [135, 2, 1, "", "lhs_matrix"], [139, 3, 1, "", "load"], [135, 2, 1, "", "options"], [135, 2, 1, "", "r"], [140, 3, 1, "", "reset"], [141, 3, 1, "", "residual"], [142, 3, 1, "", "save"], [143, 3, 1, "", "solve"], [144, 3, 1, "", "verify"]], "opinf.lstsq.SolverTemplate": [[146, 3, 1, "", "cond"], [147, 3, 1, "", "copy"], [145, 2, 1, "", "d"], [145, 2, 1, "", "data_matrix"], [148, 3, 1, "", "fit"], [145, 2, 1, "", "k"], [145, 2, 1, "", "lhs_matrix"], [149, 3, 1, "", "load"], [145, 2, 1, "", "r"], [150, 3, 1, "", "reset"], [151, 3, 1, "", "residual"], [152, 3, 1, "", "save"], [153, 3, 1, "", "solve"], [154, 3, 1, "", "verify"]], "opinf.lstsq.TikhonovDecoupledSolver": [[156, 3, 1, "", "cond"], [157, 3, 1, "", "copy"], [155, 2, 1, "", "d"], [155, 2, 1, "", "data_matrix"], [158, 3, 1, "", "fit"], [159, 3, 1, "", "get_operator_regularizer"], [155, 2, 1, "", "k"], [155, 2, 1, "", "lhs_matrix"], [160, 3, 1, "", "load"], [155, 2, 1, "", "method"], [155, 2, 1, "", "options"], [161, 3, 1, "", "posterior"], [155, 2, 1, "", "r"], [162, 3, 1, "", "regcond"], [163, 3, 1, "", "regresidual"], [155, 2, 1, "", "regularizer"], [164, 3, 1, "", "reset"], [165, 3, 1, "", "residual"], [166, 3, 1, "", "save"], [167, 3, 1, "", "solve"], [168, 3, 1, "", "verify"]], "opinf.lstsq.TikhonovSolver": [[170, 3, 1, "", "cond"], [171, 3, 1, "", "copy"], [169, 2, 1, "", "d"], [169, 2, 1, "", "data_matrix"], [172, 3, 1, "", "fit"], [173, 3, 1, "", "get_operator_regularizer"], [169, 2, 1, "", "k"], [169, 2, 1, "", "lhs_matrix"], [174, 3, 1, "", "load"], [169, 2, 1, "", "method"], [169, 2, 1, "", "options"], [175, 3, 1, "", "posterior"], [169, 2, 1, "", "r"], [176, 3, 1, "", "regcond"], [177, 3, 1, "", "regresidual"], [169, 2, 1, "", "regularizer"], [178, 3, 1, "", "reset"], [179, 3, 1, "", "residual"], [180, 3, 1, "", "save"], [181, 3, 1, "", "solve"], [182, 3, 1, "", "verify"]], "opinf.lstsq.TotalLeastSquaresSolver": [[183, 2, 1, "", "augcond"], [184, 3, 1, "", "cond"], [185, 3, 1, "", "copy"], [183, 2, 1, "", "d"], [183, 2, 1, "", "data_matrix"], [183, 2, 1, "", "error"], [186, 3, 1, "", "fit"], [183, 2, 1, "", "k"], [183, 2, 1, "", "lhs_matrix"], [187, 3, 1, "", "load"], [183, 2, 1, "", "options"], [183, 2, 1, "", "r"], [188, 3, 1, "", "reset"], [189, 3, 1, "", "residual"], [190, 3, 1, "", "save"], [191, 3, 1, "", "solve"], [192, 3, 1, "", "verify"]], "opinf.lstsq.TruncatedSVDSolver": [[194, 3, 1, "", "cond"], [195, 3, 1, "", "copy"], [193, 2, 1, "", "d"], [193, 2, 1, "", "data_matrix"], [196, 3, 1, "", "fit"], [193, 2, 1, "", "k"], [193, 2, 1, "", "lhs_matrix"], [197, 3, 1, "", "load"], [193, 2, 1, "", "max_modes"], [193, 2, 1, "", "num_svdmodes"], [193, 2, 1, "", "options"], [193, 2, 1, "", "r"], [198, 3, 1, "", "reset"], [199, 3, 1, "", "residual"], [200, 3, 1, "", "save"], [201, 3, 1, "", "solve"], [202, 3, 1, "", "tcond"], [203, 3, 1, "", "verify"]], "opinf.models": [[205, 1, 1, "", "ContinuousModel"], [215, 1, 1, "", "DiscreteModel"], [226, 1, 1, "", "InterpContinuousModel"], [238, 1, 1, "", "InterpDiscreteModel"], [250, 1, 1, "", "ParametricContinuousModel"], [259, 1, 1, "", "ParametricDiscreteModel"]], "opinf.models.ContinuousModel": [[205, 2, 1, "", "A_"], [205, 2, 1, "", "B_"], [205, 2, 1, "", "G_"], [205, 2, 1, "", "H_"], [205, 2, 1, "", "N_"], [205, 2, 1, "", "c_"], [206, 3, 1, "", "copy"], [207, 3, 1, "", "fit"], [208, 3, 1, "", "galerkin"], [205, 2, 1, "", "input_dimension"], [209, 3, 1, "", "jacobian"], [210, 3, 1, "", "load"], [205, 2, 1, "", "operator_matrix"], [205, 2, 1, "", "operators"], [211, 3, 1, "", "predict"], [212, 3, 1, "", "refit"], [213, 3, 1, "", "rhs"], [214, 3, 1, "", "save"], [205, 2, 1, "", "solver"], [205, 2, 1, "", "state_dimension"]], "opinf.models.DiscreteModel": [[215, 2, 1, "", "A_"], [215, 2, 1, "", "B_"], [215, 2, 1, "", "G_"], [215, 2, 1, "", "H_"], [215, 2, 1, "", "N_"], [215, 2, 1, "", "c_"], [216, 3, 1, "", "copy"], [217, 3, 1, "", "fit"], [218, 3, 1, "", "galerkin"], [215, 2, 1, "", "input_dimension"], [219, 3, 1, "", "jacobian"], [220, 3, 1, "", "load"], [215, 2, 1, "", "operator_matrix"], [215, 2, 1, "", "operators"], [221, 3, 1, "", "predict"], [222, 3, 1, "", "refit"], [223, 3, 1, "", "rhs"], [224, 3, 1, "", "save"], [215, 2, 1, "", "solver"], [225, 3, 1, "", "stack_trajectories"], [215, 2, 1, "", "state_dimension"]], "opinf.models.InterpContinuousModel": [[226, 2, 1, "", "A_"], [226, 2, 1, "", "B_"], [226, 2, 1, "", "G_"], [226, 2, 1, "", "H_"], [226, 2, 1, "", "N_"], [226, 2, 1, "", "c_"], [227, 3, 1, "", "copy"], [228, 3, 1, "", "evaluate"], [229, 3, 1, "", "fit"], [230, 3, 1, "", "galerkin"], [226, 2, 1, "", "input_dimension"], [231, 3, 1, "", "jacobian"], [232, 3, 1, "", "load"], [226, 2, 1, "", "operators"], [226, 2, 1, "", "parameter_dimension"], [233, 3, 1, "", "predict"], [234, 3, 1, "", "refit"], [235, 3, 1, "", "rhs"], [236, 3, 1, "", "save"], [237, 3, 1, "", "set_interpolator"], [226, 2, 1, "", "solver"], [226, 2, 1, "", "state_dimension"]], "opinf.models.InterpDiscreteModel": [[238, 2, 1, "", "A_"], [238, 2, 1, "", "B_"], [238, 2, 1, "", "G_"], [238, 2, 1, "", "H_"], [238, 2, 1, "", "N_"], [238, 2, 1, "", "c_"], [239, 3, 1, "", "copy"], [240, 3, 1, "", "evaluate"], [241, 3, 1, "", "fit"], [242, 3, 1, "", "galerkin"], [238, 2, 1, "", "input_dimension"], [243, 3, 1, "", "jacobian"], [244, 3, 1, "", "load"], [238, 2, 1, "", "operators"], [238, 2, 1, "", "parameter_dimension"], [245, 3, 1, "", "predict"], [246, 3, 1, "", "refit"], [247, 3, 1, "", "rhs"], [248, 3, 1, "", "save"], [249, 3, 1, "", "set_interpolator"], [238, 2, 1, "", "solver"], [238, 2, 1, "", "state_dimension"]], "opinf.models.ParametricContinuousModel": [[250, 2, 1, "", "A_"], [250, 2, 1, "", "B_"], [250, 2, 1, "", "G_"], [250, 2, 1, "", "H_"], [250, 2, 1, "", "N_"], [250, 2, 1, "", "c_"], [251, 3, 1, "", "copy"], [252, 3, 1, "", "evaluate"], [253, 3, 1, "", "fit"], [254, 3, 1, "", "galerkin"], [250, 2, 1, "", "input_dimension"], [255, 3, 1, "", "jacobian"], [250, 2, 1, "", "operators"], [250, 2, 1, "", "parameter_dimension"], [256, 3, 1, "", "predict"], [257, 3, 1, "", "refit"], [258, 3, 1, "", "rhs"], [250, 2, 1, "", "solver"], [250, 2, 1, "", "state_dimension"]], "opinf.models.ParametricDiscreteModel": [[259, 2, 1, "", "A_"], [259, 2, 1, "", "B_"], [259, 2, 1, "", "G_"], [259, 2, 1, "", "H_"], [259, 2, 1, "", "N_"], [259, 2, 1, "", "c_"], [260, 3, 1, "", "copy"], [261, 3, 1, "", "evaluate"], [262, 3, 1, "", "fit"], [263, 3, 1, "", "galerkin"], [259, 2, 1, "", "input_dimension"], [264, 3, 1, "", "jacobian"], [259, 2, 1, "", "operators"], [259, 2, 1, "", "parameter_dimension"], [265, 3, 1, "", "predict"], [266, 3, 1, "", "refit"], [267, 3, 1, "", "rhs"], [259, 2, 1, "", "solver"], [259, 2, 1, "", "state_dimension"]], "opinf.operators": [[268, 1, 1, "", "AffineConstantOperator"], [281, 1, 1, "", "AffineCubicOperator"], [294, 1, 1, "", "AffineInputOperator"], [307, 1, 1, "", "AffineLinearOperator"], [320, 1, 1, "", "AffineQuadraticOperator"], [333, 1, 1, "", "AffineStateInputOperator"], [346, 1, 1, "", "ConstantOperator"], [357, 1, 1, "", "CubicOperator"], [372, 1, 1, "", "InputMixin"], [373, 1, 1, "", "InputOperator"], [384, 1, 1, "", "InterpConstantOperator"], [398, 1, 1, "", "InterpCubicOperator"], [412, 1, 1, "", "InterpInputOperator"], [426, 1, 1, "", "InterpLinearOperator"], [440, 1, 1, "", "InterpQuadraticOperator"], [454, 1, 1, "", "InterpStateInputOperator"], [468, 1, 1, "", "LinearOperator"], [479, 1, 1, "", "OpInfOperator"], [490, 1, 1, "", "OperatorTemplate"], [498, 1, 1, "", "ParametricOpInfOperator"], [510, 1, 1, "", "ParametricOperatorTemplate"], [519, 1, 1, "", "QuadraticOperator"], [534, 1, 1, "", "StateInputOperator"]], "opinf.operators.AffineConstantOperator": [[269, 3, 1, "", "apply"], [270, 3, 1, "", "coeffs"], [271, 3, 1, "", "copy"], [272, 3, 1, "", "datablock"], [268, 2, 1, "", "entries"], [273, 3, 1, "", "evaluate"], [274, 3, 1, "", "galerkin"], [275, 3, 1, "", "jacobian"], [276, 3, 1, "", "load"], [268, 2, 1, "", "nterms"], [277, 3, 1, "", "operator_dimension"], [268, 2, 1, "", "parameter_dimension"], [278, 3, 1, "", "save"], [279, 3, 1, "", "set_entries"], [268, 2, 1, "", "shape"], [268, 2, 1, "", "state_dimension"], [280, 3, 1, "", "verify"]], "opinf.operators.AffineCubicOperator": [[282, 3, 1, "", "apply"], [283, 3, 1, "", "coeffs"], [284, 3, 1, "", "copy"], [285, 3, 1, "", "datablock"], [281, 2, 1, "", "entries"], [286, 3, 1, "", "evaluate"], [287, 3, 1, "", "galerkin"], [288, 3, 1, "", "jacobian"], [289, 3, 1, "", "load"], [281, 2, 1, "", "nterms"], [290, 3, 1, "", "operator_dimension"], [281, 2, 1, "", "parameter_dimension"], [291, 3, 1, "", "save"], [292, 3, 1, "", "set_entries"], [281, 2, 1, "", "shape"], [281, 2, 1, "", "state_dimension"], [293, 3, 1, "", "verify"]], "opinf.operators.AffineInputOperator": [[295, 3, 1, "", "apply"], [296, 3, 1, "", "coeffs"], [297, 3, 1, "", "copy"], [298, 3, 1, "", "datablock"], [294, 2, 1, "", "entries"], [299, 3, 1, "", "evaluate"], [300, 3, 1, "", "galerkin"], [294, 2, 1, "", "input_dimension"], [301, 3, 1, "", "jacobian"], [302, 3, 1, "", "load"], [294, 2, 1, "", "nterms"], [303, 3, 1, "", "operator_dimension"], [294, 2, 1, "", "parameter_dimension"], [304, 3, 1, "", "save"], [305, 3, 1, "", "set_entries"], [294, 2, 1, "", "shape"], [294, 2, 1, "", "state_dimension"], [306, 3, 1, "", "verify"]], "opinf.operators.AffineLinearOperator": [[308, 3, 1, "", "apply"], [309, 3, 1, "", "coeffs"], [310, 3, 1, "", "copy"], [311, 3, 1, "", "datablock"], [307, 2, 1, "", "entries"], [312, 3, 1, "", "evaluate"], [313, 3, 1, "", "galerkin"], [314, 3, 1, "", "jacobian"], [315, 3, 1, "", "load"], [307, 2, 1, "", "nterms"], [316, 3, 1, "", "operator_dimension"], [307, 2, 1, "", "parameter_dimension"], [317, 3, 1, "", "save"], [318, 3, 1, "", "set_entries"], [307, 2, 1, "", "shape"], [307, 2, 1, "", "state_dimension"], [319, 3, 1, "", "verify"]], "opinf.operators.AffineQuadraticOperator": [[321, 3, 1, "", "apply"], [322, 3, 1, "", "coeffs"], [323, 3, 1, "", "copy"], [324, 3, 1, "", "datablock"], [320, 2, 1, "", "entries"], [325, 3, 1, "", "evaluate"], [326, 3, 1, "", "galerkin"], [327, 3, 1, "", "jacobian"], [328, 3, 1, "", "load"], [320, 2, 1, "", "nterms"], [329, 3, 1, "", "operator_dimension"], [320, 2, 1, "", "parameter_dimension"], [330, 3, 1, "", "save"], [331, 3, 1, "", "set_entries"], [320, 2, 1, "", "shape"], [320, 2, 1, "", "state_dimension"], [332, 3, 1, "", "verify"]], "opinf.operators.AffineStateInputOperator": [[334, 3, 1, "", "apply"], [335, 3, 1, "", "coeffs"], [336, 3, 1, "", "copy"], [337, 3, 1, "", "datablock"], [333, 2, 1, "", "entries"], [338, 3, 1, "", "evaluate"], [339, 3, 1, "", "galerkin"], [333, 2, 1, "", "input_dimension"], [340, 3, 1, "", "jacobian"], [341, 3, 1, "", "load"], [333, 2, 1, "", "nterms"], [342, 3, 1, "", "operator_dimension"], [333, 2, 1, "", "parameter_dimension"], [343, 3, 1, "", "save"], [344, 3, 1, "", "set_entries"], [333, 2, 1, "", "shape"], [333, 2, 1, "", "state_dimension"], [345, 3, 1, "", "verify"]], "opinf.operators.ConstantOperator": [[347, 3, 1, "", "apply"], [348, 3, 1, "", "copy"], [349, 3, 1, "", "datablock"], [346, 2, 1, "", "entries"], [350, 3, 1, "", "galerkin"], [351, 3, 1, "", "jacobian"], [352, 3, 1, "", "load"], [353, 3, 1, "", "operator_dimension"], [354, 3, 1, "", "save"], [355, 3, 1, "", "set_entries"], [346, 2, 1, "", "shape"], [346, 2, 1, "", "state_dimension"], [356, 3, 1, "", "verify"]], "opinf.operators.CubicOperator": [[358, 3, 1, "", "apply"], [359, 3, 1, "", "ckron"], [360, 3, 1, "", "ckron_indices"], [361, 3, 1, "", "compress_entries"], [362, 3, 1, "", "copy"], [363, 3, 1, "", "datablock"], [357, 2, 1, "", "entries"], [364, 3, 1, "", "expand_entries"], [365, 3, 1, "", "galerkin"], [366, 3, 1, "", "jacobian"], [367, 3, 1, "", "load"], [368, 3, 1, "", "operator_dimension"], [369, 3, 1, "", "save"], [370, 3, 1, "", "set_entries"], [357, 2, 1, "", "shape"], [357, 2, 1, "", "state_dimension"], [371, 3, 1, "", "verify"]], "opinf.operators.InputMixin": [[372, 2, 1, "", "input_dimension"]], "opinf.operators.InputOperator": [[374, 3, 1, "", "apply"], [375, 3, 1, "", "copy"], [376, 3, 1, "", "datablock"], [373, 2, 1, "", "entries"], [377, 3, 1, "", "galerkin"], [373, 2, 1, "", "input_dimension"], [378, 3, 1, "", "jacobian"], [379, 3, 1, "", "load"], [380, 3, 1, "", "operator_dimension"], [381, 3, 1, "", "save"], [382, 3, 1, "", "set_entries"], [373, 2, 1, "", "shape"], [373, 2, 1, "", "state_dimension"], [383, 3, 1, "", "verify"]], "opinf.operators.InterpConstantOperator": [[385, 3, 1, "", "apply"], [386, 3, 1, "", "copy"], [387, 3, 1, "", "datablock"], [384, 2, 1, "", "entries"], [388, 3, 1, "", "evaluate"], [389, 3, 1, "", "galerkin"], [384, 2, 1, "", "interpolator"], [390, 3, 1, "", "jacobian"], [391, 3, 1, "", "load"], [392, 3, 1, "", "operator_dimension"], [384, 2, 1, "", "parameter_dimension"], [393, 3, 1, "", "save"], [394, 3, 1, "", "set_entries"], [395, 3, 1, "", "set_interpolator"], [396, 3, 1, "", "set_training_parameters"], [384, 2, 1, "", "shape"], [384, 2, 1, "", "state_dimension"], [384, 2, 1, "", "training_parameters"], [397, 3, 1, "", "verify"]], "opinf.operators.InterpCubicOperator": [[399, 3, 1, "", "apply"], [400, 3, 1, "", "copy"], [401, 3, 1, "", "datablock"], [398, 2, 1, "", "entries"], [402, 3, 1, "", "evaluate"], [403, 3, 1, "", "galerkin"], [398, 2, 1, "", "interpolator"], [404, 3, 1, "", "jacobian"], [405, 3, 1, "", "load"], [406, 3, 1, "", "operator_dimension"], [398, 2, 1, "", "parameter_dimension"], [407, 3, 1, "", "save"], [408, 3, 1, "", "set_entries"], [409, 3, 1, "", "set_interpolator"], [410, 3, 1, "", "set_training_parameters"], [398, 2, 1, "", "shape"], [398, 2, 1, "", "state_dimension"], [398, 2, 1, "", "training_parameters"], [411, 3, 1, "", "verify"]], "opinf.operators.InterpInputOperator": [[413, 3, 1, "", "apply"], [414, 3, 1, "", "copy"], [415, 3, 1, "", "datablock"], [412, 2, 1, "", "entries"], [416, 3, 1, "", "evaluate"], [417, 3, 1, "", "galerkin"], [412, 2, 1, "", "input_dimension"], [412, 2, 1, "", "interpolator"], [418, 3, 1, "", "jacobian"], [419, 3, 1, "", "load"], [420, 3, 1, "", "operator_dimension"], [412, 2, 1, "", "parameter_dimension"], [421, 3, 1, "", "save"], [422, 3, 1, "", "set_entries"], [423, 3, 1, "", "set_interpolator"], [424, 3, 1, "", "set_training_parameters"], [412, 2, 1, "", "shape"], [412, 2, 1, "", "state_dimension"], [412, 2, 1, "", "training_parameters"], [425, 3, 1, "", "verify"]], "opinf.operators.InterpLinearOperator": [[427, 3, 1, "", "apply"], [428, 3, 1, "", "copy"], [429, 3, 1, "", "datablock"], [426, 2, 1, "", "entries"], [430, 3, 1, "", "evaluate"], [431, 3, 1, "", "galerkin"], [426, 2, 1, "", "interpolator"], [432, 3, 1, "", "jacobian"], [433, 3, 1, "", "load"], [434, 3, 1, "", "operator_dimension"], [426, 2, 1, "", "parameter_dimension"], [435, 3, 1, "", "save"], [436, 3, 1, "", "set_entries"], [437, 3, 1, "", "set_interpolator"], [438, 3, 1, "", "set_training_parameters"], [426, 2, 1, "", "shape"], [426, 2, 1, "", "state_dimension"], [426, 2, 1, "", "training_parameters"], [439, 3, 1, "", "verify"]], "opinf.operators.InterpQuadraticOperator": [[441, 3, 1, "", "apply"], [442, 3, 1, "", "copy"], [443, 3, 1, "", "datablock"], [440, 2, 1, "", "entries"], [444, 3, 1, "", "evaluate"], [445, 3, 1, "", "galerkin"], [440, 2, 1, "", "interpolator"], [446, 3, 1, "", "jacobian"], [447, 3, 1, "", "load"], [448, 3, 1, "", "operator_dimension"], [440, 2, 1, "", "parameter_dimension"], [449, 3, 1, "", "save"], [450, 3, 1, "", "set_entries"], [451, 3, 1, "", "set_interpolator"], [452, 3, 1, "", "set_training_parameters"], [440, 2, 1, "", "shape"], [440, 2, 1, "", "state_dimension"], [440, 2, 1, "", "training_parameters"], [453, 3, 1, "", "verify"]], "opinf.operators.InterpStateInputOperator": [[455, 3, 1, "", "apply"], [456, 3, 1, "", "copy"], [457, 3, 1, "", "datablock"], [454, 2, 1, "", "entries"], [458, 3, 1, "", "evaluate"], [459, 3, 1, "", "galerkin"], [454, 2, 1, "", "input_dimension"], [454, 2, 1, "", "interpolator"], [460, 3, 1, "", "jacobian"], [461, 3, 1, "", "load"], [462, 3, 1, "", "operator_dimension"], [454, 2, 1, "", "parameter_dimension"], [463, 3, 1, "", "save"], [464, 3, 1, "", "set_entries"], [465, 3, 1, "", "set_interpolator"], [466, 3, 1, "", "set_training_parameters"], [454, 2, 1, "", "shape"], [454, 2, 1, "", "state_dimension"], [454, 2, 1, "", "training_parameters"], [467, 3, 1, "", "verify"]], "opinf.operators.LinearOperator": [[469, 3, 1, "", "apply"], [470, 3, 1, "", "copy"], [471, 3, 1, "", "datablock"], [468, 2, 1, "", "entries"], [472, 3, 1, "", "galerkin"], [473, 3, 1, "", "jacobian"], [474, 3, 1, "", "load"], [475, 3, 1, "", "operator_dimension"], [476, 3, 1, "", "save"], [477, 3, 1, "", "set_entries"], [468, 2, 1, "", "shape"], [468, 2, 1, "", "state_dimension"], [478, 3, 1, "", "verify"]], "opinf.operators.OpInfOperator": [[480, 3, 1, "", "apply"], [481, 3, 1, "", "copy"], [482, 3, 1, "", "datablock"], [479, 2, 1, "", "entries"], [483, 3, 1, "", "galerkin"], [484, 3, 1, "", "jacobian"], [485, 3, 1, "", "load"], [486, 3, 1, "", "operator_dimension"], [487, 3, 1, "", "save"], [488, 3, 1, "", "set_entries"], [479, 2, 1, "", "shape"], [479, 2, 1, "", "state_dimension"], [489, 3, 1, "", "verify"]], "opinf.operators.OperatorTemplate": [[491, 3, 1, "", "apply"], [492, 3, 1, "", "copy"], [493, 3, 1, "", "galerkin"], [494, 3, 1, "", "jacobian"], [495, 3, 1, "", "load"], [496, 3, 1, "", "save"], [490, 2, 1, "", "state_dimension"], [497, 3, 1, "", "verify"]], "opinf.operators.ParametricOpInfOperator": [[499, 3, 1, "", "apply"], [500, 3, 1, "", "copy"], [501, 3, 1, "", "datablock"], [498, 2, 1, "", "entries"], [502, 3, 1, "", "evaluate"], [503, 3, 1, "", "galerkin"], [504, 3, 1, "", "jacobian"], [505, 3, 1, "", "load"], [506, 3, 1, "", "operator_dimension"], [498, 2, 1, "", "parameter_dimension"], [507, 3, 1, "", "save"], [508, 3, 1, "", "set_entries"], [498, 2, 1, "", "shape"], [498, 2, 1, "", "state_dimension"], [509, 3, 1, "", "verify"]], "opinf.operators.ParametricOperatorTemplate": [[511, 3, 1, "", "apply"], [512, 3, 1, "", "copy"], [513, 3, 1, "", "evaluate"], [514, 3, 1, "", "galerkin"], [515, 3, 1, "", "jacobian"], [516, 3, 1, "", "load"], [510, 2, 1, "", "parameter_dimension"], [517, 3, 1, "", "save"], [510, 2, 1, "", "state_dimension"], [518, 3, 1, "", "verify"]], "opinf.operators.QuadraticOperator": [[520, 3, 1, "", "apply"], [521, 3, 1, "", "ckron"], [522, 3, 1, "", "ckron_indices"], [523, 3, 1, "", "compress_entries"], [524, 3, 1, "", "copy"], [525, 3, 1, "", "datablock"], [519, 2, 1, "", "entries"], [526, 3, 1, "", "expand_entries"], [527, 3, 1, "", "galerkin"], [528, 3, 1, "", "jacobian"], [529, 3, 1, "", "load"], [530, 3, 1, "", "operator_dimension"], [531, 3, 1, "", "save"], [532, 3, 1, "", "set_entries"], [519, 2, 1, "", "shape"], [519, 2, 1, "", "state_dimension"], [533, 3, 1, "", "verify"]], "opinf.operators.StateInputOperator": [[535, 3, 1, "", "apply"], [536, 3, 1, "", "copy"], [537, 3, 1, "", "datablock"], [534, 2, 1, "", "entries"], [538, 3, 1, "", "galerkin"], [534, 2, 1, "", "input_dimension"], [539, 3, 1, "", "jacobian"], [540, 3, 1, "", "load"], [541, 3, 1, "", "operator_dimension"], [542, 3, 1, "", "save"], [543, 3, 1, "", "set_entries"], [534, 2, 1, "", "shape"], [534, 2, 1, "", "state_dimension"], [544, 3, 1, "", "verify"]], "opinf.post": [[0, 4, 1, "", "Lp_error"], [545, 4, 1, "", "frobenius_error"], [546, 4, 1, "", "lp_error"], [547, 4, 1, "", "projection_error"]], "opinf.pre": [[548, 1, 1, "", "NullTransformer"], [557, 1, 1, "", "ScaleTransformer"], [566, 1, 1, "", "ShiftScaleTransformer"], [575, 1, 1, "", "ShiftTransformer"], [584, 1, 1, "", "TransformerMulti"], [595, 1, 1, "", "TransformerPipeline"], [604, 1, 1, "", "TransformerTemplate"], [613, 4, 1, "", "scale"], [614, 4, 1, "", "shift"]], "opinf.pre.NullTransformer": [[549, 3, 1, "", "fit"], [550, 3, 1, "", "fit_transform"], [551, 3, 1, "", "inverse_transform"], [552, 3, 1, "", "load"], [548, 2, 1, "", "name"], [553, 3, 1, "", "save"], [548, 2, 1, "", "state_dimension"], [554, 3, 1, "", "transform"], [555, 3, 1, "", "transform_ddts"], [556, 3, 1, "", "verify"]], "opinf.pre.ScaleTransformer": [[557, 2, 1, "", "byrow"], [558, 3, 1, "", "fit"], [559, 3, 1, "", "fit_transform"], [560, 3, 1, "", "inverse_transform"], [561, 3, 1, "", "load"], [557, 2, 1, "", "name"], [562, 3, 1, "", "save"], [557, 2, 1, "", "scaler"], [557, 2, 1, "", "state_dimension"], [563, 3, 1, "", "transform"], [564, 3, 1, "", "transform_ddts"], [565, 3, 1, "", "verify"]], "opinf.pre.ShiftScaleTransformer": [[566, 2, 1, "", "byrow"], [566, 2, 1, "", "centering"], [567, 3, 1, "", "fit"], [568, 3, 1, "", "fit_transform"], [569, 3, 1, "", "inverse_transform"], [570, 3, 1, "", "load"], [566, 2, 1, "", "mean_"], [566, 2, 1, "", "name"], [571, 3, 1, "", "save"], [566, 2, 1, "", "scale_"], [566, 2, 1, "", "scaling"], [566, 2, 1, "", "shift_"], [566, 2, 1, "", "state_dimension"], [572, 3, 1, "", "transform"], [573, 3, 1, "", "transform_ddts"], [566, 2, 1, "", "verbose"], [574, 3, 1, "", "verify"]], "opinf.pre.ShiftTransformer": [[576, 3, 1, "", "fit"], [577, 3, 1, "", "fit_transform"], [578, 3, 1, "", "inverse_transform"], [579, 3, 1, "", "load"], [575, 2, 1, "", "name"], [575, 2, 1, "", "reference"], [580, 3, 1, "", "save"], [575, 2, 1, "", "state_dimension"], [581, 3, 1, "", "transform"], [582, 3, 1, "", "transform_ddts"], [583, 3, 1, "", "verify"]], "opinf.pre.TransformerMulti": [[585, 3, 1, "", "fit"], [586, 3, 1, "", "fit_transform"], [587, 3, 1, "", "get_var"], [588, 3, 1, "", "inverse_transform"], [589, 3, 1, "", "load"], [584, 2, 1, "", "num_variables"], [590, 3, 1, "", "save"], [591, 3, 1, "", "split"], [584, 2, 1, "", "state_dimension"], [592, 3, 1, "", "transform"], [593, 3, 1, "", "transform_ddts"], [584, 2, 1, "", "transformers"], [584, 2, 1, "", "variable_names"], [584, 2, 1, "", "variable_sizes"], [594, 3, 1, "", "verify"]], "opinf.pre.TransformerPipeline": [[596, 3, 1, "", "fit"], [597, 3, 1, "", "fit_transform"], [598, 3, 1, "", "inverse_transform"], [599, 3, 1, "", "load"], [595, 2, 1, "", "name"], [595, 2, 1, "", "num_transformers"], [600, 3, 1, "", "save"], [595, 2, 1, "", "state_dimension"], [601, 3, 1, "", "transform"], [602, 3, 1, "", "transform_ddts"], [595, 2, 1, "", "transformers"], [603, 3, 1, "", "verify"]], "opinf.pre.TransformerTemplate": [[605, 3, 1, "", "fit"], [606, 3, 1, "", "fit_transform"], [607, 3, 1, "", "inverse_transform"], [608, 3, 1, "", "load"], [604, 2, 1, "", "name"], [609, 3, 1, "", "save"], [604, 2, 1, "", "state_dimension"], [610, 3, 1, "", "transform"], [611, 3, 1, "", "transform_ddts"], [612, 3, 1, "", "verify"]], "opinf.roms": [[615, 1, 1, "", "BayesianROM"], [624, 1, 1, "", "OperatorPosterior"], [628, 1, 1, "", "ParametricROM"], [636, 1, 1, "", "ROM"]], "opinf.roms.BayesianROM": [[615, 2, 1, "", "basis"], [615, 2, 1, "", "ddt_estimator"], [616, 3, 1, "", "decode"], [617, 3, 1, "", "draw_operators"], [618, 3, 1, "", "encode"], [619, 3, 1, "", "fit"], [620, 3, 1, "", "fit_regselect_continuous"], [621, 3, 1, "", "fit_regselect_discrete"], [615, 2, 1, "", "lifter"], [615, 2, 1, "", "model"], [615, 2, 1, "", "posterior"], [622, 3, 1, "", "predict"], [623, 3, 1, "", "project"], [615, 2, 1, "", "transformer"]], "opinf.roms.OperatorPosterior": [[624, 2, 1, "", "covs"], [625, 3, 1, "", "load"], [624, 2, 1, "", "means"], [624, 2, 1, "", "nrows"], [624, 2, 1, "", "randomvariables"], [626, 3, 1, "", "rvs"], [627, 3, 1, "", "save"]], "opinf.roms.ParametricROM": [[628, 2, 1, "", "basis"], [628, 2, 1, "", "ddt_estimator"], [629, 3, 1, "", "decode"], [630, 3, 1, "", "encode"], [631, 3, 1, "", "fit"], [632, 3, 1, "", "fit_regselect_continuous"], [633, 3, 1, "", "fit_regselect_discrete"], [628, 2, 1, "", "lifter"], [628, 2, 1, "", "model"], [634, 3, 1, "", "predict"], [635, 3, 1, "", "project"], [628, 2, 1, "", "transformer"]], "opinf.roms.ROM": [[636, 2, 1, "", "basis"], [636, 2, 1, "", "ddt_estimator"], [637, 3, 1, "", "decode"], [638, 3, 1, "", "encode"], [639, 3, 1, "", "fit"], [640, 3, 1, "", "fit_regselect_continuous"], [641, 3, 1, "", "fit_regselect_discrete"], [636, 2, 1, "", "lifter"], [636, 2, 1, "", "model"], [642, 3, 1, "", "predict"], [643, 3, 1, "", "project"], [636, 2, 1, "", "transformer"]], "opinf.utils": [[644, 1, 1, "", "ContinuousRegTest"], [648, 1, 1, "", "DiscreteRegTest"], [652, 1, 1, "", "TimedBlock"], [654, 4, 1, "", "gridsearch"], [655, 1, 1, "", "hdf5_loadhandle"], [656, 1, 1, "", "hdf5_savehandle"], [657, 4, 1, "", "mpl_config"], [658, 4, 1, "", "requires"], [659, 4, 1, "", "requires2"], [660, 4, 1, "", "str2repr"]], "opinf.utils.ContinuousRegTest": [[644, 2, 1, "", "bound"], [645, 3, 1, "", "copy"], [646, 3, 1, "", "evaluate"], [644, 2, 1, "", "initial_conditions"], [644, 2, 1, "", "input_function"], [644, 2, 1, "", "parameters"], [644, 2, 1, "", "predict_args"], [644, 2, 1, "", "time_domain"], [647, 3, 1, "", "unstable"]], "opinf.utils.DiscreteRegTest": [[648, 2, 1, "", "bound"], [649, 3, 1, "", "copy"], [650, 3, 1, "", "evaluate"], [648, 2, 1, "", "initial_conditions"], [648, 2, 1, "", "inputs"], [648, 2, 1, "", "niters"], [648, 2, 1, "", "parameters"], [648, 2, 1, "", "predict_args"], [651, 3, 1, "", "unstable"]], "opinf.utils.TimedBlock": [[653, 3, 1, "", "add_logfile"], [652, 2, 1, "", "elapsed"], [652, 2, 1, "", "formatter"], [652, 2, 1, "", "rebuffer"], [652, 2, 1, "", "timelimit"], [652, 2, 1, "", "verbose"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "terms": {"": [31, 38, 40, 41, 42, 48, 51, 52, 225, 229, 241, 253, 262, 272, 277, 279, 285, 290, 292, 298, 303, 305, 311, 316, 318, 324, 329, 331, 337, 342, 344, 384, 387, 389, 392, 394, 396, 398, 401, 403, 406, 408, 410, 412, 415, 417, 420, 422, 424, 426, 429, 431, 434, 436, 438, 440, 443, 445, 448, 450, 452, 454, 457, 459, 462, 464, 466, 501, 506, 508, 619, 620, 621, 631, 632, 633, 639, 640, 641, 652, 664, 667, 668, 670, 675, 677, 682, 683, 684, 685, 686], "0": [0, 1, 2, 3, 4, 7, 8, 26, 37, 48, 49, 53, 58, 98, 99, 103, 108, 109, 116, 122, 155, 159, 169, 173, 204, 205, 207, 215, 217, 221, 229, 241, 245, 253, 262, 265, 268, 270, 272, 274, 281, 283, 285, 287, 294, 296, 298, 300, 307, 309, 311, 313, 320, 322, 324, 326, 333, 335, 337, 339, 372, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 482, 501, 526, 556, 557, 565, 566, 574, 583, 584, 586, 594, 595, 603, 612, 613, 620, 621, 624, 632, 633, 640, 641, 652, 661, 662, 663, 664, 668, 670, 676, 677, 680, 681, 683, 684, 685, 686], "00": [652, 661, 662, 664, 670, 683, 684], "000000": [661, 686], "0000e": [662, 664, 670, 683, 684], "0001": [98, 103, 108, 556, 565, 574, 583, 594, 603, 612], "00014497026045815815": 661, "000300": 684, "0005": 661, "0008": 661, "0009460414867114216": 683, "0009765625": [683, 685, 686], "000e": [661, 670], "001000": 685, "0010041784142419336": 683, "0010415917388935452": 683, "001150": 652, "0011612864429072318": 683, "0020": 661, "0021": [], "0021552166097928405": 661, "002232": 652, "0025": [683, 686], "002500": [683, 686], "0027": 683, "00283251": 664, "00283252": 664, "002866268157959": 652, "0040": [], "004272": 683, "0045": [], "0047092724970665": 683, "0054": 683, "0061e": 668, "0063": 661, "0066": [], "0082": 661, "0084": 661, "0084e": 683, "0085": 661, "00e": [668, 670], "01": [661, 662, 668, 670, 683, 684, 685, 686], "0100000000": 684, "012": 682, "0120e": 662, "01244": 682, "0132e": 661, "015": 684, "01580": 682, "01604": 682, "0167": [], "0170105": 682, "0172": 682, "017e": 670, "01833203": 664, "01833223": 664, "018e": 670, "019187": 685, "01996152": 664, "01996157": 664, "02": [661, 662, 664, 668, 670, 676, 683, 684, 685], "0206": 682, "021": 682, "02183": 682, "02249": [], "02256979": 684, "02318737": 664, "025": [678, 682], "025220": 682, "026736": 684, "0269e": 662, "0271": [], "03": [661, 662, 664, 668, 670, 676, 678, 682, 683, 684], "0303": [], "03036758": [678, 682], "0326e": 662, "0330": 682, "033122": 682, "0350": 686, "035e": 670, "03672": 682, "03674762": 664, "03990": 682, "04": [661, 662, 664, 668, 670, 676, 683, 684, 685], "0406": 683, "043e": 670, "04400": [], "04407755": 664, "04407777": 664, "048e": 670, "05": [497, 661, 662, 664, 668, 670, 676, 683, 684, 685, 686], "054e": 661, "05724": 682, "059699999999999996": 684, "05e": 670, "06": [51, 661, 662, 664, 668, 670, 682, 683, 684], "064e": 670, "07": [662, 668, 670, 684], "07010827": 664, "07010863": 664, "07417759e": 664, "0764": [], "0787e": 684, "07884152": 684, "08": [52, 661, 662, 668, 683, 684], "0826": 683, "08778494": 664, "088303": 685, "0888": [], "089150": 685, "0898": [], "09": [661, 662, 668, 684], "0952": [], "0952e": 662, "0958e": 683, "0962": [], "09994": [], "0e": 662, "1": [0, 1, 2, 3, 4, 7, 8, 21, 26, 31, 37, 38, 40, 41, 46, 48, 49, 51, 53, 57, 58, 62, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 109, 112, 114, 115, 116, 118, 125, 127, 129, 131, 138, 141, 148, 151, 155, 161, 162, 163, 165, 175, 177, 179, 186, 189, 193, 199, 207, 208, 211, 215, 217, 218, 219, 221, 223, 229, 230, 233, 238, 241, 242, 243, 245, 247, 253, 254, 256, 259, 262, 263, 264, 265, 267, 268, 270, 272, 274, 281, 283, 285, 287, 294, 296, 298, 300, 307, 309, 311, 313, 320, 322, 324, 326, 333, 335, 337, 339, 349, 350, 353, 357, 359, 360, 361, 363, 364, 365, 368, 370, 376, 377, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 471, 472, 479, 482, 483, 490, 493, 501, 503, 510, 514, 519, 521, 522, 523, 525, 526, 527, 530, 532, 537, 538, 539, 556, 557, 565, 566, 574, 575, 583, 584, 586, 595, 603, 612, 613, 614, 619, 620, 621, 624, 631, 633, 639, 640, 641, 652, 654, 661, 662, 663, 664, 667, 668, 669, 670, 673, 675, 676, 678, 681, 682, 683, 684, 685, 686], "10": [51, 78, 90, 92, 93, 346, 356, 357, 371, 373, 383, 468, 478, 489, 497, 519, 533, 534, 544, 661, 662, 664, 668, 674, 676, 678, 681, 682, 683, 684, 685, 686], "100": [93, 519, 654, 661, 663, 670, 684, 685, 686], "1000": [357, 684, 685], "100000": 684, "1001": [684, 685], "1002": 682, "1007": 682, "100e": 661, "1012": 682, "1016": [678, 682], "1017": 682, "102": 684, "1023": [683, 685, 686], "103165": 683, "10384209": 682, "105": 684, "1051": 682, "1054": [], "1054e": 662, "106": [], "1063": 682, "1064": [], "106923": 682, "1080": [678, 682], "10885857": 682, "10888": 682, "109": 684, "109619": 682, "1098": 682, "10f": [683, 684, 685, 686], "10x": 683, "11": [75, 87, 661, 662, 664, 668, 674, 676, 680, 682, 683, 684, 685], "110": 684, "110620": 682, "1109": 682, "111689": [678, 682], "1131": 683, "113433": 682, "1137": [678, 682], "114296": 682, "1146": 682, "1149": 683, "115336": [678, 682], "115717": 682, "115836": [678, 682], "116334": 682, "116865": 682, "1170": 682, "117033": 682, "1179e": 662, "118115": 682, "12": [76, 77, 80, 88, 89, 92, 662, 664, 668, 670, 674, 676, 680, 683, 684], "1200": 661, "121021": 682, "12138": [], "1221": [], "1225": 683, "122682": 682, "126": 682, "127e": 670, "12915497": 686, "129155": 686, "13": [662, 668, 683, 684], "130748": [678, 682], "130932715": 678, "1321": 683, "132401": [678, 682], "133122": 682, "13316604": 664, "13316673": 664, "134128": 682, "134572": 682, "1348e": 662, "137": [77, 89], "13817884": 664, "13819": [], "1382e": 668, "1397e": 662, "13e": 670, "14": [664, 668, 676, 684], "141e": 670, "1424e": 662, "1429e": 662, "143e": 670, "145": 682, "14536886": 664, "14557": 682, "1458e": 662, "147": [78, 90, 93], "14e": 670, "15": [49, 93, 668, 670, 683, 684], "150": 93, "1500": [], "15117966": 664, "15118067": 664, "1533": [], "1536": [], "1540": [361, 364], "15443469": 686, "1553": 682, "1573": [], "16": [76, 88, 92, 662, 664, 668, 676, 684], "160": 683, "16330038": 684, "1637e": 668, "1660e": 683, "16681005": 686, "17": [662, 664, 668, 670, 676, 683, 684], "1721": [678, 682], "1731": 683, "1749e": 662, "1760": 686, "1770e": 662, "179": 684, "18": [75, 87, 92, 668, 670, 676, 683, 684], "1802e": 684, "1803e": 684, "1804e": 684, "1805e": 684, "1807e": 684, "1810e": 684, "1811e": 662, "1814e": 684, "1815e": 662, "1822e": 684, "1833e": 684, "1836": 683, "1853e": 684, "1856e": 662, "1863237": [678, 682], "1884e": 684, "19": [668, 684], "194": [678, 682], "194e": 670, "1958e": 662, "196": [678, 682], "19645809e": 664, "1965e": 684, "1976": [], "1984e": 662, "19e": 670, "19m1292448": 682, "1d": [229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 384, 387, 396, 398, 401, 410, 412, 415, 424, 426, 429, 438, 440, 443, 452, 454, 457, 466, 547], "1e": [49, 51, 52, 497, 661, 664, 667, 670, 679, 681, 683, 684, 685, 686], "1e1": 684, "1e5": 684, "2": [0, 8, 18, 28, 31, 38, 40, 41, 44, 46, 48, 49, 51, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 102, 104, 105, 106, 107, 109, 110, 114, 115, 116, 118, 122, 123, 127, 128, 129, 131, 135, 136, 141, 146, 151, 155, 156, 159, 161, 162, 163, 165, 169, 170, 173, 175, 176, 177, 179, 183, 184, 189, 193, 194, 199, 202, 207, 211, 217, 221, 229, 233, 241, 245, 253, 256, 262, 265, 320, 357, 359, 361, 363, 364, 368, 370, 440, 519, 521, 523, 525, 526, 530, 532, 546, 566, 652, 654, 661, 662, 663, 664, 668, 669, 670, 673, 675, 676, 681, 682, 683, 684, 685, 686], "20": [360, 361, 364, 522, 523, 526, 556, 565, 574, 583, 603, 612, 620, 621, 662, 664, 668, 676, 682, 683, 684], "200": [77, 89, 661, 663, 682, 684, 685], "2015": 678, "2016": [678, 682], "2019": [678, 682], "2020": [678, 682], "2021": [678, 682], "2021010": 682, "20210206": 682, "2022": [678, 682], "202200049": 682, "2023": [678, 682], "2024": 682, "2025": 682, "202553": 683, "2091": [], "20946164": 664, "2094628": 664, "20m1364849": 682, "21": [668, 683, 684], "210": [523, 526], "2103": [], "211": [678, 682], "2133": 682, "215": [678, 682], "215443": 686, "21544347": 686, "21672": 682, "216e": 670, "21739890e": 664, "21788972e": 664, "218545": 684, "219051": 684, "219147": 684, "219539": 684, "21m1393972": [678, 682], "21m1439729": 682, "21m1452810": [678, 682], "22": [668, 684], "220": 357, "2206": 682, "222440": 684, "2229": 682, "223e": 670, "224": 682, "224762": 684, "225": [78, 90, 93], "2260e": 684, "23": [668, 682, 683, 684], "2308": [], "2313e": 661, "23441408": 664, "237283": 684, "238810": 684, "239": 682, "23m1561129": 682, "24": [93, 668, 682, 684], "2401": [], "2407": 682, "242075": 684, "243698": 684, "243e": 670, "244857": 684, "245017": 684, "246170": 684, "249": 661, "249394": 684, "24m1652490": 682, "25": [76, 88, 92, 668, 683, 684, 685, 686], "2501": 682, "2502": 682, "2504": 682, "2506": 682, "2514": [678, 682], "2524e": 661, "2571": 686, "2573": 661, "257910": 684, "259e": 670, "26": [664, 668, 685], "260357": 684, "26153": 682, "26158162": 664, "2658": [678, 682], "2672": [678, 682], "267e": 670, "2689e": 668, "27": [668, 685, 686], "2723e": 668, "2738e": 662, "274670": 661, "2757e": 662, "27825594": 686, "2789": [], "2794e": 662, "28": [661, 668, 685, 686], "2803": 682, "28057954": 664, "2821": 682, "2829e": 662, "2844e": 662, "28831642e": 664, "29": 668, "29042765332131e": 661, "29154967": 686, "29710777e": 664, "2d": [547, 684], "2e": 670, "2f": 684, "2n": [105, 106, 107], "2q": [663, 683, 685, 686], "2qq_t": [101, 106], "2r": [661, 668], "2t": 685, "2w": 663, "3": [57, 62, 67, 72, 74, 75, 76, 77, 78, 81, 86, 87, 88, 89, 90, 91, 92, 93, 99, 211, 233, 256, 281, 356, 357, 359, 361, 363, 364, 370, 371, 373, 383, 398, 478, 489, 533, 534, 544, 652, 661, 662, 663, 664, 668, 670, 674, 675, 676, 680, 682, 683, 684, 685, 686], "30": [93, 668, 682, 686], "300": [77, 89], "306": [678, 682], "3063e": 662, "306e": 670, "3080": 683, "3092": 686, "31": [668, 682, 683, 686], "313": 682, "3169e": 684, "3170e": 662, "319e": 661, "32": 676, "320": 683, "3200": 684, "323e": 670, "3264e": 664, "3270": [], "327e": 661, "329e": 670, "33": [676, 683, 685, 686], "3316": 683, "3323": 683, "332e": 670, "33317557": 664, "3389": 683, "339e": 670, "34": [682, 683], "3417e": 684, "3418e": 662, "341e": 670, "346": 670, "3471e": 664, "3497e": 662, "35": 93, "350e": 670, "35248487": 664, "355e": 670, "359381": 686, "35938137": 686, "36": [76, 88, 92, 668, 683, 684], "360": [78, 90, 93], "3624": 683, "3633": 682, "3670e": 662, "3701e": 662, "3707": [678, 682], "3718e": 684, "372": 682, "376": 682, "378e": 670, "38": [668, 670, 676], "380": 682, "3808551": 664, "380e": 670, "385x": [], "3880": 686, "388e": 670, "389": 682, "38e": 670, "39": 684, "394": 662, "39480571": 664, "39714933": 664, "398": 662, "399": 662, "3n_x": 684, "3nx": 684, "4": [74, 76, 77, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 93, 99, 211, 233, 256, 356, 357, 370, 371, 383, 478, 489, 497, 533, 544, 661, 662, 663, 664, 668, 670, 677, 678, 681, 682, 683, 684, 685, 686], "40": [668, 670, 683, 684], "400": [78, 90, 93, 523, 526, 661, 662, 683, 684], "401": [683, 686], "402": [678, 682], "403": 682, "404": [678, 682], "406": [678, 682], "407": 683, "4071": 682, "40777899e": 664, "40780786e": 664, "4086": 682, "409e": 661, "41": 676, "4111e": 662, "4129": 683, "414": 682, "416": 682, "417": 683, "4189": [], "419e": 670, "42": [668, 676, 682], "420e": 661, "4221e": 661, "4228e": 662, "423": 682, "427": 682, "43": 676, "431": 682, "432e": 670, "433e": 670, "43880908e": 664, "43e": 670, "44": [676, 678, 682], "4430e": 664, "444": 682, "445": 682, "4461e": 662, "45": [81, 93, 676, 678, 682, 684], "450": [78, 90, 93], "456e": 661, "46": 676, "4617e": 662, "461e": 670, "462": 682, "46415888": 686, "4667e": 662, "46807706e": 664, "47": 683, "470e": 670, "473": [678, 682], "4745e": 662, "4748e": 662, "475": 682, "48": [76, 88, 92], "4815": 670, "483": 678, "48550": 682, "487e": 670, "4929": [], "4940e": 668, "4960": 682, "4965": 682, "4998": 682, "4e": [684, 685], "4f": 683, "5": [57, 62, 67, 72, 77, 78, 89, 90, 92, 93, 99, 211, 233, 256, 620, 621, 632, 633, 640, 641, 661, 662, 663, 664, 668, 670, 677, 680, 682, 683, 684, 686], "50": [93, 676, 683], "500": [661, 684], "5000e": 683, "501": 684, "50172": 682, "503e": 670, "5057e": 668, "5063e": 662, "5069e": 662, "50x": 683, "51": [664, 678, 682, 683], "510e": 670, "511e": [661, 670], "5132": 683, "513e": 670, "516355": 684, "516438": 684, "517873": 684, "51874324": 664, "5194e": 662, "519658": 684, "52": [668, 676, 683], "5209": 683, "521": 682, "5211e": 662, "523": 670, "5230": [], "5254e": 662, "527159": 684, "528316": 684, "528e": 670, "53": 664, "531": 678, "532626": 684, "5327e": 662, "5341e": 662, "534577": 684, "535": 670, "5361": 683, "54": [668, 683], "5413e": 662, "545e": 670, "548": 682, "55": [519, 682], "5524e": 662, "554": 682, "56": [668, 682], "57": 678, "57134383": 664, "5725e": 662, "574e": 661, "58": [668, 676, 678, 682], "583x": [], "586e": 670, "5880e": 684, "5902e": 662, "59381366": 686, "5971e": 662, "598e": 670, "599484": 686, "59948425": 686, "5x": 683, "6": [51, 75, 78, 81, 82, 84, 87, 90, 92, 93, 356, 357, 359, 361, 363, 364, 368, 370, 371, 383, 478, 489, 533, 544, 661, 662, 664, 667, 668, 670, 675, 678, 681, 682, 683, 684, 685, 686], "60": [77, 78, 81, 89, 90, 93], "600": 684, "603e": 670, "6070e": 668, "60752691e": 664, "60752865e": 664, "6084": 683, "60862080": 684, "61": 683, "6142e": 662, "6147": 683, "618e": 670, "6194e": 662, "62": 682, "6208e": 661, "62134670e": 664, "62134742e": 664, "621941": 684, "622614": 684, "62nd": 682, "633e": 661, "634e": 661, "6361": 686, "6393e": 662, "63nd": [], "63rd": 682, "64158883": 686, "641589": 686, "643e": 670, "644318": 684, "646610": 684, "6467e": 662, "6470e": 662, "649e": 670, "65": 676, "6571e": 662, "657563": 684, "660747": 684, "660806": 684, "6626e": 662, "663257": 684, "663e": 670, "66810054": 686, "668101": 686, "6696": 661, "67": 676, "670e": 670, "6734e": 662, "6758": [], "67912611e": 664, "6887e": 662, "691e": 670, "6f": [683, 686], "6th": 683, "7": [93, 661, 662, 664, 668, 670, 683, 684, 686], "7015e": 662, "70442406": 664, "705e": 670, "707": 670, "70908547e": 664, "7101e": 662, "7157e": 662, "72": [78, 90, 93], "7208e": 662, "7221e": 684, "722e": 670, "724e": 670, "7326e": 684, "7334e": 684, "735": 682, "7375e": 662, "7421e": 662, "74263683": 686, "742637": 686, "742e": 670, "743e": 670, "7463e": 668, "75": [77, 89], "750e": 661, "7516e": 661, "753152": 661, "75329367e": 664, "75358300e": 664, "761": 682, "765e": 670, "7673": 683, "7691": [], "77": [93, 683], "773e": 670, "77426368": 686, "77787605": 684, "7786e": 684, "7791e": 684, "7795e": 684, "78": 686, "7801e": 684, "7810": 686, "7815e": 662, "7825": [], "782559": 686, "7825594": 686, "78673232": 684, "79": 676, "79193956e": 664, "791e": 670, "7950e": 684, "7974": 683, "79e": 670, "8": [80, 92, 93, 661, 662, 664, 668, 670, 676, 682, 683, 684, 685], "80": [93, 683], "8000": [361, 364], "800e": 661, "801": 685, "8057e": 662, "8067e": 684, "8109e": 683, "815": 670, "81909094": 684, "81909102": 684, "81909897": 684, "81972003": 684, "81991727": 684, "82354589e": 664, "82355416e": 664, "823e": 670, "8244": 661, "8275": [], "8298e": 662, "8303e": 685, "83403662": 684, "83403663": 684, "83404371": 684, "83409738": 684, "83413003": 684, "83495231": 684, "83500465": 684, "84129562": 684, "84366077": 684, "8445e": 662, "84538915": 684, "845e": 670, "85491871": 684, "8568e": 662, "8573": 683, "86": 683, "861e": 670, "86233346": 684, "86261267": 684, "86261548": 684, "86261551": 684, "86374027e": 664, "867e": 661, "87": 664, "8725": 686, "87492100": 684, "88": 682, "880e": 661, "89": [676, 684], "9": [75, 81, 87, 93, 661, 662, 664, 668, 670, 674, 676, 680, 683, 684, 686], "90396586e": 664, "908e": 670, "9250e": 662, "92672429": 684, "9282": 686, "93": [682, 684], "9328e": 668, "9488e": 684, "9499": 683, "95": [683, 684], "9533e": 662, "9658e": 684, "97044836": 684, "970e": 670, "9746e": 661, "98": [661, 684], "9805e": 664, "981": 682, "9816e": 670, "982": 682, "985e": 661, "98631179e": 664, "98631181e": 664, "98655151e": 664, "9876e": 662, "99": [48, 661, 664, 683, 684], "991e": 670, "9948425": 686, "9955e": 661, "996": 682, "99812255e": 664, "99812256e": 664, "9991": [], "99920862e": 664, "999338": 661, "999899": 683, "9999": [48, 683], "999993": 683, "999997": 661, "999999": 661, "A": [204, 211, 468, 472, 566, 661, 663, 664, 666, 667, 668, 670, 671, 678, 679, 681, 682, 683, 685, 686], "As": [661, 673, 684, 685], "At": 683, "Be": [674, 680], "By": [661, 663, 683], "For": [49, 53, 58, 99, 159, 173, 204, 212, 222, 226, 231, 233, 235, 238, 243, 245, 247, 255, 256, 257, 258, 264, 265, 266, 267, 269, 272, 275, 277, 282, 285, 288, 290, 295, 298, 301, 303, 308, 311, 314, 316, 321, 324, 327, 329, 334, 337, 340, 342, 359, 385, 387, 390, 399, 401, 404, 413, 415, 418, 427, 429, 432, 441, 443, 446, 455, 457, 460, 482, 490, 499, 504, 510, 511, 515, 521, 557, 575, 615, 624, 661, 662, 664, 667, 668, 669, 670, 673, 674, 676, 681, 683, 685, 686], "If": [0, 1, 3, 4, 8, 9, 14, 18, 21, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 54, 56, 58, 60, 61, 66, 71, 98, 103, 108, 112, 114, 119, 121, 125, 127, 132, 134, 138, 142, 144, 148, 152, 154, 155, 159, 161, 166, 168, 173, 175, 180, 182, 186, 190, 192, 193, 200, 203, 208, 211, 214, 217, 218, 224, 226, 230, 233, 236, 237, 238, 242, 248, 249, 254, 256, 263, 268, 272, 274, 275, 278, 279, 280, 281, 285, 287, 288, 291, 292, 293, 294, 298, 300, 301, 304, 305, 306, 307, 311, 313, 314, 317, 318, 319, 320, 324, 326, 327, 330, 331, 332, 333, 337, 339, 340, 343, 344, 345, 349, 350, 351, 354, 356, 363, 365, 369, 371, 376, 377, 378, 381, 383, 384, 387, 389, 390, 393, 394, 397, 398, 401, 403, 404, 407, 408, 411, 412, 415, 417, 418, 421, 422, 425, 426, 429, 431, 432, 435, 436, 439, 440, 443, 445, 446, 449, 450, 453, 454, 457, 459, 460, 463, 464, 467, 471, 472, 476, 478, 479, 482, 483, 484, 487, 489, 493, 494, 496, 497, 503, 504, 507, 508, 509, 514, 515, 517, 518, 525, 527, 531, 533, 537, 538, 542, 544, 546, 547, 550, 551, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 571, 572, 573, 576, 577, 578, 580, 581, 582, 584, 586, 588, 592, 593, 594, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 624, 627, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 654, 656, 661, 662, 663, 664, 668, 669, 670, 673, 674, 676, 681, 683, 685, 686], "In": [1, 7, 17, 27, 31, 43, 114, 127, 161, 175, 268, 281, 294, 307, 320, 333, 479, 490, 510, 557, 575, 584, 619, 620, 621, 623, 635, 639, 640, 641, 643, 661, 662, 663, 664, 667, 668, 669, 670, 675, 678, 679, 682, 683, 684, 685, 686], "It": [661, 664, 668, 673, 674, 683], "Its": 683, "No": [668, 680], "Not": [232, 244, 391, 405, 419, 433, 447, 461], "On": [661, 670], "One": [5, 26, 37, 58, 587, 661, 664, 670, 683], "Such": [663, 683], "That": [109, 122, 135, 155, 169, 193, 229, 241, 253, 262, 661, 668, 670, 681, 683, 684], "The": [0, 1, 2, 3, 4, 7, 8, 21, 31, 38, 40, 41, 48, 49, 51, 57, 58, 62, 67, 69, 72, 82, 84, 94, 98, 99, 103, 108, 109, 119, 122, 127, 132, 135, 142, 152, 155, 159, 166, 169, 173, 175, 180, 183, 190, 200, 204, 205, 207, 214, 215, 217, 224, 226, 229, 236, 238, 241, 248, 250, 253, 259, 262, 272, 285, 298, 311, 324, 337, 358, 359, 521, 535, 556, 557, 565, 574, 583, 584, 586, 594, 603, 604, 612, 613, 615, 620, 621, 624, 632, 633, 640, 641, 644, 648, 654, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 686], "Then": [183, 668, 673, 674, 681, 683], "There": [661, 668, 683], "These": [109, 122, 193, 566, 661, 662, 663, 664, 670, 671, 672, 673, 679, 682, 683], "Theses": [], "To": [479, 661, 662, 663, 664, 668, 670, 674, 676, 680, 683, 684], "With": [652, 661, 668, 669, 683], "_": [0, 40, 53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 183, 193, 207, 229, 238, 241, 243, 247, 253, 259, 262, 264, 267, 270, 275, 283, 288, 296, 301, 309, 314, 322, 327, 335, 340, 351, 359, 378, 390, 404, 418, 432, 446, 460, 482, 484, 494, 504, 515, 521, 566, 595, 661, 662, 663, 664, 668, 669, 670, 681, 683, 684, 685, 686], "_0": [53, 207, 662, 664, 681, 683, 684], "_1": [21, 595, 661, 668, 681], "_2": [109, 114, 116, 118, 127, 129, 131, 141, 151, 161, 163, 165, 175, 177, 179, 189, 199, 207, 217, 229, 241, 253, 262, 546, 566, 661, 662, 664, 668, 681], "_23": [], "__class__": 668, "__init__": [661, 662, 663, 664, 668, 670, 676, 684], "__n": 676, "__name": 676, "__name__": 661, "__str__": [660, 679], "_ab": 669, "_adibnazari": [], "_affineoper": [276, 289, 302, 315, 328, 341], "_arr": [55, 60, 65, 70], "_base": [676, 679], "_baserom": 676, "_basi": 676, "_build": 673, "_c": 684, "_config": 673, "_ddx": 684, "_error": 669, "_euclidean": 669, "_f": [31, 46, 122, 135, 155, 159, 169, 173, 183, 207, 217, 229, 241, 253, 262, 545, 547, 661, 664, 668, 681], "_fit_solv": 679, "_gridsearch": 684, "_i": [21, 275, 288, 301, 314, 327, 340, 351, 359, 378, 390, 404, 418, 432, 446, 460, 484, 494, 504, 515, 521, 661, 668], "_iman": [], "_input": [54, 59, 64, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 662], "_interpoper": [391, 405, 419, 433, 447, 461], "_ivp": 683, "_j": [53, 207, 259, 275, 288, 301, 314, 327, 340, 351, 359, 378, 390, 404, 418, 432, 446, 460, 484, 494, 504, 515, 521, 662, 664, 668, 669, 670, 681, 683, 685], "_jac": 668, "_k": [359, 575], "_nonparametricmodel": [210, 220, 228, 240, 252, 261], "_normal": 669, "_oper": [232, 244], "_opinfmodel": 679, "_p": 546, "_p_": 669, "_r": [21, 661, 668], "_scr": [], "_state": [54, 59, 64, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 662], "_toc": [666, 673], "_util": 679, "a0": 686, "a1462": 682, "a1490": 682, "a1917": [678, 682], "a1934": [678, 682], "a1946": [678, 682], "a1959": [678, 682], "a3489": 682, "a3515": 682, "a_": [205, 215, 226, 238, 250, 259, 268, 270, 272, 274, 277, 281, 283, 285, 287, 290, 294, 296, 298, 300, 303, 307, 309, 311, 313, 316, 320, 322, 324, 326, 329, 333, 335, 337, 339, 342, 668, 675, 683], "a_intrus": 683, "a_nonparametr": 668, "a_opinf": 683, "aaai": 682, "aaaifss2022": 682, "ab": [193, 204, 566, 682, 685], "abbrevi": 668, "abl": 683, "about": [672, 673, 676, 681, 683], "abov": [661, 662, 664, 681, 683, 684, 685, 686], "abs_err": [0, 545, 546], "abs_froerr": 683, "abs_l2err": 683, "absolut": [0, 8, 18, 28, 44, 49, 545, 546, 547, 566, 661, 670, 685], "absolute_error": [0, 545, 547, 681], "absolute_error_j": 546, "absorb": 668, "abstract": [13, 14, 15, 54, 55, 95, 97, 153, 480, 482, 486, 491, 501, 502, 506, 508, 513, 606, 607, 610, 679], "accept": [58, 668, 679], "access": [21, 31, 661, 668, 683, 685], "accident": 673, "accommod": 668, "accompani": [673, 674], "accomplish": [670, 681], "accord": 684, "accordingli": 679, "account": 681, "accur": [31, 683, 685], "accuraci": [56, 57, 61, 62, 66, 67, 71, 72, 661, 681, 682], "achiev": [661, 681, 683], "across": [661, 670], "act": [159, 173, 268, 281, 294, 307, 320, 333, 346, 351, 357, 361, 364, 372, 373, 378, 384, 398, 412, 426, 440, 454, 468, 479, 483, 484, 490, 493, 498, 503, 510, 514, 519, 523, 526, 534, 548, 557, 566, 575, 595, 604, 668, 683], "acta": 682, "action": [357, 519, 667, 668], "activ": [674, 676, 680, 682], "actual": [363, 525, 652, 673, 674, 684], "ad": [661, 679, 681], "adam": [211, 233, 256], "adapt": 684, "add": [664, 673, 674, 676, 682], "addit": [31, 49, 207, 217, 229, 241, 253, 262, 566, 620, 621, 632, 633, 640, 641, 646, 650, 661, 662, 663, 664, 667, 668, 670, 674, 683, 684, 685], "addition": 661, "adibnazari": [], "adibnazari2023swimbot": [], "adjust": [566, 620, 621, 632, 633, 640, 641, 661, 679], "admonit": 673, "advanc": 673, "advantag": [661, 663, 664, 670, 683], "aerial": 682, "aeroelast": 682, "aeronaut": 682, "affect": [550, 551, 554, 555, 582, 661], "affin": [204, 268, 270, 272, 274, 276, 277, 279, 281, 283, 285, 287, 289, 290, 292, 294, 296, 298, 300, 302, 303, 305, 307, 309, 311, 313, 315, 316, 318, 320, 322, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 342, 344, 566, 661, 662, 679, 682], "affineconstantoper": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 679, 686], "affinecubicoper": [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "affineinputoper": [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "affinelinearoper": [308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 668, 679, 686], "affinequadraticoper": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "affinestateinputoper": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "after": [1, 31, 109, 122, 193, 217, 584, 620, 621, 632, 633, 640, 641, 652, 654, 661, 670, 674, 676, 679, 683], "again": 661, "against": [48, 51, 52, 662], "agrangian": 682, "ahat": [159, 173, 205, 215, 426, 440, 468, 469, 471, 472, 473, 475, 477, 615, 624, 662, 663, 664, 668, 670, 675, 681, 683, 685, 686], "ahat_": [307, 668], "ahb": 681, "ai": 682, "aiaa": [678, 682], "aim": [681, 683, 685], "akima": 58, "akima1dinterpol": 58, "alberto": 682, "alexand": 682, "alexandr": [678, 682], "algebra": 682, "alias": 683, "align": [54, 55, 60, 65, 70, 551, 554, 555, 558, 559, 560, 563, 564, 569, 572, 573, 576, 577, 578, 581, 582, 661, 662, 663, 664, 667, 668, 669, 670, 679, 681, 683, 684, 685, 686], "align_ylabel": 684, "all": [1, 26, 31, 36, 37, 55, 56, 57, 60, 61, 62, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 193, 225, 229, 241, 253, 262, 359, 361, 364, 523, 526, 546, 557, 566, 584, 615, 620, 621, 624, 632, 633, 640, 641, 654, 661, 662, 664, 670, 672, 673, 674, 676, 683, 684, 685], "allan": 682, "allclos": [346, 357, 360, 361, 364, 373, 468, 519, 522, 523, 526, 534, 668, 683], "alloc": 664, "allow": [211, 233, 256, 644, 648, 673, 676, 683, 685, 686], "almeida": 682, "almeida2022chaot": 682, "almost": 661, "alon": 683, "along": 681, "alpha": [557, 566, 573, 670, 685, 686], "alpha_": 566, "alreadi": [9, 29, 45, 119, 121, 132, 134, 142, 144, 152, 154, 166, 168, 180, 182, 190, 192, 200, 203, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 562, 571, 580, 600, 609, 619, 620, 631, 632, 633, 639, 640, 655, 656, 661, 676, 680], "alreadyinvert": 624, "also": [21, 31, 58, 204, 268, 281, 294, 307, 320, 333, 486, 506, 624, 661, 662, 664, 665, 667, 668, 669, 670, 671, 676, 679, 680, 683], "alter": [670, 676], "altern": [566, 664, 686], "although": 682, "alwai": [31, 50, 353, 661, 673, 679], "amazonaw": 682, "american": 682, "amiltonian": 682, "amount": [31, 221, 245, 265, 620, 632, 640, 644, 648], "an": [0, 6, 9, 12, 16, 19, 21, 25, 29, 31, 35, 36, 40, 45, 53, 55, 60, 65, 70, 94, 113, 114, 119, 126, 127, 132, 139, 142, 149, 152, 159, 160, 161, 166, 173, 174, 175, 180, 187, 190, 197, 200, 210, 211, 212, 214, 220, 222, 224, 232, 233, 236, 244, 248, 256, 257, 266, 268, 274, 276, 278, 281, 287, 289, 291, 294, 300, 302, 304, 307, 313, 315, 317, 320, 326, 328, 330, 333, 339, 341, 343, 352, 354, 356, 357, 367, 369, 371, 372, 379, 381, 383, 389, 391, 393, 403, 405, 407, 417, 419, 421, 431, 433, 435, 445, 447, 449, 459, 461, 463, 474, 476, 478, 479, 483, 485, 487, 489, 490, 493, 495, 496, 497, 502, 503, 505, 507, 510, 513, 514, 516, 517, 519, 529, 531, 533, 540, 542, 544, 545, 546, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 570, 571, 579, 580, 589, 599, 600, 604, 608, 609, 613, 614, 615, 619, 620, 621, 624, 627, 628, 633, 636, 639, 640, 641, 652, 655, 656, 658, 659, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686], "analysi": [661, 682], "andrei": 682, "ani": [1, 49, 114, 127, 135, 161, 175, 183, 205, 207, 212, 215, 217, 222, 229, 241, 253, 257, 262, 266, 584, 661, 662, 664, 670, 673, 676, 679, 681, 683, 684], "anirban": 682, "annual": 682, "annurev": 682, "anoth": [584, 652, 664], "anthoni": 682, "api": [663, 669, 673, 679, 681], "appar": 683, "appear": [359, 521, 683], "append": [685, 686], "appli": [100, 102, 105, 107, 213, 223, 235, 247, 258, 267, 346, 356, 357, 371, 372, 373, 383, 468, 478, 489, 497, 519, 533, 534, 544, 557, 559, 560, 563, 564, 567, 568, 569, 572, 573, 575, 577, 578, 581, 585, 586, 588, 592, 593, 595, 596, 597, 598, 601, 602, 605, 606, 607, 610, 611, 614, 661, 668, 670, 678, 682, 683], "applic": [54, 59, 64, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 374, 469, 480, 491, 520, 618, 630, 638, 661, 662, 670, 673], "approach": [31, 208, 218, 230, 242, 254, 263, 661, 664, 668, 678, 681, 682, 683], "appropri": [225, 661, 662, 668, 670, 681, 683, 684], "approx": [21, 53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 483, 493, 503, 514, 661, 662, 664, 668, 669, 681, 683, 684, 685, 686], "approxim": [0, 12, 21, 31, 82, 84, 193, 202, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 483, 493, 503, 514, 545, 546, 662, 664, 668, 669, 675, 681, 682, 683, 684, 685, 686], "aq": [683, 684], "ar": [1, 4, 11, 20, 21, 24, 30, 31, 40, 46, 47, 49, 50, 52, 54, 56, 58, 61, 63, 66, 69, 71, 91, 92, 93, 94, 98, 103, 108, 109, 116, 118, 129, 131, 141, 151, 155, 159, 163, 165, 173, 177, 179, 189, 199, 205, 207, 215, 217, 225, 226, 229, 238, 241, 250, 253, 259, 262, 271, 272, 275, 278, 284, 285, 288, 291, 297, 298, 301, 304, 310, 311, 314, 317, 323, 324, 327, 330, 336, 337, 340, 343, 356, 371, 383, 384, 389, 390, 398, 403, 404, 412, 417, 418, 426, 431, 432, 440, 445, 446, 454, 459, 460, 478, 479, 489, 490, 497, 504, 510, 515, 533, 544, 546, 548, 556, 557, 565, 566, 568, 574, 583, 584, 586, 594, 603, 604, 612, 615, 618, 619, 620, 621, 622, 624, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 652, 654, 661, 662, 663, 664, 666, 667, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686], "arang": 668, "arbitrari": [40, 668], "architectur": [], "aretz": 682, "aretz2024enforc": 682, "arg": [24, 82, 622, 634, 642, 661], "argmin": [155, 661], "argmin_": [109, 114, 122, 127, 135, 155, 161, 169, 175, 183, 193, 664], "args_and_kwarg": 668, "argument": [26, 31, 35, 37, 46, 49, 50, 57, 58, 62, 67, 72, 82, 109, 122, 135, 155, 169, 183, 193, 205, 211, 225, 226, 233, 250, 256, 268, 278, 281, 291, 294, 304, 307, 317, 320, 330, 333, 343, 546, 620, 622, 632, 634, 640, 642, 644, 646, 648, 650, 654, 661, 662, 664, 667, 668, 670, 674, 676, 679, 681, 683, 685], "aris": [668, 683, 686], "arjun": 682, "arkovian": 682, "around": [670, 673], "arr": [10, 55, 60, 65, 70], "arrai": [1, 49, 55, 57, 60, 62, 65, 67, 70, 72, 155, 169, 183, 207, 211, 217, 225, 229, 233, 241, 253, 256, 262, 268, 272, 279, 281, 285, 292, 294, 298, 305, 307, 311, 318, 320, 324, 331, 333, 337, 344, 349, 359, 363, 376, 384, 394, 398, 408, 412, 422, 426, 436, 440, 450, 454, 464, 471, 482, 498, 508, 521, 525, 537, 557, 558, 559, 560, 563, 564, 575, 584, 614, 619, 620, 621, 631, 632, 633, 639, 640, 641, 661, 664, 668, 679, 681, 683, 684, 685, 686], "arriv": [663, 668, 685, 686], "arthur": 682, "articl": 682, "artifici": 682, "arxiv": 682, "ashlei": 682, "assembl": 668, "assign": [584, 595, 620, 621, 632, 633, 640, 641, 676], "associ": [669, 680], "assum": [1, 4, 112, 125, 138, 148, 186, 272, 285, 298, 311, 324, 337, 349, 351, 363, 376, 378, 387, 401, 415, 429, 443, 457, 471, 482, 484, 525, 537, 551, 560, 569, 578, 584, 586, 588, 598, 607, 619, 620, 621, 624, 631, 632, 633, 639, 640, 641, 654, 661, 664, 668, 670, 684, 685], "ast": [557, 668, 670], "astronaut": 682, "astyp": 685, "ata": 682, "atmospher": 682, "atol": [664, 684], "attr": [658, 659, 670], "attribut": [69, 211, 212, 215, 222, 238, 257, 259, 266, 280, 293, 306, 319, 332, 345, 372, 397, 411, 425, 439, 453, 467, 483, 488, 493, 503, 509, 514, 518, 566, 615, 624, 658, 659, 661, 663, 664, 668, 673, 676, 679, 683], "attributeerror": [560, 563, 564, 569, 572, 573, 661, 679], "augcond": 183, "augment": [183, 663, 664, 670, 682], "aussian": 682, "austin": 682, "autom": 674, "automat": [211, 233, 256, 672, 673, 676, 679, 682, 683], "autonom": 682, "autosummari": 666, "auxiliari": 663, "avail": [31, 94, 193, 604, 631, 632, 633, 661, 662, 667, 668, 670, 671, 679, 681, 683, 684, 685], "averag": [575, 670, 683], "aviat": [678, 682], "avoid": [661, 674, 680], "awar": 682, "ax": [26, 37, 38, 40, 41, 42, 48, 51, 52, 204, 670, 683, 684, 685, 686], "ax1": [683, 685, 686], "ax2": [683, 685, 686], "axi": [360, 522, 661, 662, 670, 684], "axvlin": [684, 685], "ayleigh": 682, "b": [204, 373, 377, 613, 667, 668, 669, 679, 681, 682, 685, 686], "b_": [205, 215, 226, 238, 250, 259, 668, 675], "b_nonparametr": 668, "babiniec": 682, "back": [670, 684], "backend": 679, "backward": [53, 68, 73, 74, 75, 76, 77, 78, 84, 91, 92, 93, 211, 233, 256, 662, 679, 684], "balanc": 684, "balthasar": [], "balzano": 682, "bar": [21, 573, 575, 661, 662, 670, 684], "barbosa": 682, "base": [1, 6, 12, 31, 58, 205, 211, 215, 233, 256, 621, 633, 641, 664, 668, 670, 672, 674, 677, 678, 679, 681, 682, 683, 685, 686], "basi": [1, 4, 7, 8, 12, 15, 17, 18, 21, 24, 25, 26, 27, 28, 29, 31, 34, 36, 37, 38, 40, 41, 43, 44, 45, 50, 208, 218, 230, 242, 254, 263, 274, 278, 287, 291, 300, 304, 313, 317, 326, 330, 339, 343, 350, 354, 365, 369, 377, 381, 389, 393, 403, 407, 417, 421, 431, 435, 445, 449, 459, 463, 472, 476, 483, 487, 493, 496, 503, 507, 514, 517, 527, 531, 538, 542, 547, 615, 619, 620, 623, 628, 631, 632, 633, 635, 636, 639, 640, 643, 662, 668, 669, 675, 677, 679, 681, 684, 685, 686], "basis_exampl": 661, "basisclass": 6, "basismulti": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 661, 679], "basistempl": [13, 14, 15, 16, 17, 18, 19, 20, 661, 679], "bayesian": [114, 127, 161, 175, 615, 624, 678, 679, 682], "bayesianparametricrom": [], "bayesianrom": [616, 617, 618, 619, 620, 621, 622, 623, 624, 679], "bbox_to_anchor": 683, "bbox_transform": 683, "bc_type": [662, 684], "bdf": [211, 233, 256, 632, 683, 685, 686], "beauti": 673, "becaus": [229, 241, 253, 262, 566, 569, 572, 573, 577, 654, 661, 663, 668, 670, 673, 683, 685, 686], "becom": [664, 668], "been": [560, 563, 564, 569, 572, 573, 661, 679, 681], "befor": [208, 218, 230, 242, 254, 263, 620, 632, 640, 652, 654, 661, 668, 670, 673, 674, 676, 679, 680, 681, 683, 685], "begin": [1, 155, 169, 183, 272, 285, 298, 311, 324, 337, 349, 359, 363, 376, 471, 482, 521, 525, 537, 557, 575, 584, 661, 662, 663, 664, 667, 668, 669, 670, 674, 681, 683, 684, 685, 686], "behavior": 683, "being": [595, 620, 621, 632, 633, 640, 641, 644, 648, 654, 670, 679, 682, 683, 686], "below": [51, 566, 668, 669, 670, 683, 685], "beneath": 51, "benefici": 670, "benefit": [670, 684], "benjamin": [678, 682], "benner": [678, 682], "benner2020deim": 682, "benner2022incompress": 682, "benner2023quaddecod": 682, "best": [193, 620, 621, 632, 633, 640, 641, 664, 674, 681, 684], "beta": [566, 573], "beta_": 566, "better": [661, 679, 684, 685], "between": [0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 356, 371, 383, 478, 489, 497, 533, 544, 545, 546, 556, 565, 574, 583, 594, 603, 612, 661, 663, 664, 668, 669, 670, 681, 683, 685], "bfgamma": [155, 159, 169, 173, 175, 176, 177, 664], "bfgamma_1": [155, 664], "bfgamma_i": [155, 161, 162, 163, 664], "bfgamma_r": [155, 664], "bflambda": 49, "bfmu": [226, 229, 231, 233, 235, 238, 241, 243, 245, 247, 250, 253, 255, 256, 258, 259, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 281, 282, 283, 285, 286, 287, 288, 294, 295, 296, 298, 299, 300, 301, 307, 308, 309, 311, 312, 313, 314, 320, 321, 322, 324, 325, 326, 327, 333, 334, 335, 337, 338, 339, 340, 384, 385, 388, 389, 390, 398, 399, 402, 403, 404, 412, 413, 416, 417, 418, 426, 427, 430, 431, 432, 440, 441, 444, 445, 446, 454, 455, 458, 459, 460, 498, 499, 502, 504, 510, 511, 513, 515, 634, 668], "bfmu_": [229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 501, 624, 668], "bfmu_0": [384, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 624, 668], "bfmu_1": [229, 241, 253, 262], "bfmu_i": [114, 127, 161, 175, 229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 624, 668], "bfphi": [31, 49, 122, 183, 193], "bfphi_": [31, 193], "bfpsi": [31, 49, 122, 183, 193], "bfpsi_": [183, 193], "bfsigma": [31, 122, 183, 193], "bfsigma_": [193, 624], "bfsigma_0": 624, "bfsigma_i": [114, 127, 161, 175, 624], "bfxi": [114, 127, 161, 175], "bgw15": [678, 681], "bhat": [159, 173, 205, 215, 373, 374, 376, 377, 380, 382, 412, 662, 663, 664, 668, 675, 681, 685, 686], "bhat_": 294, "bib": 673, "bib2md": 673, "bibliographi": 673, "bibtex": 673, "big": [31, 46, 207, 229, 253, 662, 664, 681, 683, 685, 686], "bigg": [38, 41, 48, 51, 53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 681], "bilinear": [668, 675, 679, 682], "bin": [670, 674, 680], "black": 684, "block": [272, 285, 298, 311, 324, 337, 349, 363, 376, 387, 401, 415, 429, 443, 457, 471, 482, 486, 501, 506, 525, 537, 652, 666, 668, 672, 679, 682], "blockdiag": 661, "blonigan": 682, "blonigan2025therm": 682, "bodi": [], "boef": 682, "boef2024stablespars": 682, "bold": 675, "boldsymbol": [270, 283, 296, 309, 322, 335, 557, 661, 668, 675], "book": 666, "booktitl": 682, "bool": [8, 9, 18, 19, 21, 28, 29, 44, 45, 48, 50, 51, 52, 56, 61, 66, 71, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 268, 278, 279, 281, 291, 292, 294, 304, 305, 307, 317, 318, 320, 330, 331, 333, 343, 344, 354, 356, 369, 371, 381, 383, 384, 393, 394, 398, 407, 408, 412, 421, 422, 426, 435, 436, 440, 449, 450, 454, 463, 464, 476, 478, 487, 489, 496, 497, 507, 508, 517, 531, 533, 542, 544, 546, 550, 551, 553, 554, 555, 559, 560, 562, 563, 564, 566, 568, 569, 571, 572, 573, 577, 578, 580, 581, 582, 586, 588, 590, 592, 593, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 618, 619, 620, 621, 624, 627, 630, 631, 632, 633, 638, 639, 640, 641, 646, 650, 654, 656], "bori": [678, 682], "both": [668, 683, 685], "bottom": 685, "bound": [613, 644, 648, 654], "boundari": [670, 681, 683, 684, 685, 686], "box": [673, 677], "bpb": [], "brace": [], "branch": 673, "brent": 654, "breve": [21, 23, 33, 661, 669], "brew": 674, "bring": 681, "browser": [673, 676], "bu": 204, "bug": [666, 679], "bugfix": 679, "build": 674, "bwd1": 68, "bwd2": [68, 662], "bwd3": [68, 662], "bwd4": 68, "bwd5": 68, "bwd6": 68, "bychkov": 682, "bychkov2024quadrat": 682, "byrow": [557, 566, 670], "b\u00e9nard": 682, "c": [1, 155, 169, 204, 346, 350, 359, 482, 521, 557, 575, 584, 661, 663, 664, 667, 668, 681, 682, 683, 684, 685, 686], "c0": [685, 686], "c1": 204, "c2": 204, "c3": [204, 685], "c5": 685, "c_": [205, 215, 226, 238, 250, 259, 675], "cah": [679, 684], "calcul": [40, 50, 109, 122, 135, 359, 521, 547, 661, 668, 669, 679, 683], "calibr": [212, 222, 257, 266, 479, 498, 584, 619, 620, 621, 631, 632, 633, 639, 640, 641, 662, 663, 667, 668, 670, 681, 685], "california": [], "call": [4, 31, 82, 208, 212, 218, 222, 230, 231, 233, 235, 242, 243, 245, 247, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 269, 274, 275, 282, 287, 288, 295, 300, 301, 308, 313, 314, 321, 326, 327, 334, 339, 340, 385, 389, 390, 399, 403, 404, 413, 417, 418, 427, 431, 432, 441, 445, 446, 455, 459, 460, 479, 499, 504, 511, 515, 560, 563, 564, 566, 569, 572, 573, 604, 615, 661, 663, 664, 668, 670, 679, 681, 683], "callabl": [31, 204, 209, 211, 213, 231, 233, 235, 255, 256, 258, 268, 276, 278, 281, 289, 291, 294, 302, 304, 307, 315, 317, 320, 328, 330, 333, 341, 343, 620, 621, 632, 633, 640, 641, 644, 654, 658, 659, 685, 686], "cambridg": 682, "camwa": 682, "can": [1, 7, 17, 27, 31, 43, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 226, 236, 237, 238, 248, 249, 384, 395, 398, 409, 412, 423, 426, 437, 440, 451, 454, 465, 479, 490, 498, 510, 548, 566, 584, 623, 635, 643, 661, 662, 663, 664, 667, 668, 670, 673, 676, 679, 681, 682, 683, 684, 685, 686], "cancellieri": 682, "candid": [620, 621, 632, 633, 640, 641, 654, 677, 684], "cannot": [31, 109, 122, 193, 278, 291, 304, 317, 330, 343, 662, 668, 681, 683, 686], "canon": [660, 682], "canonicalbasi": 661, "capac": [663, 684], "captur": [31, 48, 268, 281, 294, 307, 320, 333, 652, 683], "carbon": 670, "care": [662, 668], "carri": [620, 632, 640, 654], "carvalho": 682, "case": [1, 31, 56, 61, 66, 71, 82, 114, 127, 161, 175, 268, 281, 294, 307, 320, 333, 566, 584, 619, 620, 621, 632, 633, 639, 640, 641, 644, 645, 646, 648, 649, 650, 661, 662, 664, 668, 669, 670, 675, 679, 681, 682, 683, 684, 686], "cat": 661, "catch": 679, "categor": 682, "categori": 682, "caus": 670, "cbar": 684, "cc": [183, 661, 668], "ccc": [272, 285, 298, 311, 324, 337, 349, 363, 376, 471, 521, 525, 537, 661, 664, 668, 681, 683], "cccc": [668, 681, 685, 686], "ccccc": [683, 685, 686], "cd": 674, "cdc": 682, "cdc49753": 682, "cdc56724": 682, "cdot": [1, 3, 8, 18, 21, 28, 44, 58, 207, 217, 229, 241, 253, 262, 268, 270, 272, 277, 281, 283, 285, 290, 294, 296, 298, 303, 307, 309, 311, 316, 320, 322, 324, 329, 333, 335, 337, 342, 349, 359, 361, 363, 364, 376, 471, 482, 521, 525, 537, 539, 557, 575, 584, 595, 661, 664, 668, 669, 681, 683, 684, 685, 686], "center": [21, 566, 681, 683, 684, 685], "centered_": 679, "central": [79, 80, 81, 84, 91, 92, 93, 662, 679, 683, 685, 686], "certain": [670, 682, 685], "cervera": [], "ch": 670, "chain": 595, "challeng": 682, "chang": [109, 122, 193, 212, 222, 257, 266, 661, 663, 664, 670, 673, 674, 676, 677, 679, 682], "chao": 682, "chaotic": 682, "chapter": 673, "charact": [204, 667], "characterist": [682, 684, 686], "chat": [159, 173, 205, 215, 346, 347, 349, 350, 355, 384, 615, 624, 663, 670, 675, 681, 686], "chat_": 268, "chaudhuri": 682, "check": [57, 62, 67, 72, 98, 103, 108, 121, 134, 144, 154, 168, 182, 192, 203, 356, 371, 383, 478, 489, 497, 533, 544, 556, 565, 574, 583, 594, 603, 612, 620, 621, 632, 633, 640, 641, 654, 661, 662, 663, 664, 674, 676, 680, 683, 684, 686], "check_orthogon": 21, "checkout": 673, "chemic": 670, "cheng": [678, 682], "chicken": 679, "child": [145, 351, 378, 482, 484, 486], "choic": [566, 661, 664, 668, 670, 681, 683, 684, 685, 686], "choos": [31, 46, 661, 670, 681, 683, 684], "chosen": 682, "chrome": 673, "cid": 682, "circ": [595, 661], "citat": 673, "cite": 673, "ckron": [360, 361, 364, 522, 523, 526, 679], "ckron_indic": 679, "cl": [661, 664, 668, 670], "clarif": 679, "clash": 679, "class": [1, 6, 12, 21, 31, 53, 58, 63, 65, 68, 94, 99, 104, 109, 119, 122, 132, 135, 142, 145, 152, 155, 166, 169, 180, 183, 190, 193, 200, 205, 214, 215, 224, 226, 232, 236, 237, 238, 244, 248, 249, 250, 259, 268, 274, 281, 287, 294, 300, 307, 313, 320, 326, 333, 339, 346, 351, 357, 372, 373, 378, 384, 387, 389, 391, 395, 398, 401, 403, 405, 409, 412, 415, 417, 419, 423, 426, 429, 431, 433, 437, 440, 443, 445, 447, 451, 454, 457, 459, 461, 465, 468, 479, 482, 484, 486, 490, 498, 502, 503, 510, 513, 514, 519, 534, 548, 557, 566, 575, 584, 589, 595, 599, 604, 615, 624, 628, 636, 644, 648, 652, 655, 656, 661, 663, 664, 665, 667, 669, 670, 671, 672, 673, 676, 679, 681, 684, 685], "classic": [681, 685], "classifi": [620, 632, 640, 644, 648, 667], "classmethod": [6, 16, 25, 35, 36, 113, 126, 139, 149, 159, 160, 173, 174, 187, 197, 210, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 367, 379, 387, 391, 392, 401, 405, 406, 415, 419, 420, 429, 433, 434, 443, 447, 448, 457, 461, 462, 474, 485, 495, 505, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 625, 653, 661, 664, 668, 670], "cleaner": 566, "clear": 673, "click": 682, "climat": 682, "clone": [674, 676, 680], "close": [661, 681, 683], "closer": 685, "closest": 661, "cm": [683, 684, 685, 686], "cma": [678, 682], "cmap": 684, "cmd": 676, "co": [661, 662, 668, 670, 682], "co2": 682, "code": [652, 661, 673, 674, 675, 677, 679, 681, 683, 684, 685], "coeff": [268, 276, 278, 281, 289, 291, 294, 302, 304, 307, 315, 317, 320, 328, 330, 333, 341, 343], "coeffici": [268, 270, 271, 276, 281, 283, 284, 289, 294, 296, 297, 302, 307, 309, 310, 315, 320, 322, 323, 328, 333, 335, 336, 341, 661, 668], "coincid": 661, "collect": [18, 28, 31, 40, 44, 49, 53, 159, 173, 225, 624, 654, 668, 670, 685], "color": [676, 683, 684, 685, 686], "colorbar": 684, "column": [0, 18, 28, 31, 35, 44, 50, 56, 57, 61, 62, 66, 67, 71, 72, 96, 101, 106, 109, 122, 135, 145, 155, 169, 183, 193, 204, 207, 217, 229, 241, 253, 262, 277, 290, 303, 316, 329, 342, 349, 353, 359, 363, 368, 376, 380, 392, 406, 420, 434, 448, 462, 471, 475, 482, 486, 506, 521, 525, 530, 537, 541, 545, 546, 547, 566, 613, 614, 619, 620, 621, 631, 632, 633, 639, 640, 641, 661, 664, 668, 669, 675, 681, 683, 685, 686], "column_stack": [661, 683], "columnwis": [359, 521, 557, 575, 661, 669, 681], "com": [674, 680, 682], "combin": [21, 661, 670, 681, 683], "combust": [670, 678, 682, 683], "combustion_transform": 670, "come": [668, 679], "command": [674, 676, 680], "commit": [673, 674, 676], "common": [211, 233, 256, 661, 670, 676, 681, 683], "commun": 682, "compact": 675, "compar": [620, 621, 661, 662, 683, 685, 686], "comparison": 682, "compat": 679, "compel": 670, "compil": [673, 674, 676], "complet": [615, 628, 636, 652, 668], "complex": 683, "complic": 683, "compon": 661, "componentwis": 566, "compos": [661, 664], "composit": [595, 661], "compress": [1, 7, 11, 12, 17, 20, 21, 27, 30, 31, 43, 47, 58, 357, 359, 360, 361, 363, 364, 370, 519, 521, 522, 523, 525, 526, 532, 537, 615, 628, 636, 662, 663, 664, 668, 669, 670, 679, 685], "compress_cub": 679, "compress_entri": [364, 526, 679], "compress_quadrat": 679, "compris": [159, 173, 205, 215, 226, 238, 250, 259, 661, 667, 668], "comput": [0, 8, 18, 28, 31, 34, 44, 48, 49, 50, 51, 53, 109, 110, 112, 115, 116, 118, 122, 123, 125, 128, 129, 131, 136, 141, 146, 151, 155, 156, 162, 163, 165, 169, 170, 176, 177, 179, 183, 184, 186, 189, 193, 194, 199, 202, 204, 211, 233, 256, 357, 359, 360, 519, 521, 522, 545, 546, 661, 662, 667, 668, 669, 672, 673, 678, 679, 682, 684, 685, 686], "computation": [49, 668, 681], "concaten": [268, 277, 279, 281, 290, 292, 294, 303, 305, 307, 316, 318, 320, 329, 331, 333, 342, 344, 384, 392, 394, 398, 406, 408, 412, 420, 422, 426, 434, 436, 440, 448, 450, 454, 462, 464, 508, 615, 624, 661, 663, 668, 683, 684, 685, 686], "concatenat": [279, 292, 305, 318, 331, 344, 394, 408, 422, 436, 450, 464, 508], "concentr": 670, "concept": 681, "cond": [115, 128, 135, 155, 162, 169, 176, 664, 683], "conda": [674, 676, 680], "condit": [110, 115, 123, 128, 136, 146, 156, 162, 170, 176, 183, 184, 194, 202, 221, 245, 265, 644, 645, 646, 648, 649, 650, 664, 667, 668, 670, 681, 684, 685, 686], "conditionnumb": [136, 146, 156, 170, 184, 194], "conduct": [674, 683, 685, 686], "confer": 682, "configur": [657, 673], "conflict": [674, 680], "conform": [674, 676], "congratul": 676, "conjunct": 548, "connect": [584, 595, 615, 628, 636], "conserv": [663, 682, 684], "consid": [98, 103, 108, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 483, 493, 503, 514, 594, 661, 662, 663, 668, 669, 670, 681, 683, 684, 685, 686], "consist": [0, 11, 20, 30, 31, 47, 49, 56, 57, 61, 62, 66, 67, 71, 72, 98, 103, 108, 356, 359, 371, 383, 478, 489, 497, 521, 533, 544, 556, 565, 574, 583, 594, 603, 612, 661, 662, 663, 664, 667, 668, 670, 682], "consolid": 683, "constant": [109, 116, 122, 159, 173, 204, 268, 281, 294, 307, 320, 333, 346, 384, 479, 566, 661, 668, 670, 675, 681, 685, 686], "constantoper": [205, 215, 226, 238, 250, 259, 268, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 384, 667, 684], "constraint": [135, 145, 207, 217, 229, 241, 253, 262, 664, 682], "construct": [4, 15, 109, 114, 127, 155, 159, 161, 173, 175, 208, 218, 228, 230, 240, 242, 252, 254, 261, 263, 275, 288, 301, 314, 327, 340, 351, 360, 361, 364, 366, 378, 390, 395, 404, 409, 418, 423, 432, 437, 446, 451, 460, 465, 473, 482, 484, 494, 504, 515, 522, 523, 526, 528, 539, 615, 624, 661, 664, 667, 668, 670, 671, 679, 681, 682, 683], "constructor": [21, 24, 31, 58, 145, 229, 241, 253, 262, 268, 281, 294, 307, 320, 333, 384, 398, 412, 426, 440, 454, 661, 662, 664, 667, 668, 670, 679], "contain": [49, 204, 551, 560, 569, 578, 588, 598, 607, 661, 664, 665, 673, 674, 679, 683], "content": [673, 674], "context": [652, 664, 668, 669, 672, 679, 681, 682], "continu": [53, 615, 618, 619, 620, 621, 624, 628, 630, 631, 632, 633, 636, 638, 639, 640, 641, 644, 662, 664, 667, 668, 683], "continuousmodel": [206, 207, 208, 209, 210, 211, 212, 213, 214, 479, 490, 615, 620, 632, 636, 640, 667, 668, 679, 681, 683, 684, 685], "continuousopinfrom": 679, "continuousregtest": [620, 632, 640, 645, 646, 647, 684], "contrast": 661, "contribut": [677, 679, 680], "contributor": 679, "control": 682, "convect": 682, "conveni": [82, 679, 683], "convent": [674, 676], "coordin": [2, 3, 7, 13, 14, 17, 22, 23, 27, 32, 33, 43, 623, 635, 643, 661, 681, 684], "copi": [121, 134, 144, 154, 168, 182, 192, 203, 356, 371, 383, 478, 489, 497, 533, 544, 550, 551, 554, 555, 559, 560, 563, 568, 569, 572, 573, 577, 578, 581, 582, 586, 588, 592, 593, 597, 598, 601, 602, 606, 607, 610, 611, 664, 668, 673], "copland": 682, "core": [679, 681], "correct": [356, 371, 383, 478, 489, 497, 533, 544, 662, 676], "correctli": [676, 679], "corresond": 675, "correspond": [0, 2, 3, 4, 7, 8, 17, 27, 40, 43, 49, 54, 58, 59, 63, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 101, 103, 106, 108, 109, 116, 155, 159, 163, 173, 207, 208, 209, 213, 215, 217, 218, 225, 229, 230, 231, 233, 235, 238, 241, 242, 243, 245, 247, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 269, 272, 273, 274, 275, 282, 285, 286, 287, 288, 295, 298, 299, 300, 301, 308, 311, 312, 313, 314, 321, 324, 325, 326, 327, 334, 337, 338, 339, 340, 349, 363, 376, 384, 385, 387, 388, 389, 390, 398, 399, 401, 402, 403, 404, 412, 413, 415, 416, 417, 418, 426, 427, 429, 430, 431, 432, 440, 441, 443, 444, 445, 446, 454, 455, 457, 458, 459, 460, 471, 482, 499, 501, 502, 504, 511, 513, 515, 525, 537, 545, 546, 557, 586, 618, 619, 620, 621, 623, 624, 630, 631, 632, 633, 635, 638, 639, 640, 641, 643, 661, 662, 668, 669, 674, 676, 681, 683, 685, 686], "corresponding_input": 667, "cosin": 661, "cost": [661, 681, 685], "costa": 682, "could": [661, 670, 679, 682, 683], "count": 52, "count_nonzero": 670, "counterpart": 566, "coupl": 682, "cov": [624, 679], "covari": [114, 127, 161, 175, 624], "coverag": [674, 676, 679], "cpc": 682, "creat": [26, 37, 38, 40, 41, 42, 48, 51, 52, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 551, 555, 559, 560, 563, 568, 569, 572, 573, 577, 578, 581, 582, 586, 588, 592, 593, 597, 598, 601, 602, 606, 607, 610, 611, 661, 673, 674, 679, 680], "create_dataset": [656, 661, 668, 670], "credenti": 680, "criteria": [661, 683], "criterion": 661, "critic": 683, "cross": [359, 521, 673], "crux": 668, "ctr2": 68, "ctr4": 68, "ctr6": [68, 662], "cubic": [58, 204, 211, 233, 256, 281, 357, 359, 361, 364, 398, 663, 675, 684], "cubicoper": [205, 215, 226, 238, 250, 259, 281, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 398, 667, 679], "cubicsplin": [58, 226, 237, 238, 249, 384, 398, 412, 426, 440, 454, 662, 668, 684], "cubicsplineestim": 662, "cumbersom": 679, "cumul": [31, 38, 39, 48, 661, 683, 684], "cumulative_energi": [31, 35, 46, 50, 661, 683], "current": [652, 674, 680, 683], "custom": [31, 490, 510, 566, 652, 679], "cutoff": [40, 41, 42, 52, 135, 155, 169, 685], "d": [73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 109, 110, 112, 114, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 131, 133, 135, 136, 138, 141, 143, 145, 146, 148, 151, 153, 155, 156, 158, 159, 161, 162, 163, 165, 167, 169, 170, 172, 173, 175, 176, 177, 179, 181, 183, 184, 186, 189, 191, 193, 194, 199, 201, 202, 204, 205, 207, 215, 217, 229, 241, 253, 262, 272, 277, 279, 285, 290, 292, 298, 303, 305, 311, 316, 318, 324, 329, 331, 337, 342, 344, 349, 363, 376, 387, 394, 401, 408, 415, 422, 429, 436, 443, 450, 457, 464, 471, 479, 482, 486, 501, 506, 508, 525, 537, 615, 624, 626, 663, 664, 668, 675, 678, 679, 681, 682, 683, 685, 686], "d_": [272, 285, 298, 311, 324, 337, 349, 363, 376, 471, 479, 482, 498, 525, 537, 668], "d_0": 668, "d_1": 668, "d_ell": 668, "d_i": 668, "da": 668, "dagger": 661, "darker": 683, "data": [0, 21, 31, 53, 58, 63, 68, 94, 109, 110, 112, 115, 117, 122, 123, 125, 128, 130, 135, 136, 138, 140, 145, 146, 148, 150, 155, 156, 158, 162, 164, 169, 170, 172, 176, 178, 183, 184, 186, 188, 193, 194, 196, 198, 204, 207, 211, 212, 217, 222, 225, 229, 233, 241, 253, 256, 257, 262, 266, 272, 285, 298, 311, 324, 337, 349, 363, 376, 384, 387, 396, 398, 401, 410, 412, 415, 424, 426, 429, 438, 440, 443, 452, 454, 457, 466, 471, 482, 486, 501, 506, 525, 537, 545, 546, 557, 559, 560, 563, 566, 568, 569, 572, 573, 576, 577, 578, 581, 586, 588, 592, 593, 597, 598, 601, 602, 604, 606, 607, 610, 611, 613, 615, 616, 618, 619, 620, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 655, 656, 662, 663, 667, 669, 672, 673, 674, 675, 677, 678, 679, 682], "data_matrix": [109, 112, 122, 125, 135, 138, 145, 148, 155, 158, 169, 172, 183, 186, 193, 196, 664, 679, 683, 684], "data_point": [226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465], "data_valu": [226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465], "datablock": [668, 679], "datafil": 673, "datafram": 683, "dataset": [655, 670, 685, 686], "dataset_label": [655, 656], "dataset_to_sav": 656, "date": 674, "david": 682, "ddot": [661, 668, 683, 685, 686], "ddqhat": [209, 219, 231, 243, 255, 264, 275, 288, 301, 314, 327, 340, 351, 366, 378, 390, 404, 418, 432, 446, 460, 473, 484, 494, 504, 515, 528, 539, 667, 668], "ddt": [53, 54, 59, 64, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 101, 103, 106, 108, 205, 207, 209, 213, 226, 229, 231, 235, 250, 253, 255, 258, 479, 490, 510, 555, 556, 564, 565, 573, 574, 582, 583, 593, 594, 602, 603, 611, 612, 615, 620, 624, 628, 632, 636, 640, 663, 664, 667, 668, 670, 675, 677, 679, 681, 683, 684, 685, 686], "ddt_": 675, "ddt_estim": [615, 619, 620, 628, 631, 632, 636, 639, 640, 681, 683, 684, 685, 686], "ddt_nonuniform": [82, 662], "ddt_uniform": [82, 662], "ddts_": 675, "ddts_scale": 564, "ddts_transform": [573, 593, 602, 611], "de": 682, "deactiv": 676, "deal": 682, "decai": [42, 661, 683], "decis": 682, "decod": [21, 623, 635, 643, 661, 679, 682], "decomposit": [31, 35, 109, 112, 122, 125, 155, 169, 183, 186, 193, 664, 683], "decompress": [7, 11, 12, 17, 20, 27, 30, 43, 47, 661, 679, 683], "decor": [482, 486], "decoupl": [229, 241, 253, 262, 664, 681], "decreas": [661, 681, 683], "deep": [], "deepcopi": [492, 664, 668], "def": [661, 662, 663, 664, 668, 670, 676, 683, 684, 685, 686], "default": [1, 8, 9, 18, 21, 26, 28, 29, 31, 36, 37, 38, 40, 41, 42, 44, 45, 48, 49, 51, 56, 58, 61, 66, 71, 119, 132, 142, 152, 155, 159, 166, 169, 173, 180, 190, 200, 205, 208, 211, 214, 215, 218, 224, 226, 230, 233, 236, 237, 238, 242, 248, 249, 254, 256, 263, 268, 274, 278, 279, 280, 281, 287, 291, 292, 293, 294, 300, 304, 305, 306, 307, 313, 317, 318, 319, 320, 326, 330, 331, 332, 333, 339, 343, 344, 345, 350, 354, 356, 365, 369, 371, 377, 381, 383, 384, 389, 393, 394, 397, 398, 403, 407, 408, 411, 412, 417, 421, 422, 425, 426, 431, 435, 436, 439, 440, 445, 449, 450, 453, 454, 459, 463, 464, 467, 472, 476, 478, 483, 487, 489, 493, 496, 497, 503, 507, 508, 509, 514, 517, 518, 527, 531, 533, 538, 542, 544, 546, 550, 551, 554, 555, 564, 566, 582, 584, 604, 613, 614, 619, 620, 631, 632, 633, 639, 640, 657, 661, 672, 679, 683], "defin": [8, 11, 18, 20, 21, 28, 30, 31, 38, 40, 41, 44, 47, 48, 51, 193, 204, 229, 241, 253, 262, 268, 281, 294, 307, 320, 333, 479, 483, 490, 493, 498, 503, 508, 510, 514, 546, 547, 557, 575, 595, 615, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 676, 679, 682, 683, 684, 685], "definit": [50, 155, 163, 169, 664, 668], "degre": [1, 363, 525, 661, 681, 683, 684, 686], "deim": 661, "delet": [117, 130, 140, 150, 164, 178, 188, 198, 661, 664, 670, 673], "delta": [73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 663, 669, 683, 684, 685, 686], "delta_": [183, 664], "demo": [674, 683, 686], "demonstr": [661, 664, 670, 673, 681, 684, 686], "den": 682, "denomin": 683, "denot": [31, 114, 127, 161, 175, 275, 288, 301, 314, 327, 340, 351, 378, 390, 404, 418, 432, 446, 460, 484, 494, 504, 515, 573, 593, 602, 611, 661, 668, 669, 670, 675, 683], "dens": [31, 50], "densiti": [661, 670, 684], "depend": [53, 82, 226, 229, 238, 253, 268, 281, 294, 307, 320, 333, 384, 398, 412, 426, 440, 454, 479, 498, 510, 619, 631, 639, 662, 664, 667, 668, 670, 674, 679, 680, 681, 682, 683, 685, 686], "deprec": 679, "der": [], "deriv": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 101, 103, 106, 108, 207, 209, 211, 219, 229, 231, 233, 241, 243, 253, 255, 256, 262, 264, 555, 556, 564, 565, 573, 574, 582, 583, 593, 594, 602, 603, 604, 611, 612, 615, 618, 619, 620, 628, 630, 631, 632, 636, 638, 639, 640, 654, 661, 663, 664, 668, 670, 675, 679, 681, 682, 684, 685, 686], "derivativeestimatortempl": [54, 55, 56, 57, 662, 679], "descend": [49, 50], "describ": [3, 14, 23, 33, 109, 122, 155, 169, 551, 560, 569, 578, 598, 607, 616, 629, 637, 661, 667, 668, 670, 680, 681, 682, 684, 685, 686], "descript": [664, 675, 681, 683], "design": [159, 173, 670, 682, 686], "desir": [204, 548, 613, 663, 668, 670, 684], "detail": [35, 50, 114, 127, 161, 175, 211, 661, 663, 664, 668, 670, 673, 676, 681, 683, 684, 685, 686], "detect": [211, 233, 256], "determin": [1, 48, 51, 69, 584, 615, 624, 668, 670, 681, 685, 686], "determinist": [114, 127, 161, 175, 615, 624], "deton": 682, "dev": 674, "develop": [673, 674, 676, 679, 680, 682], "deviat": [566, 620, 621, 632, 633, 640, 641, 644, 648], "diag": [49, 664, 668, 683, 685, 686], "diagon": [21, 31, 49, 122, 155, 159, 169, 173, 387, 401, 415, 429, 443, 457, 664, 670, 679], "diana": 682, "dict": [26, 31, 37, 38, 40, 41, 42, 48, 49, 51, 52, 56, 58, 61, 66, 71, 204, 620, 622, 632, 634, 640, 642, 646, 650, 662, 664], "dictat": [670, 683], "dictionari": [56, 61, 66, 71], "diff": 676, "differ": [49, 53, 63, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 109, 155, 159, 173, 204, 212, 222, 257, 266, 356, 371, 383, 478, 489, 497, 533, 544, 556, 557, 565, 566, 574, 583, 584, 594, 595, 603, 612, 619, 620, 621, 639, 640, 641, 661, 664, 668, 669, 670, 679, 681, 683, 684, 685, 686], "differenti": [58, 205, 211, 226, 233, 250, 256, 479, 490, 664, 667, 668, 678, 681, 682, 683, 684, 685, 686], "diffus": [663, 683, 685, 686], "digit": 682, "dimens": [1, 3, 4, 12, 21, 31, 46, 57, 62, 67, 72, 112, 125, 138, 148, 158, 159, 172, 173, 186, 204, 205, 215, 226, 238, 250, 259, 268, 277, 280, 281, 290, 293, 294, 303, 306, 307, 316, 319, 320, 329, 332, 333, 342, 345, 346, 353, 356, 357, 360, 368, 371, 372, 373, 380, 383, 384, 392, 397, 398, 406, 411, 412, 420, 425, 426, 434, 439, 440, 448, 453, 454, 462, 467, 468, 475, 478, 479, 480, 486, 489, 490, 491, 497, 498, 501, 506, 509, 510, 518, 519, 522, 530, 533, 534, 541, 544, 548, 549, 550, 557, 566, 575, 584, 586, 588, 595, 604, 624, 662, 664, 668, 670, 679, 681, 683, 684, 685, 686], "dimension": [0, 2, 3, 4, 7, 8, 13, 14, 15, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 34, 37, 43, 44, 50, 57, 58, 62, 67, 72, 112, 125, 138, 148, 155, 169, 186, 207, 208, 217, 218, 226, 229, 230, 237, 238, 241, 242, 249, 253, 254, 262, 263, 274, 287, 300, 313, 326, 339, 349, 363, 376, 384, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 471, 482, 525, 537, 546, 547, 549, 550, 551, 554, 555, 558, 559, 560, 563, 564, 566, 567, 568, 569, 572, 573, 576, 577, 578, 581, 582, 585, 586, 588, 592, 593, 596, 597, 598, 601, 602, 605, 606, 607, 610, 611, 614, 615, 616, 618, 619, 620, 623, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 654, 668, 669, 675, 679, 682, 683, 684, 686], "dimensionalityerror": 54, "dioxid": 670, "direct": [670, 683], "directli": [109, 122, 155, 169, 681], "dirichlet": [683, 685, 686], "dirk": 682, "discret": [1, 53, 215, 221, 238, 245, 259, 265, 479, 584, 618, 619, 620, 621, 630, 631, 632, 633, 638, 639, 640, 641, 648, 661, 664, 667, 668, 670, 681, 683, 684, 685, 686], "discretemodel": [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 615, 636, 667, 679, 684], "discreteopinfrom": 679, "discreteregtest": [621, 633, 641, 649, 650, 651], "dispers": 682, "displai": [676, 683], "displaystyl": [661, 669], "dissert": [], "dist": [], "distribut": [114, 127, 161, 175, 280, 293, 306, 319, 332, 345, 397, 411, 425, 439, 453, 467, 509, 518, 615, 617, 624, 625, 626, 627, 670, 671, 682], "divid": 661, "divis": 557, "do": [21, 24, 114, 121, 127, 134, 144, 154, 161, 168, 175, 182, 192, 203, 231, 235, 243, 247, 255, 258, 264, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 372, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 550, 551, 554, 555, 558, 559, 560, 563, 564, 567, 569, 572, 573, 576, 577, 578, 581, 582, 585, 596, 605, 620, 621, 632, 633, 640, 641, 654, 661, 663, 664, 666, 673, 674, 676, 679, 681, 683, 684], "doc": [546, 673, 674, 679, 683], "docstr": 673, "document": [657, 669, 674, 675, 676, 677, 679, 680], "doe": [57, 58, 62, 67, 72, 205, 215, 351, 356, 371, 378, 383, 478, 484, 489, 497, 533, 544, 550, 551, 554, 555, 582, 654, 661, 664, 668, 670, 676, 679, 681, 683], "doesn": 673, "doi": [678, 682], "domain": [0, 11, 20, 26, 30, 37, 47, 53, 55, 57, 58, 60, 62, 63, 65, 67, 68, 70, 72, 82, 83, 98, 103, 108, 211, 233, 256, 620, 632, 640, 644, 661, 681, 683, 684, 685, 686], "domin": 31, "don": [661, 674, 682, 684], "done": [7, 17, 27, 43, 623, 635, 643, 652, 676, 683, 684, 685, 686], "dot": [53, 207, 229, 241, 253, 262, 662, 664, 668, 675, 681, 683, 685, 686], "down": 652, "download": [661, 664, 670, 680], "downsampl": 670, "dq": [55, 60, 65, 70, 683, 684], "dqdt": [213, 235, 258], "draw": [280, 293, 306, 319, 332, 345, 397, 411, 425, 439, 453, 467, 509, 518, 615, 617, 620, 621, 622, 626, 671], "draw_oper": 615, "drawn": 622, "driven": [670, 677, 678, 681, 682], "driver": [135, 155, 169], "drom": 684, "drop": 51, "dspace": [678, 682], "dt": [0, 56, 61, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 662, 669, 683, 684, 685, 686], "dtype": [661, 684], "due": [49, 683, 685, 686], "duff": 682, "dure": [559, 560, 563, 568, 569, 572, 573, 577, 578, 581, 586, 588, 592, 593, 597, 598, 601, 602, 606, 607, 610, 611, 620, 621, 632, 633, 640, 641, 670], "dx": [682, 683, 684, 685, 686], "dx2inv": [685, 686], "dynam": [215, 221, 238, 245, 259, 265, 664, 667, 668, 670, 677, 678, 681, 682, 683, 684], "e": [0, 1, 11, 20, 21, 30, 31, 46, 47, 48, 51, 52, 99, 122, 159, 173, 183, 193, 205, 207, 209, 213, 215, 219, 226, 229, 231, 235, 237, 238, 243, 249, 253, 255, 258, 264, 268, 272, 281, 285, 294, 298, 307, 311, 320, 324, 333, 337, 351, 378, 384, 395, 398, 409, 412, 423, 426, 437, 440, 451, 454, 465, 479, 484, 498, 545, 546, 547, 566, 584, 595, 613, 614, 621, 624, 633, 641, 661, 662, 663, 664, 667, 668, 670, 673, 674, 675, 676, 678, 682, 683, 684, 685, 686], "e2": [], "e202200049": 682, "e_": 669, "each": [0, 1, 3, 4, 6, 35, 49, 56, 58, 61, 66, 71, 96, 101, 106, 109, 115, 116, 118, 122, 129, 131, 135, 141, 145, 151, 155, 159, 162, 163, 165, 169, 173, 177, 179, 183, 189, 193, 199, 204, 207, 208, 209, 213, 217, 218, 219, 223, 225, 229, 230, 231, 235, 241, 242, 243, 247, 253, 254, 255, 258, 262, 263, 264, 267, 268, 270, 272, 274, 276, 279, 281, 283, 285, 287, 289, 292, 294, 296, 298, 300, 302, 305, 307, 309, 311, 313, 315, 318, 320, 322, 324, 326, 328, 331, 333, 335, 337, 339, 341, 344, 349, 359, 363, 376, 387, 401, 415, 429, 443, 457, 471, 482, 501, 521, 525, 537, 539, 545, 546, 547, 557, 566, 584, 586, 588, 589, 594, 599, 613, 614, 619, 620, 621, 624, 631, 632, 633, 639, 640, 641, 654, 661, 662, 664, 667, 668, 669, 670, 673, 674, 679, 681, 682, 683, 684, 685, 686], "earlier": 683, "earn": [678, 682], "earth": [678, 682], "easier": 673, "easili": 661, "east": 682, "econom": 661, "edit": 674, "edp": 682, "edu": [678, 682], "effect": [663, 670, 685], "effici": [31, 49, 360, 363, 522, 525, 679, 681, 682, 683, 685], "egg": 679, "eigendecomposit": [31, 49], "eigenvalu": [31, 49, 679], "eigenvector": 31, "eigh": [31, 49, 679], "eigvecst": 49, "either": [31, 54, 59, 64, 69, 82, 155, 169, 279, 292, 305, 318, 331, 344, 394, 408, 422, 436, 450, 464, 508, 662, 674, 684], "elaps": [652, 683], "electron": 682, "element": [661, 670, 682, 683, 686], "elementari": 686, "elementwis": [226, 229, 232, 237, 238, 241, 244, 249, 253, 262, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465, 557, 668, 670], "elizabeth": [678, 682], "ell": [40, 268, 269, 270, 272, 274, 275, 277, 281, 282, 283, 285, 287, 288, 290, 294, 295, 296, 298, 300, 301, 303, 307, 308, 309, 311, 313, 314, 316, 320, 321, 322, 324, 326, 327, 329, 333, 334, 335, 337, 339, 340, 342, 346, 347, 349, 357, 358, 363, 366, 373, 374, 376, 384, 385, 389, 390, 398, 399, 403, 404, 412, 413, 417, 418, 426, 427, 431, 432, 440, 441, 445, 446, 454, 455, 459, 460, 468, 469, 471, 473, 479, 482, 490, 498, 499, 504, 510, 511, 515, 519, 520, 525, 528, 534, 535, 537, 539, 661, 667, 668, 669, 683, 684], "ell_2": 685, "els": [661, 668, 670, 684], "elsevi": 682, "elsewher": 676, "empir": 661, "empti": 664, "empty_lik": 670, "en": 669, "enabl": [274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 661], "enact": 661, "enclos": [], "encod": [21, 623, 635, 643, 661, 679], "encount": 683, "end": [1, 155, 169, 183, 272, 285, 298, 311, 324, 337, 349, 359, 363, 376, 471, 482, 521, 525, 537, 557, 566, 575, 584, 661, 662, 663, 664, 667, 668, 669, 670, 675, 679, 681, 683, 684, 685, 686], "energi": [31, 38, 39, 41, 48, 51, 661, 682, 683, 684], "enforc": [681, 682, 684], "engappai": 682, "engin": [68, 670, 678, 682], "enhanc": 682, "enrich": 683, "ensur": [31, 674, 676, 679], "entir": [566, 584, 680, 684, 685, 686], "entri": [0, 2, 3, 4, 7, 8, 14, 21, 23, 24, 31, 33, 34, 40, 53, 114, 122, 155, 159, 161, 169, 173, 205, 215, 229, 237, 241, 249, 253, 262, 268, 275, 279, 280, 281, 288, 292, 293, 294, 301, 305, 306, 307, 314, 318, 319, 320, 327, 331, 332, 333, 340, 344, 345, 346, 351, 355, 356, 357, 370, 371, 373, 378, 382, 383, 384, 390, 394, 397, 398, 404, 408, 411, 412, 418, 422, 425, 426, 432, 436, 439, 440, 446, 450, 453, 454, 460, 464, 467, 468, 477, 478, 479, 482, 484, 486, 488, 489, 494, 498, 504, 506, 508, 509, 515, 518, 519, 532, 533, 534, 543, 544, 557, 560, 566, 569, 578, 584, 586, 588, 598, 607, 613, 615, 624, 654, 661, 662, 664, 667, 669, 670, 675, 679, 681, 682, 683, 684, 685], "enumer": [683, 684, 685], "env": [674, 680], "environ": [673, 674, 676, 680], "epsilon": 661, "epsilon_r": [41, 51], "equal": [31, 46, 359, 483, 493, 503, 514, 661], "equat": [109, 122, 135, 145, 155, 169, 183, 193, 205, 211, 226, 233, 250, 256, 479, 490, 661, 663, 664, 667, 668, 673, 677, 678, 681, 682], "equidist": [683, 684, 685, 686], "equip": 661, "equival": [7, 17, 27, 43, 155, 169, 268, 281, 294, 307, 320, 333, 357, 370, 519, 532, 566, 577, 623, 635, 643, 667, 670], "err": [683, 686], "error": [0, 8, 18, 28, 40, 44, 49, 51, 54, 56, 61, 66, 71, 119, 132, 142, 152, 166, 180, 183, 190, 200, 214, 224, 236, 248, 356, 371, 383, 478, 489, 497, 533, 544, 545, 546, 547, 620, 621, 632, 633, 640, 641, 652, 659, 661, 662, 664, 668, 672, 676, 679, 681, 682, 684, 685, 686], "error_": 669, "error_intrus": 685, "error_opinf": 685, "error_project": 685, "erspect": 682, "esaim": 682, "esim": [55, 60, 65, 70], "especi": 663, "essenti": [63, 221, 245, 265, 673], "estim": [53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 556, 565, 574, 583, 594, 603, 612, 615, 619, 620, 621, 628, 631, 632, 636, 639, 640, 679, 682, 685, 686], "etc": [55, 60, 65, 70, 145, 661, 662, 670, 673, 679, 680], "etna_vol56s28": 682, "euclidean": [31, 49, 546, 566], "euler": [663, 684], "euler_pod": 661, "euler_scal": 684, "euler_shift": 684, "euler_transform": [661, 684], "eulerlift": [663, 684], "evalu": [58, 60, 213, 223, 229, 231, 233, 234, 235, 241, 243, 245, 246, 247, 253, 255, 256, 258, 262, 264, 265, 267, 268, 269, 270, 275, 280, 281, 282, 283, 288, 293, 294, 295, 296, 301, 306, 307, 308, 309, 314, 319, 320, 321, 322, 327, 332, 333, 334, 335, 340, 345, 358, 360, 384, 385, 389, 390, 397, 398, 399, 403, 404, 411, 412, 413, 417, 418, 425, 426, 427, 431, 432, 439, 440, 441, 445, 446, 453, 454, 455, 459, 460, 467, 498, 499, 504, 509, 511, 515, 518, 522, 535, 622, 634, 642, 661, 662, 667, 668, 676, 681, 684, 685], "evalut": [273, 286, 299, 312, 325, 338, 388, 402, 416, 430, 444, 458, 502, 513], "even": [57, 62, 67, 72, 661, 679, 683, 684, 685], "eventu": [661, 683], "everi": [65, 615, 661, 662, 668, 683, 685, 686], "evolut": [684, 685, 686], "evolv": 684, "ex": 661, "exact": [109, 122, 155, 169, 682, 683], "exactli": [31, 46], "examin": 683, "exampl": [12, 53, 55, 60, 65, 70, 94, 99, 159, 173, 204, 212, 222, 257, 266, 346, 357, 360, 361, 364, 373, 468, 479, 490, 510, 519, 522, 523, 526, 534, 604, 613, 614, 615, 624, 632, 652, 655, 656, 667, 674, 676, 683, 684, 685, 686], "exce": 681, "except": [268, 281, 294, 307, 320, 333, 627, 661], "exclud": [73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90], "exclus": 667, "execut": [673, 674, 676, 679], "exhibit": 663, "exist": [9, 29, 45, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 562, 571, 580, 600, 609, 627, 656, 664, 666, 668, 679, 685], "exit": 676, "exp": [661, 664, 685, 686], "expand": 679, "expand_cub": 679, "expand_entri": 679, "expand_quadrat": 679, "expans": [268, 270, 276, 277, 279, 281, 283, 289, 290, 292, 294, 296, 302, 303, 305, 307, 309, 315, 316, 318, 320, 322, 328, 329, 331, 333, 335, 341, 342, 344, 668], "expect": [356, 371, 383, 478, 489, 497, 533, 544, 681, 683], "experi": [670, 683, 685], "experienc": 681, "experiment": [682, 685], "expert": 674, "explain": 683, "explan": [207, 217], "explicit": [211, 233, 256], "explicitli": [21, 557, 566, 575, 681, 683, 684, 685], "explor": 682, "export": 672, "exposit": 673, "express": [7, 17, 27, 43, 622, 623, 634, 635, 642, 643, 663, 668, 683], "extend": 682, "extens": [119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248], "extern": [479, 498, 510, 620, 621, 632, 633, 640, 641, 667, 668, 677], "extmath": 31, "extra": [620, 632, 640], "extrac": 684, "extract": [5, 212, 222, 257, 266, 587, 591, 619, 631, 639, 661, 662, 664, 668, 670, 681, 683], "extrapol": [58, 662], "ey": 668, "f": [40, 183, 193, 204, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 654, 661, 662, 664, 669, 670, 681, 682, 683, 684, 685, 686], "f841": 676, "f_": [389, 403, 417, 431, 445, 459], "f_project": 661, "facilit": [615, 668, 672, 679], "fact": [683, 685, 686], "factor": [212, 222, 257, 266, 557, 566, 614, 620, 621, 632, 633, 640, 641], "fail": [98, 103, 108, 594, 654, 674, 676, 684], "fall": [682, 684], "fals": [8, 9, 18, 19, 28, 29, 44, 45, 50, 51, 56, 61, 66, 71, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 268, 278, 279, 281, 291, 292, 294, 304, 305, 307, 317, 318, 320, 330, 331, 333, 343, 344, 354, 356, 369, 371, 381, 383, 384, 393, 394, 398, 407, 408, 412, 421, 422, 426, 435, 436, 440, 449, 450, 454, 463, 464, 476, 478, 487, 489, 496, 497, 507, 508, 517, 531, 533, 542, 544, 546, 550, 551, 553, 554, 555, 557, 559, 560, 562, 563, 564, 566, 568, 569, 571, 572, 573, 577, 578, 580, 581, 582, 586, 588, 590, 592, 593, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 618, 619, 620, 621, 624, 627, 630, 631, 632, 633, 638, 639, 640, 641, 646, 650, 652, 654, 656, 661, 664, 668, 669, 670, 683, 684], "famili": [211, 233, 256], "familiar": [668, 674], "farca": [678, 682], "farcas2023parametr": 682, "farcas2024distribut": [], "farcas2024domaindecomposit": 682, "farcas2025distribut": 682, "farcas2025parallel": 682, "farca\u015f": 682, "fast": 683, "faster": [231, 235, 243, 247, 255, 258, 264, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 360, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 522, 683], "fdifftol": 497, "feasibl": 686, "featur": [668, 670, 679, 682], "feedback": 676, "feel": 679, "fein": 682, "few": [56, 61, 66, 71, 661, 663, 667, 674, 680, 681, 683, 684, 685, 686], "fhat": [205, 207, 208, 209, 213, 215, 217, 218, 219, 223, 226, 230, 231, 235, 238, 242, 243, 247, 250, 254, 255, 258, 263, 264, 267, 667], "fhat_": [274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459], "fidel": [668, 683], "field": [], "fifth": [68, 77, 89], "fig": [670, 683, 684, 685], "figsiz": 684, "figur": [26, 37, 38, 40, 41, 42, 48, 51, 52, 673, 683], "filanova": 682, "filanova2023mechan": 682, "file": [6, 9, 16, 19, 25, 29, 36, 45, 113, 119, 126, 132, 139, 142, 149, 152, 160, 166, 174, 180, 187, 190, 197, 200, 210, 214, 220, 224, 232, 236, 244, 248, 276, 278, 289, 291, 302, 304, 315, 317, 328, 330, 341, 343, 352, 354, 367, 369, 379, 381, 391, 393, 405, 407, 419, 421, 433, 435, 447, 449, 461, 463, 474, 476, 485, 487, 495, 496, 505, 507, 516, 517, 529, 531, 540, 542, 552, 553, 561, 562, 570, 571, 579, 580, 589, 599, 600, 608, 609, 625, 627, 652, 653, 655, 656, 661, 664, 666, 668, 670, 672, 673, 674, 676, 679], "file_to_read_from": 655, "file_to_save_to": 656, "fileexistserror": [9, 29, 45, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 562, 571, 580, 600, 609, 656], "final": [225, 661, 668, 674, 680, 686], "find": [664, 668], "fine": 673, "finer": [98, 103, 108, 594], "finit": [0, 63, 64, 68, 69, 82, 83, 98, 103, 108, 356, 371, 383, 478, 489, 497, 533, 544, 556, 565, 574, 583, 594, 603, 612, 661, 668, 669, 681, 682, 683, 684, 685, 686], "first": [2, 3, 4, 7, 8, 50, 53, 54, 58, 59, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 225, 231, 233, 235, 243, 245, 247, 255, 256, 258, 264, 265, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 586, 595, 654, 661, 662, 668, 670, 673, 677, 679, 680, 681, 682, 684, 685], "first1": [], "first2": [], "fit": [1, 12, 31, 212, 222, 225, 257, 266, 560, 563, 564, 566, 569, 572, 573, 577, 584, 604, 661, 664, 667, 668, 679, 681, 683, 684, 685, 686], "fit_basi": [618, 619, 620, 621, 630, 631, 632, 633, 638, 639, 640, 641, 683], "fit_regselect": 679, "fit_regselect_": 679, "fit_regselect_continu": [621, 633, 641, 644, 679, 684], "fit_regselect_discret": [620, 632, 640, 648, 679, 684], "fit_transform": [560, 563, 564, 566, 569, 572, 573, 604, 618, 619, 620, 621, 630, 631, 632, 633, 638, 639, 640, 641, 661, 670], "five": [77, 89], "fix": [228, 240, 252, 261, 384, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 662, 667, 679, 683, 685, 686], "flag": [621, 633, 641], "flat": 684, "flatten": 670, "fld": 682, "float": [0, 8, 18, 28, 31, 35, 38, 40, 41, 42, 44, 46, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 115, 122, 128, 135, 136, 146, 155, 156, 159, 162, 169, 170, 173, 176, 184, 194, 202, 205, 209, 211, 213, 215, 228, 231, 233, 235, 240, 252, 255, 256, 258, 261, 269, 273, 275, 282, 286, 288, 295, 299, 301, 308, 312, 314, 321, 325, 327, 334, 338, 340, 351, 378, 385, 388, 390, 399, 402, 404, 413, 416, 418, 427, 430, 432, 441, 444, 446, 455, 458, 460, 484, 494, 497, 499, 502, 504, 511, 513, 515, 545, 546, 547, 556, 557, 565, 574, 583, 594, 603, 612, 613, 620, 621, 631, 632, 633, 640, 641, 644, 648, 652, 654, 679], "float64": [661, 683], "flore": 682, "flow": [661, 664, 682, 683, 684, 685, 686], "fluid": [682, 684], "flutter": 682, "fly": [661, 679], "fo": 684, "focu": 682, "focus": [673, 685], "folder": [652, 673, 676], "follow": [58, 114, 127, 155, 161, 169, 175, 217, 221, 241, 245, 262, 265, 613, 615, 620, 621, 628, 632, 633, 636, 640, 641, 654, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686], "fom": [681, 684, 685, 686], "fom_deriv": 684, "fomtim": 683, "fontsiz": 683, "forbeniu": 685, "fork": 674, "form": [21, 58, 615, 628, 636, 662, 663, 664, 668, 681, 683, 684, 685, 686], "format": [119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 673, 684], "formatt": [652, 676], "formul": 145, "formula": [211, 233, 256, 566, 686], "forthcom": 686, "forum": [678, 682], "forward": [68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 221, 245, 265, 644, 648, 662, 679, 684], "found": 680, "four": [76, 88, 661], "fourier": 661, "fourier_basi": 661, "fourth": [68, 76, 80, 88, 92], "frac": [8, 18, 28, 40, 44, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 106, 114, 127, 161, 175, 275, 288, 301, 314, 327, 340, 351, 378, 390, 404, 418, 432, 446, 460, 484, 494, 504, 515, 557, 566, 613, 661, 662, 663, 668, 669, 670, 675, 683, 684, 685, 686], "framework": [676, 679, 682], "franci": 682, "free": [620, 632, 640, 654, 676, 679], "freedom": [1, 363, 525, 661, 681, 683, 684, 686], "freez": 680, "freitag": 682, "freitag2024stochast": 682, "frequenc": 670, "fresh": [674, 680], "frobeniu": [8, 18, 28, 44, 122, 169, 183, 193, 545, 547, 669, 681, 683, 685], "frobenius_error": [669, 683, 685, 686], "frobenius_norm": 669, "from": [5, 6, 12, 16, 21, 25, 35, 36, 49, 50, 53, 55, 60, 65, 70, 94, 97, 113, 126, 139, 149, 160, 174, 187, 197, 202, 207, 208, 210, 212, 217, 218, 220, 222, 225, 226, 229, 230, 232, 237, 238, 241, 242, 244, 249, 253, 254, 257, 262, 263, 266, 276, 280, 289, 293, 302, 306, 315, 319, 328, 332, 341, 345, 352, 360, 361, 364, 367, 372, 379, 384, 391, 393, 395, 396, 397, 398, 405, 407, 409, 410, 411, 412, 419, 421, 423, 424, 425, 426, 433, 435, 437, 438, 439, 440, 447, 449, 451, 452, 453, 454, 461, 463, 465, 466, 467, 474, 485, 495, 502, 505, 509, 513, 516, 518, 522, 523, 526, 529, 540, 552, 557, 561, 566, 570, 576, 577, 579, 587, 589, 591, 599, 604, 608, 613, 615, 617, 619, 620, 621, 622, 624, 625, 626, 628, 631, 632, 633, 636, 639, 640, 641, 644, 648, 655, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 686], "from_list": 684, "fromblock": [268, 279, 281, 292, 294, 305, 307, 318, 320, 331, 333, 344, 384, 394, 398, 408, 412, 422, 426, 436, 440, 450, 454, 464, 508, 668], "front": 661, "full": [1, 3, 5, 10, 12, 21, 31, 54, 59, 64, 69, 229, 241, 253, 262, 274, 287, 300, 313, 326, 339, 361, 364, 389, 403, 417, 431, 445, 459, 523, 526, 620, 621, 632, 633, 640, 641, 661, 662, 664, 668, 670, 673, 674, 675, 681, 682, 683], "full_matric": [664, 683, 684], "full_order_solv": [683, 684, 685, 686], "full_state_dimens": [1, 12, 21, 31, 661, 675, 679, 683, 684], "full_variable_s": [1, 2, 4, 7, 8], "fulli": [618, 619, 621, 630, 631, 632, 633, 638, 639, 640, 641, 648, 668, 670], "fun": [683, 684, 686], "func": 654, "function": [0, 8, 18, 28, 31, 38, 40, 41, 44, 48, 50, 51, 56, 61, 66, 71, 82, 204, 209, 211, 213, 219, 223, 231, 233, 235, 243, 247, 255, 256, 258, 264, 267, 268, 270, 271, 276, 277, 281, 283, 284, 289, 290, 294, 296, 297, 302, 303, 307, 309, 310, 315, 316, 320, 322, 323, 328, 329, 333, 335, 336, 341, 342, 356, 371, 383, 478, 479, 489, 490, 497, 498, 508, 510, 533, 544, 573, 593, 602, 611, 620, 621, 632, 633, 640, 641, 644, 652, 654, 661, 662, 668, 669, 670, 672, 673, 676, 679, 681, 683, 685, 686], "fundament": [683, 685], "further": [207, 217, 668, 686], "furthermor": [661, 681], "futur": 679, "fwd1": [68, 662], "fwd2": 68, "fwd3": 68, "fwd4": 68, "fwd5": 68, "fwd6": 68, "g": [48, 51, 52, 99, 204, 205, 215, 226, 237, 238, 249, 357, 361, 364, 365, 368, 370, 384, 395, 398, 409, 412, 423, 426, 437, 440, 451, 454, 465, 526, 661, 667, 670, 673, 674, 675, 682], "g_": [205, 215, 226, 238, 250, 259, 675], "ga": [661, 663, 684], "gabriel": [678, 682], "gain": 668, "galerkin": [356, 371, 383, 478, 489, 497, 533, 544, 668, 681, 683, 686], "gamma": [661, 663, 664, 675, 684], "gamma_1": [159, 173], "gamma_2": [159, 173], "gamma_3": [159, 173], "gamma_4": [159, 173], "gammadiag": 664, "gather": [661, 681, 683], "gaug": 676, "gaussian": [624, 682], "gc": [361, 364], "ge": [31, 46, 48, 49, 116, 122, 661, 670, 681], "geelen": 682, "geelen2022loc": 682, "geelen2023lat": 682, "geelen2023quadmanifold": 682, "geelen2024nonlinmanifold": 682, "gener": [58, 479, 490, 546, 661, 664, 668, 669, 673, 675, 676, 679, 683], "generaliz": 685, "geng": 682, "geng2024gradi": 682, "geng2025porthamiltonian": 682, "gesdd": [109, 122, 183, 193, 664, 683, 684], "get": [51, 101, 106, 231, 233, 235, 243, 245, 247, 255, 256, 258, 264, 265, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 483, 493, 499, 503, 504, 511, 514, 515, 655, 656, 661, 663, 668, 674, 677, 685, 686], "get_operator_regular": 679, "get_var": 670, "get_ylim": 684, "gg": 679, "gh": [673, 674], "ghat": [357, 358, 361, 363, 364, 365, 366, 368, 370, 398, 675], "ghat_": 281, "ghatta": 682, "ghattas2021acta": 682, "giovanni": 682, "git": [673, 674, 676, 680], "github": [673, 674, 680], "gitignor": 673, "give": [98, 103, 108, 661, 676, 681, 683], "given": [3, 14, 21, 23, 31, 33, 46, 48, 49, 50, 51, 52, 58, 99, 116, 118, 129, 131, 141, 151, 159, 163, 165, 173, 177, 179, 183, 189, 193, 199, 207, 208, 209, 211, 213, 217, 218, 219, 223, 229, 230, 231, 233, 235, 241, 242, 243, 247, 253, 254, 255, 256, 258, 262, 263, 264, 267, 269, 270, 273, 274, 275, 282, 283, 286, 287, 288, 295, 296, 299, 300, 301, 308, 309, 312, 313, 314, 321, 322, 325, 326, 327, 334, 335, 338, 339, 340, 347, 351, 358, 359, 361, 364, 374, 378, 385, 388, 389, 390, 399, 402, 403, 404, 413, 416, 417, 418, 427, 430, 431, 432, 441, 444, 445, 446, 455, 458, 459, 460, 469, 480, 483, 484, 491, 493, 494, 499, 502, 503, 504, 511, 513, 514, 515, 520, 521, 523, 526, 535, 551, 560, 566, 569, 575, 578, 588, 595, 598, 607, 613, 616, 619, 621, 629, 633, 637, 639, 641, 654, 661, 662, 664, 667, 668, 669, 670, 679, 681, 683, 684, 685, 686], "gkimisi": 682, "gkimisis2025spatiallyloc": 682, "glass": 677, "gleb": 682, "gmw22": [114, 127, 161, 175, 615, 620, 621, 661, 663, 671, 678, 679], "gn": 667, "goal": [53, 668, 681, 683, 684, 685, 686], "gogh": [], "gome": 682, "good": [664, 673, 683, 684], "googl": 673, "googlescholarid": [], "govern": [670, 677, 682], "goyal": 682, "goyal2021lqresnet": [], "goyal2023stablequad": [], "gq3": [361, 364], "gradient": [63, 682], "grai": 685, "gram": 661, "greater": [31, 46, 52], "greatli": 663, "grep": 680, "grid": [654, 661, 679, 683, 684, 685, 686], "gridsearch": 679, "gridsearch_onli": [620, 621, 632, 633, 640, 641, 654, 684], "group": [655, 656, 668, 673, 674, 676, 680], "gruber": 682, "gruber2023hamiltonian": 682, "gruber2025vari": 682, "gtild": [361, 364, 526], "guarante": [664, 670, 676], "gugercin": 678, "guid": [673, 674, 676, 679, 680], "guidanc": [661, 683], "guidelin": 673, "gundevia": 682, "guo": [678, 682], "guo2022bayesopinf": 682, "h": [204, 519, 523, 526, 527, 530, 532, 667, 668, 670, 681, 682, 684], "h5": [119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 655, 656], "h5py": [655, 656], "h_": [205, 215, 226, 238, 250, 259, 675], "ha": [4, 31, 159, 173, 204, 586, 624, 661, 662, 664, 667, 668, 670, 674, 676, 679, 680, 681, 684, 685], "hadamard": 557, "hadamard_input": 668, "hadamardinputoper": 668, "hadamardoper": 668, "hadamardtransform": 670, "halt": 652, "hamiltonian": 682, "hand": [109, 112, 122, 125, 135, 138, 145, 148, 155, 158, 169, 172, 183, 186, 193, 208, 209, 213, 218, 219, 223, 230, 231, 235, 242, 243, 247, 254, 255, 258, 263, 264, 267, 618, 619, 630, 631, 638, 639, 664, 667, 668, 675, 681, 683, 684], "handl": [31, 226, 238, 384, 398, 412, 426, 440, 454, 655, 656, 664, 670, 678, 681, 682], "happen": [681, 683], "harsh": 682, "hartmann": 682, "hat": [21, 359, 361, 363, 364, 521, 523, 525, 526, 661, 668, 675, 681, 683], "have": [1, 3, 56, 57, 61, 62, 66, 67, 71, 72, 372, 557, 560, 563, 564, 569, 572, 573, 584, 588, 615, 632, 633, 640, 641, 661, 662, 663, 667, 668, 669, 670, 672, 673, 676, 679, 681, 683, 684, 685, 686], "hb": 667, "hc": [523, 526], "hdf5": [6, 9, 16, 19, 25, 29, 36, 45, 113, 119, 126, 132, 139, 142, 149, 152, 160, 166, 174, 180, 187, 190, 197, 200, 210, 214, 220, 224, 232, 236, 244, 248, 276, 278, 289, 291, 302, 304, 315, 317, 328, 330, 341, 343, 352, 354, 367, 369, 379, 381, 391, 393, 405, 407, 419, 421, 433, 435, 447, 449, 461, 463, 474, 476, 485, 487, 495, 496, 505, 507, 516, 517, 529, 531, 540, 542, 552, 553, 561, 562, 570, 571, 579, 580, 589, 599, 600, 608, 609, 655, 656, 661, 664, 668, 670], "hdf5_loadhandl": [661, 668, 670], "hdf5_savehandl": [661, 668, 670], "head": [674, 677], "heat": [663, 664, 683, 684, 685, 686], "heiland": 682, "heliospher": [678, 682], "help": [661, 674, 683], "henc": [363, 525, 566, 573, 661, 662, 663, 668, 670, 681, 684, 685, 686], "henrik": 682, "henson": 682, "here": [31, 155, 169, 205, 208, 215, 218, 226, 230, 238, 242, 250, 254, 259, 263, 268, 272, 274, 281, 285, 287, 294, 298, 300, 307, 311, 313, 320, 324, 326, 333, 337, 339, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 482, 501, 661, 662, 664, 670, 677, 682, 685, 686], "hf": [655, 656, 661, 668, 670], "hhat": [159, 173, 205, 215, 440, 519, 520, 523, 525, 526, 527, 528, 530, 532, 615, 624, 663, 668, 670, 675, 681], "hhat_": 320, "high": [2, 3, 7, 13, 14, 17, 18, 21, 22, 23, 27, 28, 32, 33, 43, 44, 615, 618, 619, 620, 623, 628, 630, 631, 632, 633, 635, 636, 638, 639, 640, 643, 661, 668, 675, 681, 682, 683], "higher": 664, "highli": [31, 661, 670, 683], "hist": 670, "hl": [], "hline": [521, 668], "hoc": [55, 60, 65, 70], "hold": 670, "homebrew": 674, "homogen": [670, 683, 686], "hood": 683, "hook": [674, 676], "horizon": 681, "horizont": [268, 279, 281, 292, 294, 305, 307, 318, 320, 331, 333, 344, 384, 394, 398, 408, 412, 422, 426, 436, 440, 450, 454, 464, 508, 584, 595, 668], "how": [31, 49, 652, 661, 664, 677, 680, 681, 683, 684, 686], "howev": [58, 356, 371, 383, 478, 489, 497, 533, 544, 566, 661, 663, 668, 670, 683], "hq2": [523, 526], "hspace": 685, "ht": 670, "htild": [523, 526], "html": [546, 673, 676], "htmlcov": 676, "http": [669, 678, 680, 682], "huang": [678, 682], "hyeonghun": 682, "hyperparamet": [145, 159, 173, 212, 222, 257, 266, 620, 621, 632, 633, 640, 641, 661, 662, 664, 670, 679, 684], "hysic": [678, 682], "i": [0, 1, 7, 8, 11, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 103, 108, 109, 114, 115, 116, 118, 121, 122, 127, 128, 129, 131, 134, 135, 141, 144, 151, 154, 155, 159, 161, 162, 163, 165, 168, 169, 173, 175, 177, 179, 182, 183, 189, 192, 193, 199, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 217, 218, 219, 222, 223, 225, 226, 229, 230, 231, 233, 235, 238, 241, 242, 243, 247, 250, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 277, 281, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 307, 308, 311, 313, 314, 316, 320, 321, 324, 326, 327, 329, 333, 334, 337, 339, 340, 342, 349, 351, 356, 357, 359, 360, 361, 363, 364, 371, 376, 378, 383, 384, 385, 387, 389, 390, 393, 396, 398, 399, 401, 403, 404, 407, 410, 412, 413, 415, 417, 418, 421, 424, 426, 427, 429, 431, 432, 435, 438, 440, 441, 443, 445, 446, 449, 452, 454, 455, 457, 459, 460, 463, 466, 471, 478, 479, 482, 483, 484, 486, 489, 490, 493, 494, 497, 498, 499, 501, 503, 504, 506, 510, 511, 514, 515, 519, 521, 522, 523, 525, 526, 533, 537, 539, 544, 545, 546, 547, 548, 551, 556, 557, 558, 559, 560, 563, 564, 565, 566, 569, 572, 573, 574, 575, 576, 577, 578, 583, 584, 593, 594, 595, 602, 603, 604, 611, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 628, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 643, 644, 647, 648, 651, 652, 654, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686], "i_": 538, "i_m": 668, "i_r": [366, 528], "ic": 684, "icparam": 684, "id": 676, "idea": 682, "ideal": [661, 663, 684], "ident": [21, 31, 548, 620, 632, 640, 681], "identifi": [661, 676], "ieee": 682, "ignor": [155, 169, 615, 628, 636], "igor": 682, "iia": [211, 233, 256], "ij": [669, 681], "ik23": [670, 678], "ill": 683, "illustr": 683, "imag": 673, "iman": [], "immedi": 661, "impement": 661, "implement": [12, 94, 98, 103, 108, 121, 134, 144, 154, 168, 182, 192, 203, 351, 356, 371, 378, 383, 478, 484, 489, 497, 533, 544, 556, 565, 574, 583, 593, 594, 602, 603, 604, 611, 612, 624, 661, 662, 663, 664, 668, 670, 677, 679, 682, 683], "impli": 668, "implicit": [211, 233, 256], "import": [346, 357, 360, 361, 364, 373, 468, 519, 522, 523, 526, 534, 613, 614, 652, 661, 662, 663, 664, 667, 668, 670, 672, 681, 683, 684, 685, 686], "improv": [654, 661, 663, 670, 679, 681, 682, 683], "inaccess": 668, "inaccur": 683, "inbook": 682, "includ": [49, 145, 205, 215, 221, 245, 265, 663, 666, 668, 670, 674, 680, 681, 683, 684, 686], "incompress": [682, 684], "incorrectli": 679, "increas": [31, 49, 661, 681, 683], "independ": [109, 155, 229, 241, 253, 262, 661, 664, 668, 681, 682, 686], "index": [5, 21, 31, 38, 39, 40, 41, 42, 48, 51, 52, 566, 587, 661, 668, 673, 676, 677, 680, 683], "indic": [3, 14, 23, 33, 49, 99, 204, 372, 551, 560, 569, 578, 588, 598, 607, 616, 629, 637, 661, 667, 675, 681, 684, 685, 686], "individu": [1, 10, 229, 241, 253, 262, 548, 584, 591, 620, 621, 661, 667, 668, 670, 671, 679], "induc": [547, 661, 663, 681], "ineffici": 31, "inexact": 683, "inexpens": 681, "inf": [0, 654, 683], "infer": [53, 114, 120, 127, 133, 143, 145, 153, 161, 167, 175, 181, 191, 201, 204, 207, 212, 217, 222, 229, 241, 253, 257, 262, 266, 384, 396, 398, 410, 412, 424, 426, 438, 440, 452, 454, 466, 479, 490, 498, 510, 615, 624, 661, 662, 663, 667, 668, 670, 673, 674, 678, 679, 680, 682, 684], "inferno": 685, "infil": 652, "infin": 0, "infinit": 0, "info": 652, "inform": [566, 620, 621, 632, 633, 640, 641, 654, 668, 678, 682], "infrastructur": 676, "infti": 669, "ing": 673, "inherit": [12, 94, 372, 502, 513, 604, 661, 662, 663, 664, 668, 670, 679, 682], "init": 684, "init_param": 684, "initi": [1, 35, 211, 221, 232, 233, 244, 245, 256, 265, 276, 289, 302, 315, 328, 341, 391, 405, 419, 433, 447, 461, 584, 622, 634, 642, 644, 645, 648, 649, 658, 659, 661, 667, 668, 670, 672, 676, 679, 681, 684, 685, 686], "initial_condit": [644, 648, 667, 683, 684], "injector": [678, 682], "inner": [31, 49, 678, 682], "inner_product_matrix": 49, "inplac": [550, 551, 554, 555, 559, 560, 563, 564, 568, 569, 572, 573, 577, 578, 581, 582, 586, 588, 592, 593, 597, 598, 601, 602, 606, 607, 610, 611, 618, 630, 638, 670], "inproceed": 682, "input": [54, 55, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 159, 173, 204, 205, 207, 208, 209, 211, 213, 215, 217, 218, 219, 221, 223, 225, 226, 229, 230, 231, 233, 235, 238, 241, 242, 243, 245, 247, 250, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 269, 272, 274, 275, 277, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 308, 311, 313, 314, 316, 321, 324, 326, 327, 329, 333, 334, 337, 339, 340, 342, 347, 349, 351, 353, 358, 363, 366, 368, 372, 373, 374, 376, 378, 380, 385, 387, 389, 390, 392, 399, 401, 403, 404, 406, 412, 413, 415, 417, 418, 420, 427, 429, 431, 432, 434, 441, 443, 445, 446, 448, 454, 455, 457, 459, 460, 462, 469, 471, 473, 475, 479, 480, 482, 483, 484, 486, 490, 491, 493, 494, 499, 501, 503, 504, 506, 510, 511, 514, 515, 520, 525, 528, 530, 534, 535, 537, 539, 541, 557, 619, 620, 621, 631, 632, 633, 639, 640, 641, 644, 648, 662, 664, 667, 675, 677, 679, 681, 686], "input_": [219, 223, 243, 247, 264, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 347, 351, 358, 366, 374, 378, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 469, 473, 480, 484, 491, 494, 499, 504, 511, 515, 520, 528, 535, 537, 539, 668], "input_dimens": [159, 173, 205, 215, 226, 238, 250, 259, 294, 333, 372, 373, 412, 454, 483, 493, 503, 514, 534, 668, 675, 679, 683, 684], "input_func": [209, 211, 213, 231, 233, 235, 255, 256, 258, 681, 685], "input_funct": [620, 632, 640, 644, 667], "inputlist": 225, "inputmixin": 668, "inputoper": [205, 215, 226, 238, 250, 259, 294, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 412, 667, 668, 685], "inspect": 661, "instal": [674, 676, 677, 683], "instanc": [53, 502, 513, 615, 628, 636, 661, 668, 684, 685, 686], "instanti": [109, 122, 193, 595, 646, 650, 661, 668, 670, 679, 686], "instead": [109, 122, 159, 173, 231, 235, 243, 247, 255, 258, 264, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 546, 566, 661, 663, 669, 673, 676, 679, 683], "institut": [678, 682], "instruct": [653, 673, 679], "int": [5, 26, 31, 35, 36, 37, 38, 39, 40, 41, 42, 46, 48, 50, 51, 52, 57, 62, 67, 72, 82, 84, 159, 173, 193, 204, 221, 245, 265, 268, 277, 281, 290, 294, 303, 307, 316, 320, 329, 333, 342, 353, 356, 360, 368, 371, 380, 383, 392, 406, 420, 434, 448, 462, 475, 478, 486, 489, 497, 506, 522, 530, 533, 541, 544, 587, 620, 621, 633, 641, 648, 652, 684, 685], "int_": [0, 669], "integ": [3, 14, 23, 31, 33, 46, 99, 193, 268, 281, 294, 307, 320, 333, 551, 560, 569, 578, 588, 598, 607, 616, 629, 637, 652, 664, 683], "integr": [0, 211, 233, 256, 668, 669, 683, 684, 686], "intellig": 682, "intend": 676, "intepret": 155, "interact": [49, 534, 679], "interdisciplinari": 682, "interest": [669, 674, 680, 681], "interfac": 663, "interior": [683, 685, 686], "intern": [357, 363, 368, 370, 519, 525, 530, 532, 682, 684], "interp": 679, "interpconstantoper": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 667], "interpcontinuousmodel": [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 628, 667], "interpcubicoper": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 667], "interpderivativeestim": [59, 60, 61, 62, 662], "interpdiscretemodel": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 628], "interpinputoper": [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 667, 668], "interplinearoper": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 667], "interpol": [58, 60, 211, 226, 229, 232, 233, 237, 238, 241, 244, 249, 253, 256, 262, 384, 387, 389, 391, 393, 395, 398, 401, 403, 405, 407, 409, 412, 415, 417, 419, 421, 423, 426, 429, 431, 433, 435, 437, 440, 443, 445, 447, 449, 451, 454, 457, 459, 461, 463, 465, 661, 668, 679, 684], "interpolatedmodel": 668, "interpolationderivativeestim": 679, "interpolator_evalu": [226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465], "interpolatorclass": [58, 226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465, 662], "interpolatori": [229, 241, 253, 262, 389, 403, 417, 431, 445, 459, 679], "interpquadraticoper": [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 667], "interpret": [114, 127, 161, 175, 268, 279, 281, 292, 294, 305, 307, 318, 320, 331, 333, 344, 384, 394, 398, 408, 412, 422, 426, 436, 440, 450, 454, 464, 508, 661, 664, 670], "interpstateinputoper": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 667], "interv": [613, 670, 684, 685, 686], "introduc": [31, 663, 670, 677, 679, 681, 683], "introductori": [681, 683], "intrp": 58, "intrus": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 668, 677, 682, 683, 686], "intuit": 683, "invalid": 683, "invari": [664, 668, 681, 685], "invers": [114, 127, 161, 175, 557, 560, 569, 575, 578, 588, 598, 607, 613, 614, 624, 661, 670, 682, 684], "inverse_transform": [556, 565, 574, 583, 594, 603, 604, 612, 661, 670], "invert": 670, "invok": 673, "ionut": [678, 682], "ipynb": 673, "irina": 682, "isaac": 682, "isclos": 670, "issan": [678, 682], "issan2023shift": 682, "issn": [], "issu": [661, 676, 682], "iter": [6, 215, 217, 238, 241, 259, 262, 268, 276, 281, 289, 294, 302, 307, 315, 320, 328, 333, 341, 589, 599, 621, 633, 641, 648, 654, 683, 685, 686], "itertool": 684, "its": [21, 31, 58, 60, 112, 120, 125, 133, 138, 143, 148, 153, 158, 167, 172, 181, 186, 191, 201, 212, 222, 257, 266, 357, 370, 519, 532, 614, 618, 630, 638, 661, 662, 668, 670, 674, 679, 681, 683], "itself": [359, 363, 521, 525, 670], "j": [0, 31, 38, 40, 41, 46, 48, 51, 53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 101, 106, 207, 215, 217, 219, 223, 229, 238, 241, 243, 247, 253, 259, 262, 264, 267, 275, 288, 301, 314, 327, 340, 351, 359, 378, 390, 404, 418, 432, 446, 460, 482, 484, 494, 504, 515, 521, 545, 546, 566, 614, 619, 620, 621, 631, 632, 633, 639, 640, 641, 661, 662, 664, 668, 669, 670, 675, 678, 681, 682, 683, 684, 685, 686], "j058943": [678, 682], "j063715": 682, "jac": [209, 219, 231, 243, 255, 264, 275, 288, 301, 314, 327, 340, 351, 366, 378, 390, 404, 418, 432, 446, 460, 473, 484, 494, 504, 515, 528, 539], "jacobian": [356, 371, 383, 478, 489, 497, 533, 544, 667, 668], "jacobo": [], "jain": 682, "jain2021perform": 682, "jan": 682, "jasdeep": 682, "jcp": [678, 682], "jo": 682, "john": 682, "join": [1, 566, 584, 661, 670, 679], "joint": [1, 4, 5, 10, 584, 587, 591, 661], "joint_error": 661, "joint_pod": 661, "jointli": [661, 684], "jonathan": 682, "joseph": 682, "journal": [678, 682], "joyc": 682, "jr": 682, "ju": 682, "judici": 682, "jupyt": [666, 674], "jupyterbook": [673, 679], "just": 664, "k": [0, 4, 8, 15, 18, 28, 31, 34, 35, 38, 40, 41, 44, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 114, 122, 125, 127, 135, 138, 145, 148, 155, 158, 161, 169, 172, 175, 183, 186, 193, 207, 217, 272, 285, 298, 311, 324, 337, 349, 356, 359, 363, 371, 376, 383, 387, 401, 415, 429, 443, 457, 471, 478, 480, 482, 489, 491, 497, 501, 521, 525, 533, 537, 544, 545, 546, 547, 549, 557, 558, 566, 567, 568, 575, 576, 585, 586, 596, 597, 605, 606, 613, 614, 618, 619, 620, 621, 622, 630, 634, 638, 639, 640, 641, 642, 644, 661, 662, 664, 668, 669, 670, 675, 679, 681, 682, 683, 684, 685, 686], "k_": [229, 241, 253, 262, 668], "k_i": [225, 229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 501, 619, 620, 621, 631, 632, 633, 639, 640, 641, 668], "kang": 682, "kang2025semiconductor": 682, "kappa": 661, "kappa_r": [38, 48], "kara": 682, "karas\u00f6zen": 682, "karen": [678, 682], "keep": [652, 661, 668], "kei": [204, 670, 683, 684], "kept": 673, "keyword": [26, 31, 37, 58, 109, 122, 135, 155, 169, 183, 193, 622, 634, 642, 646, 650, 664, 679], "khatri": [363, 525, 537, 681], "khatri_rao": 668, "khodabakhshi": [678, 682], "khodabakhshi2022diffalg": 682, "kim": 682, "kim2025stateconstraint": 682, "kind": [661, 663, 683], "klau": 682, "knot": 662, "knowledg": [681, 683], "known": [205, 211, 215, 229, 233, 241, 253, 256, 262, 360, 384, 396, 398, 410, 412, 424, 426, 438, 440, 452, 454, 466, 479, 522, 668, 677, 681, 683, 686], "known_oper": 679, "koik": 682, "koike2024energi": 682, "kramer": [678, 682], "kramer2021quadst": 682, "kramer2024survei": 682, "kron": [357, 361, 364, 519, 523, 526, 534, 675], "kron2c": [675, 679], "kron2c_indic": 679, "kron3c": [675, 679], "kron3c_indic": 679, "kron_indic": 360, "kroneck": [357, 359, 360, 361, 363, 364, 519, 521, 522, 523, 525, 526, 670, 675, 679, 681], "kutta": [211, 233, 256, 684], "kwarg": [24, 26, 37, 38, 48, 51, 52, 82, 622, 634, 642], "l": [0, 669, 670, 678, 682, 683, 684, 685, 686], "l2": [547, 679], "l2decoupledsolv": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 615, 632, 633, 640, 641, 664, 679], "l2dsolver": 664, "l2solver": [109, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 159, 160, 173, 174, 187, 205, 212, 215, 222, 257, 266, 615, 632, 633, 640, 641, 664, 667, 679, 681, 683, 684, 686], "l2solverdecoupl": 679, "l_2": [109, 122], "la": [661, 668, 683], "label": [12, 21, 31, 548, 557, 566, 575, 595, 604, 654, 661, 683, 684, 685, 686], "label1": 685, "label2": 685, "lagrangian": 682, "lambda": [122, 127, 128, 129, 268, 281, 294, 307, 320, 333, 661, 664, 668, 683, 685, 686], "lambda_i": [109, 114, 115, 116, 664], "lapack": [109, 122, 135, 155, 169, 183, 193], "lapack_driv": [109, 122, 135, 155, 169, 183, 193, 664, 683, 684], "larg": [31, 668, 675, 678, 682, 683], "larger": [31, 661], "largest": 654, "last": [79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 212, 222, 225, 257, 266, 682, 685], "last1": [], "last2": [], "latent": [2, 3, 7, 13, 14, 17, 22, 23, 27, 32, 33, 43, 616, 618, 623, 629, 630, 635, 637, 638, 643, 661, 682], "later": [268, 281, 294, 307, 320, 333, 384, 398, 412, 426, 440, 454, 652, 668, 683], "laura": 682, "law": [663, 684], "ld": 682, "ldot": [1, 21, 31, 46, 53, 91, 92, 93, 109, 115, 116, 118, 129, 131, 141, 151, 155, 162, 163, 165, 177, 179, 189, 199, 229, 241, 253, 262, 268, 272, 281, 285, 294, 298, 307, 311, 320, 324, 333, 337, 384, 387, 389, 398, 401, 403, 412, 415, 417, 426, 429, 431, 440, 443, 445, 454, 457, 459, 501, 539, 584, 595, 624, 661, 662, 664, 668, 669, 670, 681, 683, 684, 685, 686], "le": [51, 193, 661], "lead": [31, 683, 686], "learn": [21, 53, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 109, 122, 135, 145, 155, 169, 183, 193, 207, 217, 229, 241, 253, 262, 490, 510, 557, 566, 567, 568, 569, 572, 573, 576, 577, 585, 586, 588, 592, 593, 596, 597, 598, 601, 602, 605, 606, 607, 610, 611, 613, 615, 624, 661, 662, 663, 664, 667, 670, 675, 677, 678, 679, 681, 682, 683, 684, 685], "learnabl": [490, 510], "least": [109, 112, 122, 125, 135, 145, 155, 158, 159, 169, 172, 173, 183, 191, 193, 204, 205, 215, 226, 229, 234, 238, 241, 246, 250, 253, 259, 262, 510, 661, 667, 668, 679, 681, 683, 685, 686], "left": [1, 31, 35, 41, 49, 50, 51, 109, 112, 114, 122, 125, 127, 135, 138, 145, 148, 155, 158, 161, 169, 172, 175, 183, 186, 193, 207, 208, 217, 218, 229, 230, 241, 242, 253, 254, 262, 263, 272, 281, 285, 294, 298, 307, 311, 320, 324, 333, 337, 349, 359, 363, 376, 471, 482, 521, 525, 537, 557, 575, 584, 618, 619, 630, 631, 638, 639, 661, 662, 663, 664, 668, 669, 673, 674, 676, 681, 683, 684, 685, 686], "leftbc": [683, 685], "leftvec": [31, 35], "legend": [661, 683, 685, 686], "len": [670, 683, 684, 685, 686], "length": [661, 670], "lent": 682, "leonida": 682, "less": [31, 46, 49, 98, 103, 108, 556, 565, 574, 583, 594, 603, 612, 661, 679, 683], "let": [661, 664, 668, 681, 683, 684, 685, 686], "leyman": 682, "lh": [618, 619, 630, 631, 638, 639], "lhs_encod": [618, 630, 638], "lhs_matrix": [109, 112, 122, 125, 135, 138, 145, 148, 155, 158, 169, 172, 183, 186, 193, 196, 664, 679, 683, 684], "li": [661, 670], "lib": 683, "librari": [682, 683], "lie": 58, "lift": [94, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 615, 628, 636, 662, 677, 678, 679, 681, 684], "lift_ddt": [94, 98, 103, 108, 662, 663], "lifted_st": [95, 97, 100, 102, 105, 107, 663], "lifter": [615, 628, 636, 679, 684], "liftertempl": [95, 96, 97, 98, 662, 663, 684], "lighter": 683, "lightli": [670, 681], "like": [663, 668, 674, 676, 679, 680, 683, 684], "lili": 682, "limit": [31, 652, 661, 662, 683, 684, 685, 686], "linalg": [31, 48, 49, 51, 52, 109, 122, 135, 143, 155, 169, 183, 193, 546, 661, 664, 668, 683, 684], "line": [674, 676, 680], "linear": [21, 31, 48, 204, 274, 287, 300, 307, 313, 326, 339, 373, 389, 403, 417, 426, 431, 445, 459, 468, 534, 615, 664, 668, 669, 670, 675, 681, 682, 683, 685, 686], "linearbasi": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 661, 679], "linearli": 668, "linearndinterpol": [226, 237, 238, 249, 384, 398, 412, 426, 440, 454], "linearoper": [205, 215, 226, 238, 250, 259, 307, 373, 426, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 667, 668, 683, 684, 685], "linearsegmentedcolormap": 684, "linestyl": 685, "linewidth": [684, 685], "link": [670, 674, 680, 681], "linspac": [556, 565, 574, 583, 603, 612, 661, 662, 683, 684, 685, 686], "lint": 676, "linter": 676, "linux": 652, "list": [1, 10, 38, 40, 41, 42, 48, 51, 52, 56, 61, 66, 71, 114, 127, 155, 159, 161, 173, 175, 204, 205, 215, 225, 226, 229, 238, 241, 250, 253, 259, 262, 268, 272, 279, 281, 285, 292, 294, 298, 305, 307, 311, 318, 320, 324, 331, 333, 337, 344, 384, 387, 394, 396, 398, 401, 408, 410, 412, 415, 422, 424, 426, 429, 436, 438, 440, 443, 450, 452, 454, 457, 464, 466, 501, 508, 584, 591, 619, 620, 621, 622, 624, 631, 632, 633, 634, 639, 640, 641, 642, 644, 648, 654, 662, 667, 668, 669, 673, 674, 677, 679, 682, 685], "list_of_input": [269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515], "list_of_st": [243, 247, 264, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515], "lit_model": 668, "literatur": [661, 673, 674, 677, 679], "littl": 673, "ll": [661, 681, 683, 685, 686], "load": [119, 121, 132, 134, 142, 144, 152, 154, 166, 168, 180, 182, 190, 192, 200, 203, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 356, 371, 383, 393, 407, 421, 435, 449, 463, 478, 489, 497, 533, 544, 661, 664, 668, 670, 679], "loadfil": [6, 16, 25, 36, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 367, 379, 391, 405, 419, 433, 447, 461, 474, 485, 495, 505, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 625, 655, 661, 664, 668, 670], "loc": [3, 14, 23, 33, 551, 560, 569, 578, 588, 598, 607, 616, 629, 637, 661, 670, 683, 685, 686], "local": [58, 674, 676, 680, 682], "locat": [3, 14, 23, 33, 616, 629, 637, 661, 670, 683, 684, 685], "log": [652, 653, 672, 679], "logarithm": [654, 686], "logfil": [652, 653], "logspac": [664, 684, 686], "long": 652, "longer": [679, 681, 683], "longleftrightarrow": [664, 668], "longrightarrow": 31, "longstand": 679, "look": [673, 679, 683, 685], "low": [2, 3, 7, 13, 14, 17, 21, 22, 23, 27, 31, 32, 33, 43, 193, 202, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 547, 615, 616, 618, 619, 620, 623, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 668, 669, 675, 682, 683, 684], "lower": [664, 670, 675, 683, 685], "lp": [0, 546], "lp_error": [669, 681, 683, 684, 685], "lp_space": 669, "lqresnet": [], "lsc": 684, "lscmap": 684, "lsoda": [211, 233, 256], "lstsq": [135, 143, 155, 169, 205, 212, 215, 222, 226, 238, 250, 257, 259, 266, 615, 632, 633, 640, 641, 667, 668, 677, 679, 681, 683, 684, 686], "lstsq_exampl": 664, "lti": [662, 664, 668, 681], "lti_model": 668, "luca": 682, "lw": [684, 685, 686], "m": [54, 57, 59, 62, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 204, 205, 207, 208, 209, 211, 213, 215, 217, 218, 219, 221, 223, 225, 226, 229, 230, 231, 233, 235, 238, 241, 242, 243, 245, 247, 250, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 269, 272, 274, 275, 277, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 308, 311, 313, 314, 316, 321, 324, 326, 327, 329, 334, 337, 339, 340, 342, 347, 349, 351, 353, 356, 358, 363, 366, 368, 371, 372, 373, 374, 376, 378, 380, 382, 383, 385, 387, 389, 390, 392, 399, 401, 403, 404, 406, 412, 413, 415, 417, 418, 420, 427, 429, 431, 432, 434, 441, 443, 445, 446, 448, 455, 457, 459, 460, 462, 469, 471, 473, 475, 478, 479, 480, 482, 483, 484, 486, 489, 490, 491, 493, 494, 499, 501, 503, 504, 506, 510, 511, 514, 515, 520, 525, 528, 530, 533, 534, 535, 537, 538, 539, 541, 544, 619, 621, 631, 633, 639, 641, 648, 662, 664, 668, 673, 674, 675, 679, 680, 681, 682, 684, 685], "m2an": 682, "machin": [652, 678, 682], "maco": 674, "made": [356, 371, 383, 478, 489, 533, 544, 673, 674, 676, 679], "magnitud": 661, "mai": [0, 31, 53, 82, 145, 159, 173, 207, 217, 229, 241, 253, 262, 619, 620, 621, 631, 632, 633, 639, 640, 641, 652, 661, 662, 663, 664, 667, 668, 670, 679, 680, 681, 683], "main": [665, 671, 674, 679, 681], "maintain": [620, 621, 632, 633, 640, 641, 673, 674], "major": 677, "make": [111, 124, 137, 147, 157, 171, 185, 195, 206, 216, 227, 239, 251, 260, 662, 664, 668, 674, 676, 677, 679, 680, 681, 683, 685], "makefil": [674, 676], "makefiletutori": 674, "manag": [652, 672, 674, 679], "mani": [50, 661, 670, 672, 682, 686], "manifold": [], "manufactur": 682, "manvelyan": 682, "map": [2, 3, 13, 14, 22, 23, 32, 33, 55, 60, 65, 70, 99, 100, 102, 104, 105, 107, 209, 213, 231, 235, 255, 258, 480, 491, 616, 618, 619, 620, 621, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 644, 654, 661, 670, 679, 683, 684], "mappabl": 684, "mapsto": [21, 22, 23, 32, 33, 548, 557, 566, 575, 661], "marco": 682, "mark": [38, 40, 41, 42, 676], "markdown": 673, "markovian": 682, "marqu": [678, 682], "martin": 682, "mask": [360, 522, 679], "massachusett": [678, 682], "master": 682, "mastersthesi": 682, "match": [31, 204, 664, 679, 683], "materi": [673, 682, 686], "math": 673, "mathbb": [31, 662, 668, 679, 684, 685], "mathbf": [575, 661, 669, 670, 675, 679, 681, 683], "mathcal": [8, 18, 28, 44, 573, 593, 595, 602, 611, 624, 664, 670, 681, 683, 686], "mathemat": [50, 661, 673, 682], "mathsf": [122, 169, 183, 683], "matplotlib": [26, 37, 38, 40, 41, 42, 48, 51, 52, 657, 661, 670, 672, 683, 684, 685, 686], "matric": [31, 114, 115, 117, 127, 130, 138, 140, 148, 150, 155, 161, 162, 164, 175, 178, 183, 188, 196, 198, 268, 271, 279, 281, 284, 292, 294, 297, 305, 307, 310, 318, 320, 323, 331, 333, 336, 344, 359, 384, 394, 398, 408, 412, 422, 426, 436, 440, 450, 454, 464, 521, 557, 615, 624, 664, 668, 679, 684, 685, 686], "matrix": [2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 18, 21, 22, 23, 27, 28, 31, 32, 33, 34, 35, 40, 43, 44, 46, 48, 49, 50, 51, 52, 109, 110, 112, 114, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 131, 133, 135, 136, 138, 141, 143, 145, 146, 148, 151, 153, 155, 156, 158, 159, 161, 162, 163, 165, 167, 169, 170, 172, 173, 175, 176, 177, 179, 181, 183, 184, 186, 189, 191, 193, 194, 199, 201, 204, 205, 207, 212, 215, 217, 222, 225, 229, 241, 253, 257, 262, 266, 268, 272, 277, 281, 285, 290, 294, 298, 303, 307, 311, 316, 320, 324, 329, 333, 337, 342, 349, 357, 359, 361, 363, 364, 368, 370, 373, 376, 380, 382, 384, 387, 392, 395, 396, 398, 401, 406, 409, 410, 412, 415, 420, 423, 424, 426, 429, 434, 437, 438, 440, 443, 448, 451, 452, 454, 457, 462, 465, 466, 468, 471, 475, 477, 479, 480, 482, 486, 491, 498, 501, 506, 508, 510, 519, 521, 523, 525, 526, 530, 532, 534, 537, 541, 543, 547, 549, 550, 551, 554, 555, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 581, 582, 585, 586, 587, 588, 591, 592, 593, 596, 597, 598, 601, 602, 605, 606, 607, 610, 611, 613, 614, 615, 623, 624, 626, 635, 643, 662, 664, 668, 669, 670, 671, 675, 679, 681, 683, 685, 686], "matrix_norm": 669, "maubach": 682, "max": [566, 613, 661, 670], "max_": [566, 669, 683], "max_j": 566, "max_k": 546, "max_mod": 193, "max_step": [211, 233, 256, 683], "max_vector": [31, 35, 36], "maxab": [566, 670], "maxabssym": 566, "maximimum": [211, 233, 256], "maximum": [31, 36, 38, 39, 40, 41, 42, 48, 51, 52, 193, 566, 613, 670, 679], "maxit": 664, "maxnorm": 566, "maxnormsym": 566, "mcquarri": [678, 682], "mcquarrie2021combust": 682, "mcquarrie2023parametr": 682, "mcquarrie2023thesi": 682, "mcquarrie2025gpbayesopinf": 682, "md": 673, "mead": 654, "mean": [31, 99, 114, 127, 161, 175, 204, 566, 614, 620, 621, 624, 654, 661, 668, 670, 680, 684], "mean_": 566, "mean_j": 566, "measur": [0, 49, 217, 229, 241, 253, 262, 615, 620, 621, 624, 661, 664, 669, 683], "mechan": [678, 682], "melina": 682, "memori": 31, "mengwu": [678, 682], "merg": [674, 676], "mesh": [98, 103, 108, 594], "messag": [652, 653, 659], "meta": 670, "methan": 670, "method": [1, 12, 21, 31, 38, 40, 41, 49, 53, 55, 57, 58, 60, 62, 63, 65, 67, 68, 69, 70, 72, 94, 99, 104, 109, 113, 114, 119, 122, 126, 127, 132, 135, 139, 142, 145, 149, 152, 155, 159, 160, 161, 166, 169, 173, 174, 175, 180, 183, 187, 190, 193, 197, 200, 205, 210, 211, 212, 214, 215, 220, 222, 224, 226, 232, 233, 236, 238, 244, 248, 250, 256, 257, 259, 266, 268, 270, 281, 283, 294, 296, 307, 309, 320, 322, 333, 335, 346, 351, 356, 357, 360, 371, 372, 373, 378, 383, 384, 398, 412, 426, 440, 454, 468, 478, 479, 482, 484, 486, 489, 490, 497, 498, 510, 519, 522, 533, 534, 544, 548, 557, 566, 575, 577, 584, 595, 604, 615, 620, 621, 622, 624, 628, 632, 633, 634, 636, 640, 641, 642, 644, 648, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 676, 678, 679, 683, 684, 685, 686], "methodologi": 673, "mhw21": [620, 621, 632, 633, 640, 641, 664, 678, 683, 684], "michael": 682, "mid": 624, "middl": 661, "migrat": 679, "min": [50, 566, 613, 661, 664, 670, 685], "min_": [207, 217, 229, 241, 253, 262, 566, 662, 668, 681, 683, 685, 686], "minim": [620, 621, 632, 633, 640, 641, 654, 661, 664, 668, 681, 682, 683], "minimize_scalar": 654, "minimum": [613, 670, 681], "minmax": [566, 661, 670], "minmaxscal": 613, "minmaxsym": 566, "minthresh": [31, 49], "mirror": [674, 676, 681], "misalign": 679, "misc": 682, "miscellan": [672, 679], "miss": 682, "mit": [678, 682], "mix": [662, 668], "mixin": 372, "mkw23": [632, 633, 678], "mode": [193, 661, 664, 674, 681], "model": [53, 113, 119, 126, 132, 139, 142, 149, 152, 160, 166, 174, 180, 187, 190, 197, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 479, 490, 510, 615, 617, 618, 619, 620, 621, 622, 624, 628, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 644, 646, 648, 650, 661, 662, 663, 664, 672, 677, 678, 679, 682], "model_at_paramet": [231, 235, 243, 247, 255, 258, 264, 267], "modelclass": [228, 240, 252, 261], "modelform": [204, 679], "modest": 683, "modif": 673, "modifi": [564, 615, 618, 630, 638, 673], "modul": [207, 217, 661, 662, 663, 664, 667, 668, 670, 679, 683], "molar": 670, "moment": 668, "mono": 679, "monolith": 684, "monoton": 58, "moor": 661, "more": [31, 58, 211, 229, 253, 479, 619, 631, 639, 661, 663, 664, 667, 668, 676, 679, 681, 682, 683, 685, 686], "moreov": 31, "most": [49, 661, 664, 673, 674, 676, 680, 681, 684], "motiv": [663, 681, 683], "move": 679, "mpl_config": [661, 662, 670, 683, 684, 685, 686], "msg": 661, "mu": [268, 281, 294, 307, 320, 333, 668, 685, 686], "mu_": [668, 686], "mu_i": [268, 281, 294, 307, 320, 333, 686], "much": [31, 661, 664, 679, 681, 683], "multi": [211, 233, 256, 670, 679], "multipl": [1, 359, 566, 584, 595, 661, 668, 670, 674, 679, 682, 683, 684, 686], "multipli": [557, 566, 683, 685, 686], "multivari": [114, 127, 161, 175, 624], "munip": 682, "murrai": 682, "must": [12, 31, 58, 94, 204, 226, 232, 237, 238, 244, 249, 384, 391, 393, 395, 398, 405, 407, 409, 412, 419, 421, 423, 426, 433, 435, 437, 440, 447, 449, 451, 454, 461, 463, 465, 557, 604, 614, 615, 667, 673, 674, 676, 679, 681, 683], "mybasi": 661, "myestim": 662, "mylift": 663, "mynewbranch": 674, "mynewdatafil": 673, "myoper": 668, "myopinfoper": 668, "mysolv": 664, "mytransform": 670, "n": [0, 1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 34, 35, 37, 40, 43, 44, 48, 49, 50, 51, 52, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 534, 538, 545, 546, 547, 548, 549, 550, 551, 554, 555, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 581, 582, 584, 585, 586, 587, 588, 591, 592, 593, 595, 596, 597, 598, 601, 602, 604, 605, 606, 607, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 648, 661, 662, 663, 664, 667, 668, 669, 670, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686], "n_": [1, 205, 215, 226, 238, 250, 259, 479, 490, 510, 584, 661, 667, 668, 675], "n_0": [1, 584, 661], "n_1": [1, 584, 661, 670], "n_2": 670, "n_i": [1, 5, 584, 587, 661], "n_new": [95, 96], "n_q": [1, 3, 584, 588, 661, 670], "n_trial": 683, "n_x": [1, 584, 661, 670, 684], "najera": 682, "nall": [684, 685], "name": [1, 5, 12, 21, 31, 35, 548, 557, 566, 575, 584, 587, 595, 604, 655, 656, 658, 659, 661, 670, 676, 679, 682, 683, 684], "namespac": [665, 671, 679], "nard": 682, "narr": 673, "nathan": 682, "nativ": [94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 604, 663], "natur": 661, "ncol": 204, "ndarrai": [0, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 34, 35, 37, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 65, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 114, 115, 116, 118, 120, 125, 127, 129, 131, 133, 138, 141, 143, 148, 151, 153, 155, 158, 159, 161, 162, 163, 165, 167, 169, 172, 173, 175, 177, 179, 181, 186, 189, 191, 196, 199, 201, 207, 208, 209, 211, 213, 217, 218, 219, 221, 223, 225, 228, 229, 230, 231, 233, 235, 240, 241, 242, 243, 245, 247, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 296, 298, 299, 300, 301, 305, 306, 307, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 327, 331, 332, 333, 334, 335, 337, 338, 339, 340, 344, 345, 346, 347, 349, 350, 351, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 370, 373, 374, 376, 377, 378, 382, 384, 385, 387, 388, 389, 390, 394, 396, 397, 398, 399, 401, 402, 403, 404, 408, 410, 411, 412, 413, 415, 416, 417, 418, 422, 424, 425, 426, 427, 429, 430, 431, 432, 436, 438, 439, 440, 441, 443, 444, 445, 446, 450, 452, 453, 454, 455, 457, 458, 459, 460, 464, 466, 467, 468, 469, 471, 472, 473, 477, 480, 482, 483, 484, 491, 493, 494, 499, 501, 502, 503, 504, 508, 509, 511, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 532, 534, 535, 537, 538, 539, 543, 546, 547, 549, 550, 551, 554, 555, 557, 558, 559, 560, 563, 564, 567, 568, 569, 572, 573, 575, 576, 577, 578, 581, 582, 585, 586, 587, 588, 591, 592, 593, 596, 597, 598, 601, 602, 605, 606, 607, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 648, 654, 662, 664, 668, 683, 684], "ndim": [661, 668, 670], "necessari": 681, "necessarili": [1, 584, 681], "need": [48, 51, 99, 211, 233, 256, 661, 664, 670, 673, 681, 683, 684, 685], "neg": [49, 193, 664], "neglect": 668, "nelder": 654, "neq": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 521, 557, 668, 670], "nest": 682, "network": [], "neural": [], "never": 676, "new": [26, 37, 38, 40, 41, 42, 48, 51, 52, 58, 212, 222, 257, 266, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 483, 493, 503, 514, 564, 617, 645, 649, 661, 662, 663, 664, 668, 670, 671, 674, 676, 677, 678, 680, 681, 682, 686], "new_data_point": [226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465], "new_stat": 58, "new_time_domain": [58, 59, 60], "newbasi": 683, "newic": [645, 649], "newli": 674, "next": [2, 3, 4, 7, 8, 217, 221, 241, 245, 262, 265, 586, 618, 619, 630, 631, 638, 639, 661, 668, 683, 685, 686], "nextstat": [217, 223, 225, 241, 247, 262, 267], "nferenc": 682, "nfull": [683, 684, 685, 686], "nhat": [454, 534, 535, 537, 538, 539, 541, 543, 668, 675, 679], "nhat_": [333, 539], "nhat_i": 539, "ni": 679, "nice": 673, "nicol": 682, "nicolau": 682, "nicolearetz": 679, "nihar": [678, 682], "nine": 670, "niniti": [683, 685, 686], "niter": [221, 245, 265, 648], "nloc": 684, "nm": 668, "nn": [1, 584, 595, 683], "nnl": 664, "nnsolver": 664, "node": [661, 684], "nogueira": 682, "noisi": 682, "non": [31, 68, 566, 664, 668, 677, 679, 682, 686], "noncanon": 682, "nondimension": [557, 670, 681], "none": [0, 1, 3, 12, 14, 21, 23, 26, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 54, 58, 59, 64, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 109, 117, 122, 130, 135, 140, 150, 155, 159, 164, 169, 173, 178, 188, 193, 198, 204, 205, 207, 208, 209, 211, 213, 215, 217, 218, 219, 221, 223, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 277, 278, 279, 280, 281, 282, 285, 287, 288, 290, 291, 292, 293, 294, 295, 298, 300, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 337, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 356, 357, 358, 363, 365, 366, 368, 369, 371, 373, 377, 378, 380, 381, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 471, 472, 473, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 491, 493, 494, 496, 497, 499, 501, 503, 504, 506, 507, 508, 509, 511, 514, 515, 517, 518, 519, 520, 525, 527, 528, 530, 531, 533, 534, 537, 538, 539, 541, 542, 544, 548, 551, 557, 560, 566, 569, 571, 575, 578, 584, 588, 595, 598, 604, 607, 613, 614, 615, 616, 618, 619, 620, 621, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 644, 648, 652, 653, 661, 662, 664, 668, 669, 670, 676, 683, 684, 685, 686], "nonintrus": [678, 682], "nonlinear": [479, 663, 668, 678, 684], "nonneg": 664, "nonparametr": [205, 215, 228, 231, 233, 235, 240, 243, 245, 247, 252, 255, 256, 258, 261, 264, 265, 267, 269, 273, 274, 275, 282, 286, 287, 288, 295, 299, 300, 301, 308, 312, 313, 314, 321, 325, 326, 327, 334, 338, 339, 340, 385, 387, 388, 390, 399, 401, 402, 404, 413, 415, 416, 418, 427, 429, 430, 432, 441, 443, 444, 446, 455, 457, 458, 460, 479, 482, 490, 499, 502, 504, 510, 511, 513, 515, 615, 636, 679], "nonpolynomi": [663, 684], "nontechn": 673, "nonuniformfinitediffer": 679, "nonuniformfinitedifferenc": [64, 65, 66, 67, 68, 662], "nonuniformli": 662, "nonzero": [557, 670, 685, 686], "noptim": 664, "norm": [0, 8, 18, 28, 44, 109, 110, 115, 116, 118, 122, 123, 128, 129, 131, 135, 136, 141, 146, 151, 155, 156, 162, 163, 165, 169, 170, 176, 177, 179, 183, 184, 189, 193, 194, 199, 202, 545, 546, 547, 566, 661, 669, 679, 681, 683, 684, 685], "norm_": 669, "norm_in_finite_dimens": 669, "norm_l2err": 683, "normal": [31, 39, 42, 46, 50, 52, 109, 114, 122, 127, 155, 161, 169, 175, 280, 293, 306, 319, 332, 345, 397, 411, 425, 439, 453, 467, 509, 518, 546, 624, 661, 669, 684, 685], "normalized_absolute_error_j": 546, "notat": [272, 285, 298, 311, 324, 337, 566, 677], "note": [21, 31, 35, 40, 49, 50, 60, 231, 233, 235, 243, 245, 247, 255, 256, 258, 264, 265, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 356, 371, 383, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 478, 479, 489, 490, 497, 499, 504, 510, 511, 515, 533, 544, 547, 557, 566, 575, 584, 595, 615, 620, 621, 632, 640, 641, 654, 661, 664, 673, 677, 683, 684, 685], "notebook": [657, 672, 673, 674, 679], "noth": [24, 56, 61, 66, 71, 121, 134, 144, 154, 168, 182, 192, 203, 356, 371, 383, 478, 489, 497, 533, 544, 550, 551, 554, 555, 558, 576, 577, 582], "notimpl": [661, 668, 670], "notimplementederror": [661, 662, 663, 664, 668, 670], "now": [652, 661, 668, 673, 674, 676, 679, 680, 681, 683, 684, 685, 686], "np": [0, 55, 60, 65, 70, 346, 357, 360, 361, 364, 373, 468, 519, 522, 523, 526, 534, 654, 661, 662, 663, 664, 668, 670, 675, 683, 684, 685, 686], "npy": [661, 670, 673], "npz": 664, "nq": 591, "nrom": 684, "nrow": 624, "nspatial": [683, 684, 685, 686], "nt": [211, 233, 256], "nterm": [268, 270, 281, 283, 294, 296, 307, 309, 320, 322, 333, 335, 668], "ntest": [356, 371, 383, 478, 489, 497, 533, 544], "ntime": 683, "ntrain": 683, "nulltransform": [549, 550, 551, 552, 553, 554, 555, 556, 584, 679], "num_el": 661, "num_lifted_vari": 684, "num_original_vari": 684, "num_posterior_draw": [620, 621], "num_svdmod": [193, 664], "num_test_it": [621, 633, 641, 684], "num_transform": [595, 670, 684], "num_vari": [1, 3, 10, 99, 100, 101, 102, 584, 588, 670, 684], "num_vector": [26, 31, 35, 37, 46, 50, 661, 681, 683, 684], "number": [1, 26, 31, 36, 37, 46, 48, 51, 52, 56, 57, 61, 62, 66, 67, 71, 72, 99, 109, 110, 115, 122, 123, 128, 135, 136, 145, 146, 155, 156, 159, 162, 169, 170, 173, 176, 183, 184, 193, 194, 202, 204, 221, 245, 265, 268, 272, 277, 281, 285, 290, 294, 298, 303, 307, 311, 316, 320, 324, 329, 333, 337, 342, 387, 392, 401, 406, 415, 420, 429, 434, 443, 448, 457, 462, 480, 486, 491, 501, 506, 557, 560, 563, 564, 584, 595, 620, 621, 624, 633, 641, 648, 652, 661, 662, 664, 668, 670, 675, 681, 682, 683, 684], "numer": [49, 664, 682, 683], "numerica": 682, "numpi": [63, 346, 357, 359, 373, 468, 519, 521, 534, 556, 557, 565, 574, 583, 603, 612, 661, 662, 663, 664, 668, 670, 679, 683, 684, 685, 686], "nx": [591, 684], "o": [670, 682], "obei": [58, 226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465], "obj": 660, "object": [1, 35, 36, 116, 118, 129, 131, 141, 151, 159, 163, 165, 173, 177, 179, 189, 199, 205, 215, 226, 232, 238, 244, 250, 259, 274, 276, 287, 289, 300, 302, 313, 315, 326, 328, 339, 341, 384, 389, 391, 398, 403, 405, 412, 417, 419, 426, 431, 433, 440, 445, 447, 454, 459, 461, 479, 483, 490, 493, 503, 514, 584, 595, 615, 620, 621, 624, 628, 632, 633, 636, 640, 641, 646, 650, 652, 660, 666, 667, 668, 672, 681], "observ": [682, 684, 685, 686], "obtain": [208, 218, 230, 242, 254, 263, 681, 683], "obviou": 673, "occur": 679, "od": [211, 233, 256, 510, 667, 668, 681], "odot": [363, 525, 537, 668, 681], "off": 652, "offdiag": 664, "offici": [673, 680], "often": [661, 663, 664, 670, 673, 681, 683, 684, 685], "oh": 676, "ohat": [109, 116, 118, 120, 122, 129, 131, 133, 135, 141, 143, 145, 151, 153, 155, 159, 163, 165, 167, 169, 173, 177, 179, 181, 183, 189, 191, 193, 199, 201, 204, 205, 207, 215, 217, 229, 241, 253, 262, 479, 615, 624, 626, 664, 668, 675, 679, 681], "ohat_": [268, 272, 281, 285, 294, 298, 307, 311, 320, 324, 333, 337, 349, 363, 376, 471, 479, 482, 498, 525, 537, 624, 668, 681], "ohat_1": [664, 668], "ohat_i": [109, 116, 118, 129, 131, 141, 151, 155, 163, 165, 177, 179, 189, 199, 624, 664], "ohat_l2": 664, "ohat_l2d": 664, "ohat_nn": 664, "ohat_r": 664, "ohat_tik": 664, "ohat_tot": 664, "ok": 676, "old": [669, 677, 679], "omar": 682, "omega": [683, 684, 685, 686], "omit": [53, 661, 662, 664, 668, 670], "onc": [31, 566, 661, 662, 663, 664, 667, 668, 670, 681, 682, 683], "one": [0, 1, 8, 18, 26, 28, 31, 37, 44, 46, 58, 109, 112, 125, 138, 148, 155, 159, 169, 173, 186, 207, 217, 226, 229, 237, 238, 249, 253, 349, 363, 376, 384, 398, 412, 426, 440, 454, 471, 479, 482, 510, 525, 537, 545, 546, 547, 548, 584, 614, 615, 619, 620, 621, 628, 631, 632, 633, 636, 639, 640, 641, 654, 661, 663, 667, 668, 670, 674, 683, 684, 685, 686], "ones": [349, 668, 681], "ones_lik": [684, 685], "onli": [0, 3, 14, 23, 31, 33, 50, 53, 54, 56, 59, 61, 64, 66, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 108, 159, 173, 225, 229, 253, 271, 284, 297, 310, 323, 336, 356, 371, 383, 478, 489, 497, 533, 544, 551, 556, 558, 559, 560, 565, 569, 574, 578, 583, 594, 598, 603, 607, 612, 613, 614, 616, 618, 619, 620, 621, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 652, 654, 662, 663, 664, 668, 670, 673, 674, 676, 679, 681, 682, 683, 684, 685], "onlin": 682, "onto": 547, "oop": 679, "op": [232, 244, 273, 274, 276, 286, 287, 289, 299, 300, 302, 312, 313, 315, 325, 326, 328, 338, 339, 341, 388, 389, 391, 402, 403, 405, 416, 417, 419, 430, 431, 433, 444, 445, 447, 458, 459, 461, 483, 493, 502, 503, 513, 514, 668], "op_": [274, 287, 300, 313, 326, 339, 668], "opal": [678, 682], "open": [652, 655, 656, 673, 674, 676], "oper": [11, 20, 30, 47, 53, 109, 114, 116, 118, 120, 122, 127, 129, 131, 133, 135, 141, 143, 145, 151, 153, 155, 159, 161, 163, 165, 167, 169, 173, 175, 177, 179, 181, 183, 189, 191, 193, 199, 201, 204, 205, 207, 208, 209, 212, 213, 215, 217, 218, 219, 222, 223, 226, 229, 230, 231, 232, 235, 237, 238, 241, 242, 243, 244, 247, 249, 250, 253, 254, 255, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 615, 617, 619, 620, 621, 622, 624, 625, 626, 627, 631, 639, 661, 662, 663, 667, 670, 671, 673, 674, 675, 678, 679, 680, 682, 684, 685, 686], "operator_at_paramet": [269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515], "operator_dimens": [668, 679], "operator_matric": 668, "operator_matrix": [205, 215], "operatornam": [49, 193, 661, 664, 668], "operatorposterior": [615, 625, 626, 627, 679], "operatortempl": [479, 483, 491, 492, 493, 494, 495, 496, 497, 502, 510, 513, 668, 679], "ophat": [229, 241, 253, 259, 262, 351, 378, 483, 484, 493, 494, 503, 514, 667, 668], "ophat_": [268, 269, 272, 274, 275, 281, 282, 285, 287, 288, 294, 295, 298, 300, 301, 307, 308, 311, 313, 314, 320, 321, 324, 326, 327, 333, 334, 337, 339, 340, 346, 347, 349, 357, 358, 363, 366, 373, 374, 376, 384, 385, 390, 398, 399, 404, 412, 413, 418, 426, 427, 432, 440, 441, 446, 454, 455, 460, 468, 469, 471, 473, 479, 482, 490, 498, 499, 504, 510, 511, 515, 519, 520, 525, 528, 534, 535, 537, 539, 667, 668], "ophat_1": 668, "ophat_2": 668, "ophat_3": 668, "opinf": [21, 54, 98, 103, 108, 159, 173, 205, 207, 212, 215, 217, 222, 226, 238, 250, 257, 259, 266, 268, 273, 281, 286, 294, 299, 307, 312, 320, 325, 333, 338, 346, 350, 357, 359, 360, 361, 364, 365, 373, 377, 384, 388, 398, 402, 412, 416, 426, 430, 440, 444, 454, 458, 468, 472, 479, 490, 502, 513, 519, 522, 523, 526, 527, 534, 538, 556, 565, 574, 583, 594, 603, 612, 613, 614, 615, 620, 621, 628, 632, 633, 636, 640, 641, 644, 646, 648, 650, 652, 674, 676, 677, 679, 680, 681, 683, 684, 685, 686], "opinfdev": [674, 676], "opinfoper": [480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 510, 668, 679], "opinfwarn": [159, 173, 654, 661, 684], "opinion": 673, "oppos": 661, "opt": 664, "optim": [145, 183, 620, 621, 632, 633, 640, 641, 654, 661, 664, 668, 679, 682, 684], "option": [3, 21, 31, 38, 40, 41, 42, 48, 49, 51, 52, 58, 68, 82, 94, 109, 122, 135, 155, 169, 183, 193, 205, 211, 215, 225, 226, 233, 238, 250, 256, 259, 479, 482, 490, 510, 546, 566, 588, 604, 661, 662, 663, 664, 668, 670, 674, 676, 679, 680, 683], "ord": [546, 683], "ord2": [68, 662], "ord4": [68, 662], "ord6": [68, 662, 683, 684, 685, 686], "order": [0, 49, 50, 53, 63, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 204, 208, 211, 218, 230, 233, 242, 254, 256, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 546, 566, 615, 628, 634, 636, 642, 661, 662, 663, 664, 668, 670, 675, 677, 678, 679, 682], "ordinari": [109, 122, 135, 155, 169, 193, 205, 211, 226, 233, 250, 256, 479, 490, 664, 667, 668, 681, 683, 685], "org": [546, 669, 673, 682], "organ": [18, 28, 44, 673, 681, 682, 683, 686], "orgin": 31, "orient": 682, "origin": [58, 483, 493, 503, 514, 613, 616, 618, 619, 620, 621, 622, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 661, 663, 664, 670, 673, 674, 681, 683], "orphan": 673, "orthogon": [21, 31, 547, 679, 681, 683], "orthonorm": [31, 662, 668, 681, 683, 685, 686], "ot": [661, 676], "other": [7, 17, 26, 27, 35, 37, 43, 49, 50, 566, 622, 623, 634, 635, 642, 643, 661, 668, 670, 674, 676, 679, 680, 682, 683, 685, 686], "other_states_on_same_time_grid": [55, 60, 65, 70], "otherwis": [226, 237, 238, 249, 384, 398, 412, 426, 440, 454, 558, 566, 646, 650, 654, 673, 683], "othogon": 31, "otim": [281, 320, 333, 357, 358, 359, 361, 363, 364, 365, 366, 398, 440, 454, 519, 520, 521, 523, 525, 526, 527, 528, 534, 535, 537, 538, 615, 624, 663, 668, 670, 675, 679, 681], "our": [673, 674, 681, 683, 684, 685, 686], "out": [346, 347, 357, 358, 373, 374, 468, 469, 480, 491, 519, 520, 534, 535, 620, 632, 640, 652, 654, 668, 670, 682, 683, 685, 686], "outlier": 58, "outlin": 668, "outperform": 683, "output": [56, 57, 61, 62, 66, 67, 71, 72, 356, 371, 383, 478, 489, 497, 533, 544, 662, 668, 673, 680, 683, 686], "outsid": 661, "over": [26, 37, 60, 211, 233, 256, 620, 621, 632, 633, 640, 641, 644, 661, 664, 681, 683, 684, 685, 686], "overal": [661, 679, 683], "overfit": 683, "overhaul": 679, "overshoot": 58, "overview": [674, 676, 681], "overwhelm": 670, "overwrit": [9, 19, 29, 45, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 559, 560, 562, 563, 566, 568, 569, 571, 572, 573, 577, 578, 580, 581, 586, 588, 590, 592, 593, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 627, 656, 661, 664, 668, 670], "oxygen": 670, "oxygen_process": 670, "p": [0, 3, 8, 14, 18, 23, 28, 33, 44, 226, 228, 229, 231, 233, 235, 238, 240, 241, 243, 245, 247, 250, 252, 253, 255, 256, 258, 259, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 285, 286, 287, 288, 293, 294, 295, 296, 298, 299, 300, 301, 306, 307, 308, 309, 311, 312, 313, 314, 319, 320, 321, 322, 324, 325, 326, 327, 332, 333, 334, 335, 337, 338, 339, 340, 345, 384, 385, 387, 388, 389, 390, 396, 397, 398, 399, 401, 402, 403, 404, 410, 411, 412, 413, 415, 416, 417, 418, 424, 425, 426, 427, 429, 430, 431, 432, 438, 439, 440, 441, 443, 444, 445, 446, 452, 453, 454, 455, 457, 458, 459, 460, 466, 467, 498, 499, 501, 502, 504, 509, 510, 511, 513, 515, 518, 546, 551, 560, 569, 578, 588, 598, 607, 615, 616, 624, 626, 629, 631, 632, 633, 634, 637, 644, 648, 654, 661, 663, 668, 669, 670, 675, 678, 682, 684, 686], "p_error": 661, "pa": 684, "packag": [479, 490, 510, 661, 663, 665, 669, 674, 676, 677, 679, 681, 683], "pad": 684, "page": [661, 664, 666, 668, 670, 673, 674, 676, 679, 680, 681, 682], "pair": [21, 241, 262, 482, 546, 668, 669], "pamm": 682, "panda": [657, 683], "paper": [], "parabol": 682, "parallel": 682, "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 113, 116, 118, 119, 122, 125, 126, 129, 131, 132, 135, 138, 139, 141, 142, 148, 149, 151, 152, 155, 158, 159, 160, 163, 165, 166, 169, 172, 173, 174, 177, 179, 180, 183, 186, 187, 189, 190, 193, 197, 199, 200, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 648, 650, 652, 653, 654, 655, 656, 658, 659, 662, 667, 668, 675, 681, 682, 683, 684, 686], "parameter": [668, 685], "parameter_dimens": [226, 238, 250, 259, 268, 281, 294, 307, 320, 333, 384, 398, 412, 426, 440, 454, 498, 510, 668], "parametr": [226, 238, 250, 259, 268, 276, 281, 289, 294, 302, 307, 315, 320, 328, 333, 341, 384, 391, 398, 405, 412, 419, 426, 433, 440, 447, 454, 461, 479, 490, 501, 510, 628, 675, 677, 678, 679], "parametric_model": [231, 235, 243, 247, 255, 258, 264, 267], "parametric_oper": [269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515], "parametriccontinuousmodel": [251, 252, 253, 254, 255, 256, 257, 258, 628, 679, 686], "parametricdiscretemodel": [260, 261, 262, 263, 264, 265, 266, 267, 628, 679], "parametricoperatortempl": [490, 511, 512, 513, 514, 515, 516, 517, 518, 679], "parametricopinfoper": [479, 490, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 679], "parametricrom": [629, 630, 631, 632, 633, 634, 635, 665, 679, 686], "paranet": 686, "parikshit": 682, "parisa": [678, 682], "part": [584, 595, 655, 656, 674, 685, 686], "partial": [106, 275, 288, 301, 314, 327, 340, 351, 378, 390, 404, 418, 432, 446, 460, 484, 494, 504, 515, 663, 667, 668, 678, 681, 682, 683, 684, 685, 686], "particular": [661, 662, 668, 670], "particularli": 673, "pascal": 682, "pass": [26, 31, 37, 38, 40, 41, 42, 48, 51, 52, 393, 407, 421, 435, 449, 463, 664, 668, 670, 674, 676, 679, 685, 686], "past": 685, "path": [9, 25, 29, 36, 45, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 276, 278, 289, 291, 302, 304, 315, 317, 328, 330, 341, 343, 352, 354, 367, 369, 379, 381, 391, 393, 405, 407, 419, 421, 433, 435, 447, 449, 461, 463, 474, 476, 485, 487, 495, 496, 505, 507, 516, 517, 529, 531, 540, 542, 553, 562, 571, 580, 600, 609, 652, 674, 680], "patrick": 682, "paula": 682, "pawan": 682, "pca": 661, "pchip": [58, 662], "pchipinterpol": [58, 662], "pd": 683, "pde": [681, 683, 685], "pdf": [673, 682], "pedro": 682, "peherstorf": [678, 682], "peherstorfer2016opinf": 682, "peherstorfer2020reproject": 682, "penal": [664, 681, 683], "penros": 661, "pep": 676, "per": [661, 669], "perat": 682, "perfect": [114, 127, 161, 175], "perform": [58, 557, 584, 663, 664, 668, 670, 672, 681, 682, 684, 685], "performac": 683, "period": 684, "perp": 661, "perspect": 682, "perturb": [356, 371, 383, 478, 489, 497, 533, 544], "peter": [678, 682], "petrov": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 483, 493, 503, 514, 527, 668], "phd": [678, 682], "phdthesi": 682, "phenomena": [678, 682, 683], "phenomenon": [682, 686], "phi": 661, "philosoph": 682, "physd": [678, 682], "physic": [661, 678, 682, 683, 685, 686], "physica": [678, 682], "pi": [661, 683, 685], "pid": 676, "piec": 683, "pip": [674, 680], "pire": 682, "place": [618, 630, 638, 673, 674, 682], "plai": [664, 670], "plainsolv": [136, 137, 138, 139, 140, 141, 142, 143, 144, 205, 215, 664, 683], "platform": 674, "pleas": [673, 674], "plot": [26, 37, 38, 39, 40, 41, 42, 48, 51, 52, 56, 61, 66, 71, 356, 371, 383, 478, 489, 497, 533, 544, 661, 662, 670, 683, 684, 685, 686], "plot1d": [661, 683], "plot_cumulative_energi": 661, "plot_data_spac": [685, 686], "plot_data_tim": 685, "plot_energi": [661, 684], "plot_errors_over_tim": 685, "plot_heat_data": 683, "plot_initial_condition_project": 683, "plot_projection_error": 661, "plot_regim": 684, "plot_residual_energi": 661, "plot_svdval_decai": 661, "plot_trac": 684, "plot_two_dataset": [685, 686], "plt": [26, 37, 38, 39, 40, 41, 42, 48, 51, 52, 661, 670, 683, 684, 685, 686], "plu": 679, "plugin": 676, "png": 673, "pod": [31, 34, 36, 40, 46, 49, 50, 675, 679, 683, 684], "pod_basi": [661, 676], "podbasi": [12, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 661, 669, 679, 681, 683, 684, 685, 686], "podbasismulti": 679, "pogudin": 682, "point": [26, 37, 58, 91, 92, 93, 211, 233, 256, 661, 670, 675, 681, 683, 684, 685, 686], "pol": [], "polynomi": [99, 663, 677, 681, 682], "polynomiallift": [100, 101, 102, 103], "pont": 682, "poor": [661, 681], "popul": 661, "port": 682, "portion": [661, 679], "pose": 664, "posit": [99, 155, 163, 169, 622, 634, 642, 654, 664], "possibl": [91, 92, 93, 664, 670], "possibli": [479, 668], "post": [55, 60, 65, 70, 677, 681, 683, 684, 685, 686], "posterior": [615, 617, 620, 621, 622, 624, 625, 626, 627], "potenti": [116, 118, 129, 131, 141, 151, 163, 165, 177, 179, 189, 199], "power": [661, 673], "pplicat": 682, "practic": 683, "pre": [21, 613, 614, 615, 628, 636, 661, 662, 674, 676, 677, 679, 681, 684, 685], "pre_exampl": 670, "preasymptot": 682, "precis": [49, 114, 127, 161, 175, 624, 664, 683], "precomput": [158, 172], "predict": [615, 620, 621, 632, 640, 644, 646, 648, 650, 667, 668, 678, 679, 681, 682, 684, 685, 686], "predict_arg": [644, 648], "predict_opt": [620, 632, 640, 646, 650], "predict_result_": 211, "prefer": [54, 59, 64, 69, 211, 233, 256, 662, 673, 674], "prepar": [112, 125, 158, 172, 196, 664], "preprocess": [613, 615, 618, 619, 620, 628, 630, 631, 632, 633, 636, 638, 639, 640, 661, 681], "prerequisit": 673, "prescrib": [4, 586, 683, 684, 685, 686], "presenc": 204, "present": [22, 32, 667], "preserv": [58, 661, 668, 678, 681, 686], "press": 682, "pressur": [661, 670, 684], "pressure_basi": 661, "pressure_cent": 661, "pressure_pca": 661, "pressure_proj": 661, "pressure_project": 661, "pressure_sc": 670, "pressure_scal": 670, "pressure_scaled2": 670, "pressure_shift": 670, "pressure_transform": 670, "pressure_transformer2": 670, "pressure_weight": 670, "prevent": [664, 674, 679], "preview": 673, "previou": [661, 663, 677, 679, 685], "previous": [6, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 552, 561, 570, 579, 589, 599, 608, 625, 679], "princip": [31, 661], "principl": [683, 684], "print": [56, 61, 66, 71, 356, 371, 383, 478, 489, 497, 533, 544, 566, 620, 621, 632, 633, 640, 641, 652, 654, 661, 662, 664, 668, 670, 676, 679, 683, 684, 685, 686], "printout": 661, "prior": [114, 127, 161, 175, 670], "priori": [205, 215, 360, 522, 686], "probabilist": [615, 624, 682], "probabl": [114, 127, 161, 175, 671, 673], "problem": [56, 61, 66, 71, 109, 112, 122, 125, 135, 145, 155, 158, 169, 172, 183, 186, 193, 196, 204, 207, 217, 229, 241, 253, 262, 661, 662, 667, 668, 670, 677, 679], "procedur": [677, 679], "proceed": 682, "process": [234, 246, 566, 661, 662, 664, 670, 673, 678, 679, 681, 682, 683, 685], "prod": [360, 522], "produc": [646, 650, 668, 675, 683, 684, 685, 686], "product": [31, 49, 357, 359, 360, 361, 363, 364, 479, 519, 521, 522, 523, 525, 526, 537, 557, 670, 675, 679, 681, 683, 684], "product_": [363, 537], "profil": [685, 686], "program": 673, "project": [8, 11, 18, 20, 28, 30, 40, 44, 47, 51, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 547, 673, 674, 675, 677, 678, 681, 683, 684, 685, 686], "projection_err": 685, "projection_error": [31, 35, 40, 46, 50, 661, 669, 683, 685, 686], "projection_error_report": 661, "projector": 547, "promot": [664, 681, 683], "proof": 661, "proper": [31, 683], "properti": [1, 12, 21, 31, 53, 58, 63, 68, 99, 109, 122, 135, 145, 155, 169, 183, 193, 205, 215, 226, 238, 250, 259, 268, 281, 294, 307, 320, 333, 346, 356, 357, 371, 372, 373, 383, 384, 398, 412, 426, 440, 454, 468, 478, 479, 489, 490, 497, 498, 510, 519, 533, 534, 544, 548, 557, 566, 575, 584, 595, 604, 615, 624, 628, 636, 644, 648, 652, 668, 670, 673, 676, 679, 681, 682, 686], "propos": 679, "propuls": 682, "protect": 682, "provid": [31, 49, 54, 59, 64, 65, 69, 159, 173, 225, 268, 281, 294, 307, 320, 333, 360, 384, 398, 412, 426, 440, 454, 480, 491, 522, 551, 557, 560, 566, 569, 575, 578, 620, 621, 640, 641, 661, 662, 663, 667, 668, 670, 676, 679, 681, 686], "pseudoinvers": 661, "psi": 661, "public": [673, 674, 679, 682], "publish": 682, "pull": [673, 674, 676], "pure": [670, 684], "purg": 682, "purpos": [670, 681, 683], "push": [673, 676, 683], "put": 661, "pw16": [678, 681, 683], "py": [673, 676, 683, 684], "py310": 676, "py311": 676, "pypi": 674, "pyplot": [38, 40, 41, 42, 48, 51, 52, 661, 670, 683, 684, 685, 686], "pytest": [674, 679], "python": [673, 674, 676, 679, 680, 683], "python3": [674, 676, 680, 683], "q": [0, 1, 7, 8, 11, 17, 18, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 40, 43, 44, 46, 47, 49, 55, 60, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 102, 104, 105, 106, 107, 207, 208, 217, 218, 230, 231, 235, 242, 243, 247, 254, 255, 258, 263, 264, 267, 269, 274, 275, 282, 287, 288, 295, 300, 301, 308, 313, 314, 321, 326, 327, 334, 339, 340, 351, 357, 359, 360, 361, 364, 378, 385, 389, 390, 399, 403, 404, 413, 417, 418, 427, 431, 432, 441, 445, 446, 455, 459, 460, 468, 483, 484, 493, 494, 499, 503, 504, 511, 514, 515, 519, 521, 522, 523, 526, 534, 547, 548, 557, 566, 573, 575, 584, 593, 602, 611, 613, 614, 623, 635, 643, 647, 651, 661, 662, 663, 668, 669, 670, 675, 679, 681, 683, 684, 685, 686], "q0": [683, 684, 685, 686], "q00": 683, "q0_": 683, "q0_new": 683, "q0_titl": 683, "q2": [55, 60, 65, 70], "q3": [55, 60, 65, 70], "q_": [1, 557, 566, 575, 584, 661, 662, 669, 670, 675, 681, 683], "q_0": [1, 557, 575, 661, 662, 670, 683, 685, 686], "q_1": [1, 557, 575], "q_again": [613, 614], "q_all": [683, 684, 685, 686], "q_and_new_q0": 683, "q_fom": [683, 685, 686], "q_i": [1, 669, 686], "q_init": 684, "q_j": [661, 662, 669, 670, 683], "q_l": 669, "q_rom": [675, 681, 683, 684, 685, 686], "q_rom_": 683, "q_rom_2": 683, "q_rom_intrus": 685, "q_shift": 614, "q_t": [101, 106], "q_train": 684, "qapprox": [0, 545, 546, 669], "qapprox_j": 546, "qbar": 614, "qdot": 662, "qdot_": 683, "qdot_exact": 683, "qfw22": [678, 684], "qhat": [1, 21, 22, 23, 32, 33, 53, 58, 205, 207, 208, 209, 213, 217, 218, 219, 223, 226, 229, 230, 231, 235, 238, 241, 242, 243, 247, 250, 253, 254, 255, 258, 259, 262, 263, 264, 267, 268, 269, 272, 274, 275, 277, 281, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 307, 308, 311, 313, 314, 316, 320, 321, 324, 326, 327, 329, 333, 334, 337, 339, 340, 342, 346, 347, 349, 351, 357, 358, 359, 361, 363, 364, 366, 373, 374, 376, 378, 384, 385, 389, 390, 398, 399, 403, 404, 412, 413, 417, 418, 426, 427, 431, 432, 440, 441, 445, 446, 454, 455, 459, 460, 468, 469, 471, 473, 479, 482, 483, 484, 490, 493, 494, 498, 499, 503, 504, 510, 511, 514, 515, 519, 520, 521, 523, 525, 526, 528, 534, 535, 537, 539, 615, 624, 661, 662, 663, 664, 667, 668, 669, 670, 675, 679, 681, 683, 685, 686], "qhat_": [1, 53, 58, 207, 215, 217, 219, 223, 229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 349, 363, 376, 471, 482, 521, 525, 537, 662, 664, 668, 681, 683, 685, 686], "qhat_0": [1, 53, 58, 207, 217, 349, 363, 376, 471, 482, 521, 525, 537, 662, 664, 668, 681, 683], "qhat_1": [1, 482, 668, 681], "qhat_i": [1, 668], "qhat_j": [207, 215, 217, 238, 482, 662, 664, 668, 683, 685], "qia21": [663, 678], "qian": [678, 682], "qian2019transform": 682, "qian2020liftandlearn": 682, "qian2021thesi": 682, "qian2022pd": 682, "qkmw19": [663, 678], "qkpw20": [661, 663, 678], "qnew": 662, "qquad": [31, 208, 218, 230, 242, 254, 263, 521, 661, 664, 668, 669, 670, 681, 683, 685, 686], "qr": 661, "qscale": 613, "qtest_fom": 685, "qtest_rom": 685, "qtest_rom_intrus": 685, "qtrue": [0, 545, 546, 669], "qtrue_j": 546, "qtrue_k": 546, "quad": [91, 92, 93, 116, 118, 129, 131, 141, 151, 155, 163, 165, 177, 179, 183, 189, 193, 199, 624, 664, 668, 669, 683, 684, 685, 686], "quadrat": [104, 204, 320, 440, 519, 663, 668, 670, 675, 681, 682, 684], "quadraticlift": [94, 105, 106, 107, 108, 663], "quadraticoper": [205, 215, 226, 238, 250, 259, 320, 359, 440, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 667, 679, 684], "qualit": 683, "qualiti": [673, 682, 683, 684], "quantiti": [158, 172, 675], "quarticoper": 679, "queri": 677, "quick": 679, "quickli": 683, "quit": 684, "quotat": 676, "qw": 663, "r": [1, 2, 3, 5, 10, 12, 13, 14, 21, 22, 23, 31, 32, 33, 35, 38, 40, 41, 46, 48, 50, 51, 53, 54, 57, 58, 59, 62, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 109, 112, 114, 115, 116, 118, 120, 122, 125, 127, 129, 131, 133, 135, 138, 141, 143, 145, 148, 151, 153, 155, 158, 159, 161, 162, 163, 165, 167, 169, 172, 173, 175, 177, 179, 181, 183, 186, 189, 191, 193, 199, 201, 204, 205, 207, 208, 209, 211, 213, 215, 217, 218, 219, 221, 223, 225, 226, 229, 230, 231, 233, 235, 238, 241, 242, 243, 245, 247, 250, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 277, 279, 281, 282, 285, 287, 288, 290, 292, 294, 295, 298, 300, 301, 303, 305, 307, 308, 311, 313, 314, 316, 318, 320, 321, 324, 326, 327, 329, 331, 333, 334, 337, 339, 340, 342, 344, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370, 371, 373, 374, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 392, 394, 398, 399, 401, 403, 404, 406, 408, 412, 413, 415, 417, 418, 420, 422, 426, 427, 429, 431, 432, 434, 436, 440, 441, 443, 445, 446, 448, 450, 454, 455, 457, 459, 460, 462, 464, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 482, 483, 484, 486, 489, 490, 491, 493, 494, 498, 499, 501, 503, 504, 506, 508, 510, 511, 514, 515, 519, 520, 521, 522, 523, 525, 526, 527, 528, 530, 532, 533, 534, 535, 537, 538, 539, 541, 543, 544, 547, 615, 616, 618, 621, 624, 626, 629, 630, 637, 638, 641, 652, 661, 662, 664, 668, 669, 675, 679, 681, 682, 683, 684, 685, 686], "r_": 1, "r_0": 1, "r_i": [1, 5, 661], "radau": [211, 233, 256], "rais": [9, 21, 29, 45, 54, 58, 114, 119, 127, 132, 142, 152, 159, 161, 166, 173, 175, 180, 190, 200, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 551, 553, 554, 555, 558, 559, 560, 562, 563, 564, 568, 569, 571, 572, 573, 576, 577, 578, 580, 581, 582, 600, 609, 627, 652, 654, 656, 661, 662, 663, 664, 668, 670, 679], "ramakanth": 682, "random": [31, 50, 346, 357, 360, 361, 364, 373, 468, 519, 522, 523, 526, 534, 617, 624, 626, 661, 662, 663, 664, 668, 670], "randomized_svd": 31, "randomli": 661, "randomvari": 624, "rang": [11, 20, 30, 47, 58, 620, 621, 632, 633, 640, 641, 661, 664, 668, 670, 683, 684, 685, 686], "rank": [40, 48, 51, 52, 193, 202, 547, 661, 664, 675, 681], "rao": [363, 525, 537, 681], "rapid": 679, "rapidli": [681, 683, 684, 685, 686], "rare": 664, "rather": 31, "ratio": [663, 684], "raw": [661, 670, 681], "rayleigh": 682, "rayomand": 682, "re": [212, 222, 257, 266, 673, 674, 684], "reaction": 663, "reactiv": 682, "read": [652, 655], "readabl": 674, "readi": [569, 572, 573, 646, 650, 674, 684], "readm": 673, "rebuff": [652, 679], "recal": 683, "recalibr": [620, 621, 632, 633, 640, 641], "receiv": [268, 281, 294, 307, 320, 333, 670, 679], "recip": [674, 676], "recommend": [31, 58, 674], "recomput": 664, "reconstruct": [7, 17, 27, 43, 623, 635, 643, 661, 681], "record": [31, 652, 661, 668, 670, 683, 684, 685, 686], "recov": [97, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 393, 407, 421, 435, 449, 463, 663, 682], "rect": 683, "redmann": 682, "reduc": [1, 2, 3, 5, 10, 12, 21, 31, 46, 54, 59, 64, 69, 159, 173, 204, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 615, 616, 618, 620, 621, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 662, 663, 664, 668, 670, 675, 677, 678, 679, 682, 684, 685], "reduced_model": [208, 218, 230, 242, 254, 263], "reduced_state_dimens": [1, 12, 21, 31, 661, 675, 679, 683, 684], "reduced_variable_s": [1, 2, 3], "reduct": [668, 670, 672, 677, 678, 679, 682, 683, 685], "refactor": 679, "refer": [546, 575, 661, 670, 684], "reference_snapshot": 575, "referencekei": 673, "refit": 679, "reformat": 676, "reg": 684, "regim": [620, 621, 632, 633, 640, 641, 684], "regress": [53, 114, 116, 118, 120, 127, 129, 131, 133, 141, 143, 145, 151, 153, 161, 163, 165, 167, 175, 177, 179, 181, 189, 191, 196, 199, 201, 205, 207, 212, 215, 217, 222, 226, 229, 238, 241, 250, 253, 257, 259, 262, 266, 618, 619, 630, 631, 638, 639, 662, 667, 668, 679, 683], "regroup": 679, "regular": [55, 60, 65, 70, 109, 114, 115, 116, 117, 122, 127, 128, 129, 130, 135, 145, 155, 159, 161, 162, 163, 164, 169, 173, 175, 176, 177, 178, 183, 205, 207, 212, 215, 217, 222, 229, 241, 253, 257, 262, 266, 620, 621, 632, 633, 640, 641, 644, 648, 675, 678, 679, 681, 682], "regularis": [678, 682], "regularization_paramet": [159, 173], "regularizer_factori": [620, 621, 632, 633, 640, 641], "rel": [0, 8, 18, 28, 40, 44, 56, 61, 66, 71, 98, 103, 108, 356, 371, 383, 478, 489, 497, 533, 544, 545, 546, 547, 556, 565, 574, 583, 594, 603, 612, 661, 662, 668, 683, 685], "rel_err": [0, 545, 546], "rel_froerr": 683, "rel_projerr": 683, "relat": [661, 664, 679, 681, 684], "relationship": [681, 683], "relative_error": [0, 545, 547, 681, 685], "relative_error_j": 546, "releas": 674, "relev": 679, "reli": 663, "remain": [548, 661, 685], "rememb": 661, "remind": 673, "remot": 674, "remov": [661, 679], "renam": 679, "render": 673, "rene": [678, 682], "reorgan": 679, "repeat": [221, 231, 233, 235, 243, 245, 247, 255, 256, 258, 264, 265, 267, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 661, 664, 670, 683], "repeatedli": [620, 621, 632, 633, 640, 641], "repertoir": 683, "replac": [661, 676, 679, 683], "report": [56, 61, 66, 71, 211, 356, 371, 383, 478, 489, 497, 533, 544, 652, 661, 676, 683], "repositori": [673, 676, 680], "repres": [0, 1, 7, 17, 27, 43, 53, 159, 173, 268, 270, 281, 283, 294, 296, 307, 309, 320, 322, 333, 335, 479, 490, 584, 615, 623, 635, 643, 661, 667, 668, 670, 671, 681, 683], "represent": [8, 18, 28, 44, 357, 368, 370, 479, 519, 530, 532, 618, 630, 638, 660, 661, 669, 679, 682, 683, 684], "reprocess": [212, 222, 257, 266], "reproduc": 685, "request": [58, 673, 674, 676, 682], "requir": [0, 3, 48, 51, 53, 68, 98, 103, 108, 229, 232, 244, 253, 268, 281, 294, 307, 320, 333, 356, 371, 383, 391, 405, 419, 433, 447, 461, 478, 489, 497, 533, 544, 588, 619, 620, 621, 631, 632, 633, 639, 640, 641, 659, 661, 662, 663, 664, 668, 670, 674, 676, 679, 680, 681, 683, 684], "research": [674, 679, 680], "reset": 683, "reshap": [526, 614, 668, 670], "residu": [31, 39, 41, 51, 114, 116, 127, 129, 161, 163, 175, 177, 661, 664, 668, 681, 683, 684], "residual_energi": [31, 35, 46, 50, 661, 685], "resit": 58, "respect": [0, 31, 109, 116, 118, 129, 131, 141, 151, 155, 163, 165, 177, 179, 189, 199, 209, 219, 231, 243, 255, 264, 664, 668, 681, 683, 684, 685], "respons": 679, "rest": 672, "restrict": 683, "result": [48, 51, 52, 56, 61, 66, 71, 114, 127, 161, 175, 208, 211, 213, 218, 223, 230, 234, 235, 242, 246, 247, 254, 258, 263, 267, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 502, 513, 622, 646, 650, 654, 661, 662, 667, 668, 670, 681, 682, 683, 685, 686], "results_new": 683, "retain": [193, 684, 685], "return": [0, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15, 17, 18, 22, 23, 25, 26, 27, 28, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102, 105, 106, 107, 113, 114, 115, 116, 118, 120, 126, 127, 128, 129, 131, 133, 136, 139, 141, 143, 146, 149, 151, 153, 156, 159, 160, 161, 162, 163, 165, 167, 170, 173, 174, 175, 176, 177, 179, 181, 184, 187, 189, 191, 194, 197, 199, 201, 204, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 221, 223, 225, 228, 229, 230, 231, 232, 233, 235, 240, 241, 242, 243, 244, 245, 247, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 348, 349, 350, 351, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 374, 375, 376, 377, 378, 383, 385, 386, 387, 388, 389, 390, 391, 399, 400, 401, 402, 403, 404, 405, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 430, 431, 432, 433, 441, 442, 443, 444, 445, 446, 447, 455, 456, 457, 458, 459, 460, 461, 469, 470, 471, 472, 473, 478, 480, 481, 482, 483, 484, 486, 489, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 506, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 533, 535, 536, 537, 538, 539, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 558, 559, 560, 561, 563, 564, 567, 568, 569, 570, 572, 573, 576, 577, 578, 579, 581, 582, 585, 586, 587, 588, 589, 591, 592, 593, 596, 597, 598, 599, 601, 602, 605, 606, 607, 608, 610, 611, 613, 614, 616, 618, 619, 622, 623, 626, 629, 630, 631, 632, 634, 635, 637, 638, 639, 642, 643, 645, 646, 647, 649, 650, 651, 654, 661, 662, 663, 664, 667, 668, 670, 679, 683, 684, 685, 686], "return_error": [56, 61, 66, 71], "return_rightvec": 50, "revers": [102, 107], "review": [674, 678, 682], "rewrit": 681, "rewrot": 679, "rf": [683, 685, 686], "rh": [221, 245, 265, 667, 683], "rho": [661, 663, 670, 684], "rho0": 684, "rho_e": [663, 684], "rho_r": 40, "rho_u": [663, 684], "richter": 682, "right": [1, 31, 35, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 114, 127, 155, 161, 169, 175, 183, 207, 209, 213, 217, 219, 223, 229, 231, 235, 241, 243, 247, 253, 255, 258, 262, 264, 267, 272, 281, 285, 294, 298, 307, 311, 320, 324, 333, 337, 349, 359, 363, 376, 471, 482, 521, 525, 537, 557, 575, 584, 661, 662, 663, 664, 667, 668, 669, 673, 675, 681, 683, 684, 685, 686], "rightbc": [683, 685], "rightvec": [31, 35, 50], "rk23": [211, 233, 256], "rk45": [211, 233, 256, 684], "rm": [333, 454, 534, 537, 541, 543, 668, 675], "roberto": 682, "robot": [], "robust": 685, "rocha": 682, "rocha2022c02": 682, "rocha2023convect": 682, "rocket": 682, "rod": [683, 685, 686], "role": [664, 670], "roll": [682, 684], "rom": [94, 604, 637, 638, 639, 640, 641, 642, 643, 644, 648, 662, 663, 665, 674, 675, 676, 677, 679, 680, 681, 686], "rom_intrus": 685, "rom_operator_infer": 679, "romtim": 683, "root": [51, 673, 676, 681], "rosenberg": 682, "rosenberger2025exactopinf": 682, "rotat": 682, "round": [652, 661], "routin": [55, 60, 65, 70, 109, 122, 183, 193, 654, 685], "row": [58, 109, 114, 116, 118, 122, 127, 129, 131, 135, 141, 145, 151, 155, 161, 163, 165, 169, 175, 177, 179, 183, 189, 193, 199, 349, 387, 401, 415, 429, 443, 457, 486, 506, 557, 566, 624, 664, 668, 670, 681, 685], "royal": [678, 682], "rr": [1, 21, 31, 40, 49, 53, 58, 114, 127, 159, 161, 169, 173, 175, 193, 205, 207, 208, 215, 217, 218, 226, 229, 230, 238, 241, 242, 250, 253, 254, 259, 262, 263, 268, 270, 272, 274, 281, 283, 285, 287, 294, 296, 298, 300, 307, 309, 311, 313, 320, 322, 324, 326, 333, 335, 337, 339, 346, 349, 357, 359, 361, 363, 364, 373, 376, 384, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 468, 471, 479, 482, 483, 490, 493, 503, 510, 514, 519, 521, 523, 525, 526, 534, 537, 539, 557, 566, 575, 584, 615, 624, 654, 661, 662, 664, 668, 669, 670, 681, 683, 684, 685, 686], "rr_": 654, "rst": 666, "rsta": 682, "rtol": 684, "rudi": 682, "rule": [0, 669, 676], "run": [652, 673, 674, 676, 679, 680], "rung": [211, 233, 256, 684], "runtim": 673, "runtimeerror": [114, 127, 161, 175, 654], "runtimewarn": 683, "s0962492921000064": 682, "s10915": 682, "s3": 682, "s_error": 661, "saling": 682, "salinger2021thesi": 682, "same": [1, 3, 4, 56, 57, 60, 61, 62, 66, 67, 71, 72, 109, 155, 231, 233, 235, 243, 245, 247, 255, 256, 258, 264, 265, 267, 269, 274, 275, 282, 287, 288, 295, 300, 301, 308, 313, 314, 321, 326, 327, 334, 339, 340, 385, 389, 390, 399, 403, 404, 413, 417, 418, 427, 431, 432, 441, 445, 446, 455, 459, 460, 480, 491, 499, 503, 504, 511, 514, 515, 564, 584, 586, 588, 613, 614, 620, 622, 632, 634, 640, 642, 661, 668, 670, 679, 681, 683, 685, 686], "sampl": [615, 620, 621, 626, 675, 681, 682, 683], "sample_column": [683, 685, 686], "sample_row": 685, "sanders": 682, "saniti": 684, "satisfi": [49, 661, 668, 676], "save": [6, 25, 36, 113, 121, 126, 134, 138, 139, 144, 148, 149, 154, 160, 168, 174, 182, 187, 192, 196, 197, 203, 210, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 356, 367, 371, 379, 383, 391, 405, 419, 433, 447, 461, 474, 478, 485, 489, 495, 497, 505, 516, 529, 533, 540, 544, 552, 561, 570, 579, 589, 599, 608, 625, 656, 661, 662, 664, 668, 670, 676], "savefil": [9, 19, 29, 45, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 562, 571, 580, 590, 600, 609, 627, 656, 661, 664, 668, 670], "sawant": [678, 682], "sawant2023pireg": 682, "sawant2023thesi": 682, "scalabl": [], "scalar": [109, 122, 205, 207, 209, 213, 215, 217, 229, 231, 235, 241, 253, 255, 258, 262, 268, 276, 281, 289, 294, 302, 307, 315, 320, 328, 333, 341, 384, 396, 398, 410, 412, 424, 426, 438, 440, 452, 454, 466, 566, 619, 631, 639, 654, 664, 668, 675, 679, 683, 685, 686], "scalarmapp": 684, "scale": [48, 557, 559, 560, 563, 564, 566, 661, 669, 678, 679, 681, 682, 684], "scale_": 566, "scale_from": 613, "scale_to": 613, "scaled_from": 613, "scaled_to": 613, "scaler": [557, 558, 559, 560, 563, 564, 670, 684], "scaletransform": [558, 559, 560, 561, 562, 563, 564, 565, 566, 670, 679, 684], "scarc": 682, "scenario": [668, 670], "scheme": [68, 69, 662, 679, 683, 684], "schilder": 682, "schmidt": 661, "scholar": [], "scholarid": [], "scholarli": [677, 682], "school": 682, "scienc": 682, "scientif": [678, 682, 683], "scipi": [31, 48, 49, 51, 52, 58, 109, 122, 135, 143, 155, 169, 183, 193, 211, 226, 232, 233, 237, 238, 244, 249, 256, 384, 391, 393, 395, 398, 405, 407, 409, 412, 419, 421, 423, 426, 433, 435, 437, 440, 447, 449, 451, 454, 461, 463, 465, 546, 654, 661, 662, 664, 668, 683, 684, 685, 686], "scitech": 682, "scpii": 661, "scr": [], "screen": 652, "sd": [279, 292, 305, 318, 331, 344, 387, 394, 401, 408, 415, 422, 429, 436, 443, 450, 457, 464, 508], "se": 669, "sean": 682, "search": [621, 633, 641, 654, 679, 684], "sebasti": 682, "second": [2, 3, 4, 7, 8, 63, 64, 68, 74, 79, 83, 86, 91, 586, 652, 676], "section": [661, 668, 673, 685], "see": [12, 31, 35, 40, 50, 63, 68, 94, 109, 114, 122, 127, 135, 155, 161, 169, 175, 183, 193, 205, 207, 215, 217, 226, 238, 250, 259, 268, 281, 294, 307, 320, 333, 359, 361, 364, 384, 398, 412, 426, 440, 454, 479, 490, 510, 523, 526, 546, 584, 595, 604, 615, 620, 621, 632, 633, 640, 641, 661, 662, 663, 664, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 683, 686], "seek": [664, 668, 684, 685], "seen": 684, "select": [31, 55, 60, 65, 70, 620, 621, 632, 633, 640, 641, 644, 648, 679, 681, 683, 684], "self": [4, 15, 207, 217, 229, 241, 253, 262, 274, 287, 300, 313, 326, 339, 389, 403, 417, 431, 445, 459, 483, 493, 503, 514, 549, 558, 567, 576, 585, 596, 605, 619, 631, 632, 639, 661, 662, 663, 664, 668, 670, 676, 679, 682, 684], "semi": [53, 155, 169, 683], "semiconductor": 682, "semilogi": [38, 40, 41, 42, 51, 52, 683, 685], "sens": [11, 20, 30, 47, 56, 57, 61, 62, 66, 67, 71, 72, 526, 681, 683], "sensit": 684, "sep": [664, 683, 685], "separ": [159, 173, 548, 566, 661], "sequenc": [619, 639], "sequenti": [621, 633, 641], "serial": [113, 119, 126, 132, 139, 142, 149, 152, 160, 166, 174, 180, 187, 190, 197, 200, 210, 214, 220, 224, 232, 236, 244, 248, 278, 291, 304, 317, 330, 343], "serkan": 678, "set": [0, 1, 21, 24, 31, 46, 58, 145, 237, 249, 268, 279, 281, 292, 294, 305, 307, 318, 320, 331, 333, 344, 355, 356, 370, 371, 382, 383, 394, 396, 408, 410, 422, 424, 436, 438, 450, 452, 464, 466, 477, 478, 488, 489, 508, 532, 533, 543, 544, 545, 546, 549, 550, 558, 559, 566, 584, 614, 617, 620, 632, 640, 652, 654, 657, 661, 662, 664, 667, 668, 669, 670, 673, 679, 683, 684, 685, 686], "set_dimens": [31, 661, 679], "set_entri": [268, 281, 294, 307, 320, 333, 346, 357, 373, 384, 398, 412, 426, 440, 454, 468, 519, 534, 668], "set_interpol": [384, 398, 412, 426, 440, 454], "set_label": 684, "set_tick": 684, "set_ticklabel": 684, "set_titl": [683, 685, 686], "set_training_paramet": [384, 398, 412, 426, 440, 454, 668], "set_xlabel": [670, 683, 684, 685, 686], "set_xlim": [683, 684, 685, 686], "set_ylabel": [670, 683, 684, 685, 686], "set_ylim": 685, "setup": 676, "setup_logfil": 652, "seunghyon": 682, "sever": [479, 490, 510, 661, 670, 683, 685], "shallow": 682, "shane": [678, 682], "shape": [1, 12, 21, 31, 55, 57, 60, 62, 65, 67, 70, 72, 268, 281, 294, 307, 320, 333, 346, 356, 357, 361, 364, 371, 373, 383, 384, 398, 412, 426, 440, 454, 468, 478, 479, 482, 489, 497, 498, 519, 523, 526, 533, 534, 544, 661, 662, 664, 668, 670, 675, 683, 684, 685, 686], "share": [], "sharei": [670, 685], "sharex": [684, 685], "sharma": 682, "sharma2022hamiltonian": 682, "sharma2024lagrangian": 682, "sharma2024preserv": 682, "shift": [563, 566, 575, 577, 578, 581, 662, 669, 678, 679, 681, 682, 684], "shift_": 566, "shift_bi": 614, "shifter": 661, "shiftscaletransform": [21, 557, 567, 568, 569, 570, 571, 572, 573, 574, 575, 604, 661, 670, 679, 684], "shifttransform": [566, 576, 577, 578, 579, 580, 581, 582, 583, 670, 679], "short": 673, "shortcut": [673, 679], "shorthand": [272, 285, 298, 311, 324, 337], "should": [46, 58, 114, 127, 145, 159, 161, 173, 175, 268, 281, 294, 307, 320, 333, 363, 482, 483, 486, 493, 502, 503, 513, 514, 525, 662, 664, 666, 668, 670, 673, 674, 676, 679, 681, 683, 685, 686], "show": [40, 661, 664, 670, 673, 676, 683, 684, 685, 686], "showwarn": 661, "shrink": 51, "siam": [678, 682], "side": [109, 112, 122, 125, 135, 138, 145, 148, 155, 158, 169, 172, 183, 186, 193, 208, 209, 213, 218, 219, 223, 230, 231, 235, 242, 243, 247, 254, 255, 258, 263, 264, 267, 618, 619, 630, 631, 638, 639, 664, 667, 668, 675, 681, 683, 684, 685, 686], "sigma": 661, "sigma_": [31, 40, 46, 122, 661], "sigma_1": [31, 661], "sigma_2": 661, "sigma_i": [31, 38, 41, 46, 48, 51, 114, 127, 161, 175, 661], "sigma_j": [31, 38, 41, 46, 48, 51, 661], "sigma_k": [31, 661], "sign": 683, "signal": 682, "signatur": [31, 673], "signific": 679, "significantli": [661, 679, 683], "similar": [661, 662, 664, 667, 670, 679, 683], "similarli": [557, 566, 575, 620, 632, 640], "simpl": 683, "simplest": [681, 683], "simpli": [65, 557, 604, 670], "simplif": 668, "simplifi": [661, 662, 668, 683, 686], "simul": [682, 683], "sin": [661, 662, 683, 685], "sinc": [65, 278, 291, 304, 317, 330, 343, 349, 363, 376, 471, 525, 537, 614, 661, 663, 668, 681, 683], "sindi": [], "sine": 661, "singh": 682, "singl": [1, 2, 3, 5, 7, 8, 13, 14, 17, 22, 23, 27, 32, 33, 38, 40, 41, 42, 43, 48, 51, 52, 207, 217, 229, 241, 253, 262, 268, 281, 294, 307, 320, 333, 349, 363, 376, 387, 401, 415, 429, 443, 457, 471, 482, 525, 537, 546, 547, 550, 551, 554, 555, 559, 560, 563, 564, 569, 572, 573, 577, 578, 581, 582, 584, 587, 588, 592, 593, 598, 601, 602, 607, 610, 611, 613, 614, 615, 620, 621, 623, 624, 632, 633, 635, 640, 641, 643, 661, 664, 667, 668, 670, 676, 678, 682, 684, 686], "singular": [31, 35, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 109, 112, 122, 125, 135, 155, 169, 183, 186, 193, 661, 664, 681, 683], "singular_valu": [48, 51, 52], "site": 683, "situat": [681, 683], "six": [78, 90], "sixth": [68, 78, 81, 90, 93, 679, 685, 686], "size": [38, 40, 41, 57, 62, 67, 72, 211, 233, 256, 356, 371, 383, 478, 489, 497, 533, 544, 614, 661, 670, 675, 683, 684, 685, 686], "sk": [387, 401, 415, 429, 443, 457], "skhw20": [670, 678], "skip": 674, "sklearn": [31, 613], "skp23": [678, 684], "sleep": 652, "slice": [3, 14, 23, 33, 551, 560, 569, 578, 588, 598, 607, 616, 629, 637, 668], "slightli": [683, 685], "sm": 668, "small": [31, 48, 49, 135, 155, 169, 675, 679], "smaller": [681, 683], "smallest": [31, 46, 51, 654, 683], "smcquar": [683, 684], "smooth": 58, "snapshot": [0, 4, 5, 10, 15, 31, 34, 40, 46, 48, 49, 50, 51, 52, 53, 54, 58, 59, 63, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 207, 217, 225, 229, 241, 253, 262, 272, 285, 298, 311, 324, 337, 387, 401, 415, 429, 443, 457, 482, 501, 545, 546, 547, 549, 550, 551, 554, 555, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 581, 582, 585, 586, 587, 588, 591, 592, 593, 596, 597, 598, 601, 602, 604, 605, 606, 607, 610, 611, 613, 614, 618, 619, 620, 621, 630, 631, 632, 633, 638, 639, 640, 641, 661, 662, 664, 668, 669, 670, 675, 679, 681, 683, 684, 685, 686], "snapshots_preprocess": 670, "snapshots_project": 661, "snapshots_sc": 661, "snapshottransform": 679, "snapshottransformermulti": 679, "so": [2, 3, 4, 7, 8, 31, 159, 173, 546, 586, 595, 661, 666, 668, 670, 673, 676, 679, 682, 683, 684, 685, 686], "societi": [678, 682], "soft": [], "softwar": [674, 680, 683, 684], "solar": [670, 678, 682], "sole": 668, "solut": [109, 122, 135, 155, 169, 183, 191, 193, 211, 221, 233, 245, 256, 265, 622, 634, 642, 646, 650, 654, 661, 662, 664, 669, 681, 683, 684, 685, 686], "solv": [109, 112, 114, 121, 122, 125, 127, 134, 135, 144, 154, 155, 158, 161, 168, 169, 172, 175, 182, 183, 186, 192, 193, 196, 203, 205, 207, 211, 212, 215, 217, 222, 229, 233, 241, 253, 256, 257, 262, 266, 615, 644, 661, 662, 664, 667, 668, 669, 679, 684, 685, 686], "solve_ivp": [211, 233, 256, 683, 684, 686], "solver": [31, 111, 113, 114, 117, 119, 121, 124, 126, 127, 130, 132, 134, 137, 139, 140, 142, 144, 145, 147, 149, 150, 152, 154, 157, 159, 160, 161, 164, 166, 168, 171, 173, 174, 175, 178, 180, 182, 185, 187, 188, 190, 192, 195, 197, 198, 200, 203, 205, 207, 211, 212, 215, 217, 222, 226, 229, 233, 234, 238, 241, 246, 250, 253, 256, 257, 259, 262, 266, 615, 620, 621, 632, 633, 640, 641, 661, 667, 679, 681, 684, 686], "solverl2": 679, "solverl2decoupl": 679, "solvertempl": [139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 664, 679], "solvertikhonov": 679, "solvertikhonovdecoupl": 679, "some": [122, 207, 217, 479, 545, 546, 566, 654, 661, 662, 663, 664, 668, 670, 673, 679, 681, 682, 683, 684, 685, 686], "sometim": [661, 676, 683, 686], "somewhat": 673, "somewher": 676, "sort": 661, "souc": 673, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 112, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 167, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 183, 185, 186, 187, 190, 191, 193, 195, 196, 197, 200, 201, 202, 204, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 226, 238, 250, 259, 268, 281, 294, 307, 320, 333, 346, 347, 349, 350, 353, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 380, 382, 384, 398, 412, 426, 440, 454, 468, 469, 471, 472, 473, 475, 477, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 530, 532, 534, 535, 537, 538, 539, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 624, 625, 626, 627, 628, 631, 634, 636, 639, 640, 641, 642, 644, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 673, 674, 677], "sousa": 682, "southern": [], "sp_volum": 661, "space": [7, 17, 21, 27, 43, 58, 63, 68, 82, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 616, 618, 619, 620, 621, 622, 623, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 661, 662, 664, 670, 675, 681, 682, 683, 684, 685, 686], "span": [661, 683], "spars": [49, 682, 683, 685, 686], "sparsiti": 683, "spatial": [26, 37, 49, 661, 667, 670, 681, 682, 683, 684, 685, 686], "spd": 49, "speci": 670, "special": [673, 674], "specif": [53, 116, 118, 129, 131, 141, 151, 163, 165, 177, 179, 189, 199, 620, 621, 632, 633, 640, 641, 661, 670, 673, 676, 679, 682, 684], "specifi": [3, 14, 21, 23, 31, 33, 46, 48, 51, 52, 119, 122, 132, 142, 152, 166, 169, 180, 190, 200, 205, 207, 214, 215, 217, 224, 226, 229, 236, 238, 241, 248, 250, 253, 259, 262, 269, 282, 295, 308, 321, 334, 384, 385, 398, 399, 412, 413, 426, 427, 440, 441, 454, 455, 499, 511, 560, 566, 569, 578, 588, 598, 607, 613, 616, 629, 637, 652, 661, 664, 667, 668, 681, 684, 686], "specificvolum": 661, "speed": [672, 683], "speedup": [661, 681], "spinterpol": 662, "spline": [211, 233, 256, 684], "spline_estim": 662, "split": [661, 663, 670, 684], "springer": 682, "spvol_proj": 661, "sqrt": [40, 51, 99, 669, 681, 683, 686], "squar": [49, 51, 109, 112, 122, 125, 135, 145, 155, 158, 169, 172, 183, 191, 193, 204, 205, 215, 226, 229, 234, 238, 241, 246, 250, 253, 259, 262, 661, 667, 668, 679, 681, 683, 685, 686], "src": [674, 676, 684], "ssh": 680, "stabil": [620, 621, 632, 633, 640, 641, 664, 681, 682], "stability_margin": [620, 621, 632, 633, 640, 641, 684], "stabl": [620, 621, 632, 633, 640, 641, 646, 650, 678, 682, 684], "stack": [155, 169, 683], "standard": [49, 280, 293, 306, 319, 332, 345, 397, 411, 425, 439, 453, 467, 509, 518, 566, 670, 673, 676, 679, 681, 683, 685], "standard_norm": 668, "start": [621, 633, 641, 654, 674, 676, 677, 681, 684, 686], "state": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 27, 28, 31, 32, 33, 34, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 159, 173, 204, 205, 207, 208, 209, 211, 213, 215, 217, 218, 219, 221, 223, 225, 226, 229, 230, 231, 233, 235, 238, 241, 242, 243, 245, 247, 250, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 277, 281, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 307, 308, 311, 313, 314, 316, 320, 321, 324, 326, 327, 329, 333, 334, 337, 339, 340, 342, 346, 347, 349, 351, 353, 357, 358, 359, 360, 363, 366, 368, 373, 374, 376, 378, 380, 384, 385, 387, 389, 390, 392, 398, 399, 401, 403, 404, 406, 412, 413, 415, 417, 418, 420, 426, 427, 429, 431, 432, 434, 440, 441, 443, 445, 446, 448, 454, 455, 457, 459, 460, 462, 468, 469, 471, 473, 475, 479, 480, 482, 483, 484, 486, 490, 491, 493, 494, 498, 499, 501, 503, 504, 506, 510, 511, 514, 515, 519, 520, 521, 522, 525, 528, 530, 534, 535, 537, 539, 541, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 563, 565, 566, 567, 568, 572, 574, 575, 576, 577, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 599, 601, 603, 604, 605, 606, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 661, 662, 663, 664, 667, 668, 669, 670, 675, 679, 682, 683, 684, 685, 686], "state0": [211, 221, 233, 245, 256, 265, 622, 634, 642], "state_": 675, "state_ddt": 58, "state_dimens": [159, 173, 205, 215, 226, 238, 250, 259, 268, 281, 294, 307, 320, 333, 346, 357, 373, 384, 398, 412, 426, 440, 454, 468, 479, 483, 490, 493, 498, 503, 510, 514, 519, 534, 548, 551, 554, 555, 557, 558, 559, 560, 563, 564, 566, 569, 572, 573, 575, 576, 577, 578, 581, 582, 584, 595, 604, 668, 670, 679, 683, 684], "state_project": [7, 17, 27, 43, 623, 635, 643], "state_snapshot": 667, "state_time_deriv": 667, "state_vari": [5, 587, 591], "stateinputoper": [205, 215, 226, 238, 250, 259, 333, 454, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 667, 668, 679], "statelist": 225, "statement": 652, "states_": 675, "states_compress": [2, 3, 13, 14, 22, 23, 32, 33, 616, 629, 637, 661], "states_decod": [616, 629, 637], "states_decompress": [3, 14, 23, 33], "states_encod": [616, 618, 629, 630, 637, 638], "states_sc": [559, 560, 563, 613], "states_shift": [577, 578, 581, 614], "states_transform": [551, 568, 569, 572, 586, 588, 592, 597, 598, 601, 606, 607, 610, 670], "states_unsc": 560, "states_unshift": 578, "states_untransform": [569, 588, 598, 607], "static": [95, 96, 97, 105, 106, 107, 225, 349, 353, 359, 360, 361, 363, 364, 368, 376, 380, 471, 475, 482, 486, 521, 522, 523, 525, 526, 530, 537, 541, 663, 668, 673, 679], "staticmethod": [482, 486, 663, 668], "std": [566, 661, 670], "std_j": 566, "steadymodel": 679, "steadyopinfrom": 679, "stem": 661, "stencil": 69, "step": [56, 61, 65, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 211, 221, 233, 245, 256, 265, 648, 662, 670, 674, 680, 681, 683, 684, 685, 686], "stephani": 682, "stephen": 682, "stiff": [211, 233, 256], "still": [661, 679, 683], "stochast": 682, "stop": [620, 621, 632, 633, 640, 641, 654], "store": [6, 25, 31, 36, 113, 126, 139, 149, 160, 174, 187, 197, 210, 211, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 367, 379, 391, 405, 419, 433, 447, 461, 474, 485, 495, 505, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 661, 663, 664, 668, 670, 673, 676, 684], "str": [5, 6, 9, 12, 16, 19, 21, 25, 29, 31, 35, 36, 45, 50, 58, 68, 109, 113, 119, 122, 126, 132, 135, 139, 142, 149, 152, 155, 160, 166, 169, 174, 180, 183, 187, 190, 193, 197, 200, 204, 210, 211, 214, 220, 224, 232, 233, 236, 244, 248, 256, 276, 278, 289, 291, 302, 304, 315, 317, 328, 330, 341, 343, 352, 354, 367, 369, 379, 381, 391, 393, 405, 407, 419, 421, 433, 435, 447, 449, 461, 463, 474, 476, 485, 487, 495, 496, 505, 507, 516, 517, 529, 531, 540, 542, 548, 552, 553, 557, 561, 562, 566, 570, 571, 575, 579, 580, 587, 589, 590, 595, 599, 600, 604, 608, 609, 625, 627, 652, 653, 654, 655, 656, 658, 659, 660, 670, 676, 683], "straight": [673, 677], "strategi": [31, 53, 155, 169, 207, 217, 229, 241, 253, 262, 661, 668, 670, 679, 682, 683], "stream": [670, 678, 682], "string": [58, 660, 667, 679, 683], "strip": 652, "stronger": 661, "structur": [204, 205, 215, 226, 238, 250, 259, 479, 661, 663, 664, 667, 668, 670, 674, 676, 677, 678, 679, 681, 683, 684, 685, 686], "studio": 676, "style": [673, 674], "sub": 661, "subject": [668, 685], "submit": 682, "submodul": [615, 628, 636, 665, 673, 679, 681, 683], "subplot": [670, 683, 684, 685, 686], "subplots_adjust": 685, "subscript": 668, "subset": [7, 17, 27, 43, 53, 54, 69, 623, 635, 643, 661, 662, 668, 670, 683, 684, 685, 686], "subspac": [547, 661], "substanti": 679, "substitut": [681, 683, 685, 686], "subtract": 683, "success": 683, "suffici": 673, "suggest": 674, "sum": [1, 209, 213, 219, 223, 231, 235, 243, 247, 255, 258, 264, 267, 479, 490, 510, 584, 667, 668, 681], "sum_": [1, 21, 31, 38, 40, 41, 46, 48, 51, 207, 217, 229, 241, 253, 262, 268, 272, 274, 281, 285, 287, 294, 298, 300, 307, 311, 313, 320, 324, 326, 333, 337, 339, 479, 490, 501, 510, 539, 566, 584, 661, 662, 664, 667, 668, 669, 670, 681, 683, 685, 686], "sum_i": 225, "summar": 666, "summari": 683, "sup": 669, "sup_": [0, 669], "super": [661, 662, 664, 670, 684], "support": [652, 672, 679], "suppos": [664, 668, 676, 681], "suppress": [661, 679], "suptitl": 683, "sure": [674, 676, 680, 681], "surpass": 48, "surrog": 681, "survei": 678, "suspici": 661, "sval": 49, "svd": [31, 34, 109, 122, 183, 193, 202, 205, 215, 661, 679, 681, 683, 684], "svdsolver": [31, 50], "svdsolver_opt": [31, 50], "svdval": [31, 35, 48, 50, 51, 52], "svdval_decai": 661, "svdval_threshold": [31, 35, 46, 50, 661], "svec": 668, "svector": 668, "svg": 673, "swim": [], "swischuk": [678, 682], "swischuk2019thesi": 682, "swischuk2020combust": 682, "switch": [211, 233, 256, 673, 674], "sym": 566, "symbol": [675, 681, 683], "symmetr": [31, 49, 155, 163, 169, 357, 370, 519, 526, 532, 566, 664, 679], "symmetri": 682, "symposium": 682, "sync": 674, "synchron": 674, "syntax": [58, 226, 232, 237, 238, 244, 249, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465, 673, 674, 676, 679], "synthet": 685, "system": [205, 211, 215, 221, 226, 233, 238, 245, 250, 256, 259, 265, 479, 490, 510, 615, 628, 636, 661, 662, 663, 664, 667, 668, 669, 670, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686], "t": [0, 53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 103, 106, 108, 122, 169, 183, 205, 207, 209, 211, 213, 226, 229, 231, 233, 235, 250, 253, 255, 256, 258, 479, 490, 510, 545, 546, 547, 556, 565, 573, 574, 583, 593, 594, 595, 602, 603, 611, 612, 615, 624, 661, 662, 663, 664, 667, 668, 669, 670, 673, 674, 679, 681, 682, 683, 684, 685, 686], "t0": 683, "t1": 0, "t2": 0, "t_": [53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 229, 253, 662, 664, 669, 681, 683, 684, 685, 686], "t_0": [53, 91, 92, 93, 662, 669, 683, 685, 686], "t_1": [92, 93, 669, 685, 686], "t_2": 93, "t_all": [684, 685, 686], "t_eval": [683, 684, 686], "t_f": 683, "t_j": [53, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 207, 662, 664, 669, 681, 683, 685, 686], "t_span": [683, 684, 686], "t_train": 684, "tabl": [673, 681], "tag": 674, "tailor": 661, "take": [34, 208, 218, 230, 242, 254, 263, 566, 620, 621, 632, 633, 640, 641, 644, 648, 661, 662, 670, 679, 681, 683, 684, 685, 686], "taken": 668, "tan": 682, "task": [672, 674, 683], "tau": [595, 683], "taylor": 682, "technic": 673, "techniqu": 677, "technologi": [678, 682], "temperatur": [661, 670, 683, 685, 686], "templat": [12, 53, 94, 145, 479, 490, 498, 510, 604, 662, 663, 668, 679], "tempor": [683, 684, 685, 686], "tencer": 682, "tend": 685, "tensor": [357, 370, 519, 532, 675, 682], "term": [145, 159, 173, 204, 205, 215, 226, 238, 250, 259, 268, 270, 276, 277, 279, 281, 283, 289, 290, 292, 294, 296, 302, 303, 305, 307, 309, 315, 316, 318, 320, 322, 328, 329, 331, 333, 335, 341, 342, 344, 359, 479, 490, 510, 521, 661, 663, 664, 667, 668, 670, 675, 681, 682, 683, 686], "terminologi": 679, "test": [56, 61, 66, 71, 208, 218, 230, 242, 254, 263, 274, 280, 287, 293, 300, 306, 313, 319, 326, 332, 339, 345, 350, 365, 377, 389, 397, 403, 411, 417, 425, 431, 439, 445, 453, 459, 467, 472, 483, 493, 503, 509, 514, 518, 527, 538, 620, 621, 632, 633, 640, 641, 644, 645, 646, 648, 649, 650, 652, 661, 662, 663, 664, 668, 670, 674, 677, 679, 680, 683, 685, 686], "test_": 676, "test_bas": 676, "test_basi": 676, "test_cas": [620, 621, 632, 633, 640, 641, 644, 648, 684], "test_input": 685, "test_new_initial_condit": 683, "test_paramet": 686, "test_pod_basi": 676, "test_time_length": [620, 632, 640, 684], "testbaserom": 676, "testing_input": 685, "testparam": [280, 293, 306, 319, 332, 345, 397, 411, 425, 439, 453, 467, 509, 518], "texa": 682, "text": [31, 183, 566, 663, 664, 668, 669, 675, 681, 683, 684, 685, 686], "textrm": [193, 229, 241, 253, 262, 384, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 479, 490, 510, 664, 667, 668], "textup": [73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93], "tezaur": 682, "tezzel": 682, "tf": 683, "tfrac": 683, "th": [109, 114, 116, 118, 122, 127, 129, 131, 141, 151, 155, 161, 163, 165, 175, 177, 179, 189, 199, 215, 229, 238, 241, 253, 259, 262, 351, 378, 387, 389, 401, 403, 415, 417, 429, 431, 443, 445, 457, 459, 484, 494, 624, 661, 664, 668, 669, 675, 683], "than": [31, 46, 49, 52, 58, 98, 103, 108, 479, 556, 565, 574, 583, 594, 603, 612, 661, 662, 664, 679, 681, 684, 685], "thank": 674, "the_p": 669, "thei": [278, 291, 304, 317, 330, 343, 661, 662, 663, 667, 674, 676, 681, 683], "them": [58, 550, 551, 554, 555, 582, 670, 673, 681, 683, 684], "themselv": 662, "theori": [], "therefor": [1, 278, 291, 304, 317, 330, 343, 668, 681, 683], "thereof": 684, "thermal": [682, 686], "thesi": [678, 682], "theta": [270, 283, 296, 309, 322, 335, 668], "theta_": [268, 270, 272, 274, 281, 283, 285, 287, 294, 296, 298, 300, 307, 309, 311, 313, 320, 322, 324, 326, 333, 335, 337, 339, 668], "thi": [0, 1, 3, 7, 8, 12, 17, 18, 21, 27, 28, 31, 38, 40, 41, 43, 44, 48, 49, 51, 53, 55, 57, 58, 60, 62, 63, 65, 67, 68, 70, 72, 82, 94, 98, 103, 108, 114, 127, 155, 159, 161, 169, 173, 175, 193, 204, 205, 208, 209, 211, 212, 213, 215, 218, 219, 221, 222, 223, 226, 229, 230, 231, 233, 235, 237, 238, 241, 242, 243, 245, 247, 249, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 277, 281, 282, 283, 285, 287, 288, 290, 294, 295, 296, 298, 300, 301, 303, 307, 308, 309, 311, 313, 314, 316, 320, 321, 322, 324, 326, 327, 329, 333, 334, 335, 337, 339, 340, 342, 351, 356, 360, 371, 372, 378, 383, 384, 385, 387, 389, 390, 395, 398, 399, 401, 403, 404, 409, 412, 413, 415, 417, 418, 423, 426, 427, 429, 431, 432, 437, 440, 441, 443, 445, 446, 451, 454, 455, 457, 459, 460, 465, 478, 479, 482, 483, 484, 486, 489, 490, 493, 497, 499, 502, 503, 504, 506, 510, 511, 513, 514, 515, 522, 526, 533, 544, 548, 550, 551, 554, 555, 557, 566, 573, 575, 576, 577, 582, 584, 588, 593, 594, 595, 602, 604, 611, 613, 614, 615, 619, 620, 621, 623, 624, 628, 632, 633, 635, 636, 639, 640, 641, 643, 645, 649, 652, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686], "thin": [31, 661], "third": [68, 75, 87, 661], "thisvari": 676, "thoma": 682, "those": [7, 17, 27, 43, 548, 566, 623, 635, 643, 670, 681], "though": [684, 685], "three": [75, 81, 87, 93, 363, 566, 661, 663, 668, 674, 684, 685], "threshold": [31, 38, 40, 41, 42, 46, 48, 49, 51, 52, 661], "through": [31, 205, 215, 226, 238, 250, 259, 479, 498, 661, 662, 667, 668, 670, 673, 674, 676, 679, 681, 682, 683, 685, 686], "tight_layout": [670, 683], "tikdsolv": 664, "tikhonov": [155, 169, 205, 215, 675, 679, 683], "tikhonovdecoupledsolv": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 615, 632, 633, 640, 641, 664, 679], "tikhonovsolv": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 615, 632, 633, 640, 641, 664, 679], "tikhonovsolverdecoupl": 679, "tiksolv": 664, "tild": [193, 202, 357, 361, 364, 368, 370, 519, 523, 526, 530, 532, 661, 664, 683, 685, 686], "time": [0, 21, 31, 35, 40, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 101, 103, 106, 108, 109, 122, 135, 145, 155, 159, 169, 173, 183, 193, 205, 207, 208, 209, 211, 213, 215, 217, 218, 221, 229, 230, 231, 233, 235, 241, 242, 245, 253, 254, 255, 256, 258, 262, 263, 265, 272, 274, 281, 285, 287, 294, 298, 300, 307, 311, 313, 320, 324, 326, 333, 337, 339, 349, 357, 359, 361, 363, 364, 373, 376, 389, 398, 403, 412, 417, 426, 431, 440, 445, 454, 459, 468, 471, 479, 482, 483, 490, 493, 503, 510, 514, 519, 521, 523, 525, 526, 534, 537, 539, 545, 546, 555, 556, 557, 564, 565, 566, 573, 574, 575, 582, 583, 593, 594, 602, 603, 604, 611, 612, 615, 618, 619, 620, 621, 624, 628, 630, 631, 632, 633, 636, 638, 639, 640, 641, 644, 652, 661, 663, 664, 667, 668, 669, 670, 675, 679, 681, 682, 684, 685, 686], "time_domain": [53, 54, 58, 60, 63, 68, 644, 662, 667, 683, 684, 685, 686], "timedblock": [653, 679, 683, 684, 685, 686], "timelimit": 652, "timeouterror": 652, "timer": 652, "timestepp": 683, "tip": 673, "titl": [682, 683, 685, 686], "title1": [685, 686], "title2": [685, 686], "tk": 0, "todd": 682, "togeth": [1, 584, 595, 621, 633, 641, 661, 670, 679], "tol": [98, 103, 108, 556, 565, 574, 583, 594, 603, 612], "toler": [98, 103, 108, 556, 565, 574, 583, 594, 603, 612], "tollei": [], "tomoki": 682, "took": 652, "tool": [661, 662, 669, 670, 674, 679, 680, 681, 683], "topic": [673, 682], "torralba": [], "total": [1, 183, 191, 272, 285, 298, 311, 324, 337, 501, 506, 584, 668, 670, 685], "totalleastsquaressolv": [184, 185, 186, 187, 188, 189, 190, 191, 192, 664], "totalsolv": 664, "toward": [682, 683], "tox": [673, 674, 676, 679, 683], "trace": [669, 681, 684], "track": 673, "tradit": [682, 683], "train": [1, 31, 40, 46, 51, 55, 60, 65, 70, 121, 134, 144, 154, 168, 182, 192, 203, 207, 212, 217, 222, 229, 241, 253, 257, 262, 266, 272, 277, 285, 290, 298, 303, 311, 316, 324, 329, 337, 342, 384, 387, 389, 392, 394, 396, 398, 401, 403, 406, 408, 410, 412, 415, 417, 420, 422, 424, 426, 429, 431, 434, 436, 438, 440, 443, 445, 448, 450, 452, 454, 457, 459, 462, 464, 466, 501, 506, 557, 566, 575, 584, 619, 620, 621, 631, 632, 633, 639, 640, 641, 661, 663, 664, 668, 670, 675, 679, 682], "train_time_domain": [620, 632, 640], "training_input": 685, "training_paramet": [384, 396, 398, 410, 412, 424, 426, 438, 440, 452, 454, 466, 668, 686], "trajectori": [225, 619, 620, 621, 632, 639, 640, 641, 644, 647, 648, 651, 682, 683, 684], "trane": [272, 285, 298, 311, 324, 337, 387, 401, 415, 429, 443, 457, 501], "transact": 682, "transfer": 672, "transfigur": 683, "transform": [6, 9, 16, 19, 94, 99, 548, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 618, 619, 620, 628, 630, 631, 632, 633, 636, 638, 639, 640, 661, 662, 663, 678, 679, 681, 682, 684], "transform_ddt": [556, 565, 574, 583, 594, 603, 604, 612, 662, 670], "transformerclass": [589, 599], "transformermulti": [6, 548, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 661, 670, 679, 684], "transformerpipelin": [566, 584, 596, 597, 598, 599, 600, 601, 602, 603, 670, 679, 684], "transformertempl": [605, 606, 607, 608, 609, 610, 611, 612, 662, 670, 679], "transit": 661, "translat": 225, "transpos": [49, 112, 120, 125, 133, 138, 143, 148, 153, 158, 167, 172, 181, 186, 191, 201], "trapezoid": [0, 669], "treat": [546, 661, 668, 679], "tree": 673, "trial": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 668, 684], "trig_basi": 661, "trig_basis_orth": 661, "trigonometr": 661, "tripl": [357, 359, 360, 363, 664], "triplet": 662, "trp": [21, 22, 31, 32, 40, 46, 49, 109, 114, 115, 122, 127, 128, 135, 145, 155, 159, 161, 162, 169, 173, 175, 176, 183, 193, 207, 208, 217, 218, 229, 230, 241, 242, 253, 254, 262, 263, 268, 270, 272, 274, 281, 283, 285, 287, 294, 296, 298, 300, 307, 309, 311, 313, 320, 322, 324, 326, 333, 335, 337, 339, 349, 350, 359, 363, 365, 376, 377, 389, 403, 417, 431, 445, 459, 471, 472, 482, 483, 493, 503, 514, 521, 525, 527, 537, 538, 557, 575, 661, 662, 664, 668, 669, 679, 681, 683, 685, 686], "true": [0, 8, 9, 18, 21, 28, 29, 44, 45, 48, 50, 51, 52, 55, 56, 60, 61, 65, 66, 70, 71, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 268, 278, 279, 281, 291, 292, 294, 304, 305, 307, 317, 318, 320, 330, 331, 333, 343, 344, 346, 354, 356, 357, 360, 361, 364, 369, 371, 373, 381, 383, 384, 393, 394, 398, 407, 408, 412, 421, 422, 426, 435, 436, 440, 449, 450, 454, 463, 464, 468, 476, 478, 487, 489, 496, 497, 507, 508, 517, 519, 522, 523, 526, 531, 533, 534, 542, 544, 545, 546, 550, 551, 553, 554, 555, 557, 559, 560, 562, 563, 564, 566, 568, 569, 571, 572, 573, 577, 578, 580, 581, 582, 586, 588, 592, 593, 597, 598, 600, 601, 602, 606, 607, 609, 610, 611, 618, 619, 620, 621, 624, 627, 630, 631, 632, 633, 638, 639, 640, 641, 646, 647, 650, 651, 652, 654, 656, 661, 662, 669, 670, 679, 683, 684, 685], "true_": 683, "truncat": [31, 49, 193, 202, 679], "truncatedsvdsolv": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 664, 679], "try": [661, 673, 681, 683], "tsvdsolver": 664, "tsw": 682, "tt": [684, 685], "tupl": [99, 595, 613, 644, 648], "turn": [652, 668], "tutori": [674, 679, 681, 683, 684, 685, 686], "twice": 521, "twilight": 684, "twin": 682, "two": [8, 18, 28, 44, 57, 62, 67, 72, 74, 80, 86, 92, 229, 241, 253, 262, 568, 619, 631, 639, 661, 668, 679, 681, 682, 683, 685, 686], "type": [6, 159, 173, 226, 228, 232, 237, 238, 240, 244, 249, 252, 261, 384, 391, 395, 398, 405, 409, 412, 419, 423, 426, 433, 437, 440, 447, 451, 454, 461, 465, 557, 566, 589, 599, 615, 632, 633, 640, 641, 654, 661, 668, 670, 679], "typeerror": [159, 173], "typic": [615, 624, 669, 681, 683, 685], "typo": 679, "u": [31, 204, 205, 207, 208, 209, 213, 217, 218, 219, 223, 226, 229, 230, 231, 235, 242, 243, 247, 250, 253, 254, 255, 258, 263, 264, 267, 268, 269, 272, 274, 275, 277, 281, 282, 285, 287, 288, 290, 294, 295, 298, 300, 301, 303, 307, 308, 311, 313, 314, 316, 320, 321, 324, 326, 327, 329, 333, 334, 337, 339, 340, 342, 346, 347, 349, 351, 357, 358, 363, 366, 372, 373, 374, 376, 378, 384, 385, 389, 390, 398, 399, 403, 404, 412, 413, 417, 418, 426, 427, 431, 432, 440, 441, 445, 446, 454, 455, 459, 460, 468, 469, 471, 473, 479, 482, 483, 484, 490, 493, 494, 498, 499, 503, 504, 510, 511, 514, 515, 519, 520, 525, 528, 534, 535, 537, 539, 662, 663, 664, 667, 668, 675, 679, 681, 682, 683, 684, 685, 686], "u_": [207, 215, 217, 219, 223, 229, 238, 241, 243, 247, 253, 259, 262, 264, 267, 272, 285, 298, 311, 324, 337, 349, 363, 376, 471, 482, 525, 537, 539, 664, 668, 681, 685], "u_0": [207, 217, 349, 363, 376, 471, 482, 525, 537, 664, 668, 681], "u_1": [482, 668, 681], "u_i": 668, "u_j": [207, 215, 217, 238, 259, 482, 662, 664, 668, 685], "uci": [], "ui": 682, "unavail": 677, "uncent": 661, "unchang": [548, 676], "under": [646, 650, 674, 681, 683, 685], "underbrac": [661, 668], "underli": [683, 685, 686], "underscor": 675, "underset": [661, 669], "undo": [613, 614], "unew": 662, "unfamiliar": 674, "uniform": [68, 82, 670, 683], "uniformfinitediffer": 679, "uniformfinitedifferenc": [63, 69, 70, 71, 72, 662, 681, 683, 684, 685, 686], "uniformli": [58, 63, 68, 82, 662, 684], "uniqu": [359, 521, 615, 624, 681], "unit": [566, 661, 674, 679, 683, 685, 686], "univers": 682, "unix": 652, "unknown": [109, 122, 135, 145, 155, 159, 169, 173, 183, 193, 668, 681, 683, 685, 686], "unless": [0, 204, 566, 654], "unlift": [94, 98, 103, 108, 663, 684], "unlik": [661, 676], "unman": 682, "unnecessari": 679, "unprocess": 670, "unscal": [560, 661], "unshift": 578, "unstabl": [620, 621, 632, 633, 640, 641, 644, 648, 683], "unsupport": [159, 173], "unsurpris": 683, "until": [620, 621, 632, 633, 640, 641, 670, 674, 679], "untransform": [560, 569, 578, 588, 598, 607, 661], "up": [31, 620, 621, 632, 633, 640, 641, 652, 654, 661, 672, 673, 674, 679, 683, 684], "updat": [31, 674, 677, 679, 680], "upon": [566, 654], "upper": [661, 675], "upstream": [673, 674], "upzeta": [663, 684], "url": [678, 682], "us": [0, 31, 49, 55, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 91, 92, 93, 94, 98, 103, 108, 109, 122, 135, 155, 159, 169, 173, 193, 208, 211, 212, 217, 218, 222, 226, 230, 231, 233, 235, 237, 238, 242, 243, 245, 247, 249, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 288, 294, 295, 301, 307, 308, 314, 320, 321, 327, 333, 334, 340, 347, 349, 358, 363, 366, 374, 376, 384, 385, 390, 398, 399, 404, 412, 413, 418, 426, 427, 432, 440, 441, 446, 454, 455, 460, 469, 471, 473, 483, 490, 492, 493, 499, 504, 510, 511, 515, 520, 525, 528, 537, 539, 546, 547, 548, 556, 557, 565, 566, 574, 575, 583, 584, 594, 603, 604, 612, 619, 620, 621, 631, 632, 633, 639, 640, 641, 644, 648, 652, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686], "usag": 674, "user": [566, 667, 670, 679, 681, 683, 684], "usernam": 674, "usual": [49, 668, 669, 674, 675], "util": [31, 232, 244, 391, 405, 419, 433, 447, 461, 620, 621, 632, 633, 640, 641, 652, 661, 662, 668, 670, 675, 677, 679, 683, 684, 685, 686], "uy2021error": 682, "uy2021parti": 682, "uy2023act": 682, "uy2023rollout": 682, "v": [49, 274, 287, 300, 313, 326, 339, 667, 668, 682, 683, 684], "v0": 684, "v_": [670, 675, 681], "v_1": [21, 661], "v_error": 661, "v_i": [21, 661], "v_r": [21, 661], "valid": [98, 103, 108, 674, 679], "valu": [0, 31, 35, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 109, 112, 122, 125, 135, 155, 169, 183, 186, 193, 211, 212, 222, 228, 229, 231, 233, 235, 240, 241, 243, 245, 247, 252, 253, 255, 256, 257, 258, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 281, 282, 283, 285, 286, 288, 289, 290, 294, 295, 296, 298, 299, 301, 302, 303, 307, 308, 309, 311, 312, 314, 315, 316, 320, 321, 322, 324, 325, 327, 328, 329, 333, 334, 335, 337, 338, 340, 341, 342, 384, 385, 387, 388, 389, 390, 392, 394, 396, 398, 399, 401, 402, 403, 404, 406, 408, 410, 412, 413, 415, 416, 417, 418, 420, 422, 424, 426, 427, 429, 430, 431, 432, 434, 436, 438, 440, 441, 443, 444, 445, 446, 448, 450, 452, 454, 455, 457, 458, 459, 460, 462, 464, 466, 498, 499, 501, 502, 504, 506, 511, 513, 515, 619, 624, 631, 632, 633, 634, 639, 644, 648, 661, 664, 667, 668, 669, 679, 683, 684, 685, 686], "valueerror": [159, 173, 551, 554, 555, 558, 559, 560, 563, 564, 566, 568, 569, 572, 573, 576, 577, 578, 581, 582], "van": 682, "var": [5, 587, 661, 684], "vari": [654, 661, 674, 686], "variabl": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 21, 31, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 211, 233, 256, 548, 557, 566, 575, 584, 586, 587, 588, 589, 591, 595, 599, 604, 613, 624, 661, 668, 670, 676, 681, 682, 683, 684, 685, 686], "variable_nam": [1, 584], "variable_s": [584, 586, 679], "varianc": [114, 127, 661], "variat": [664, 683], "variation": 682, "varieti": 684, "variou": [615, 628, 636, 668, 679, 683, 684, 685, 686], "vaz": 682, "vdot": [1, 272, 285, 298, 311, 324, 337, 359, 521, 584, 661, 668, 681, 683, 684, 685, 686], "vec": [663, 684], "vector": [2, 3, 5, 7, 8, 10, 13, 14, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 35, 36, 37, 43, 44, 49, 50, 96, 101, 106, 114, 127, 161, 175, 183, 207, 209, 211, 213, 217, 219, 223, 226, 231, 233, 235, 238, 243, 247, 250, 255, 256, 258, 259, 264, 267, 268, 269, 270, 274, 275, 281, 282, 283, 287, 288, 294, 295, 296, 300, 301, 307, 308, 309, 313, 314, 320, 321, 322, 326, 327, 333, 334, 335, 339, 340, 346, 347, 349, 351, 353, 355, 357, 358, 359, 363, 366, 373, 374, 376, 378, 384, 385, 390, 398, 399, 404, 412, 413, 418, 426, 427, 432, 440, 441, 446, 454, 455, 460, 468, 469, 471, 473, 479, 480, 482, 484, 490, 491, 494, 498, 499, 504, 508, 510, 511, 515, 519, 520, 521, 525, 528, 534, 535, 537, 539, 547, 557, 566, 575, 587, 591, 614, 620, 623, 624, 632, 635, 640, 643, 644, 661, 662, 664, 669, 670, 679, 681, 683, 684, 685, 686], "vehicl": 682, "veloc": [661, 670, 684], "velocity_proj": 661, "verbos": [566, 620, 621, 632, 633, 640, 641, 652, 654, 661, 670, 684], "verfi": [98, 103, 108, 556, 565, 574, 583, 594, 603, 612], "veri": [31, 661, 683], "verifi": [57, 62, 67, 72, 112, 125, 138, 148, 158, 172, 186, 661, 662, 663, 664, 668, 670, 674, 676, 680], "verificationerror": 661, "version": [1, 357, 519, 616, 629, 637, 661, 662, 663, 668, 674, 676, 677, 680, 683], "vertic": [584, 595], "vh": 31, "via": [6, 21, 25, 31, 36, 40, 53, 113, 126, 139, 143, 149, 155, 160, 169, 174, 183, 187, 197, 210, 220, 229, 232, 241, 244, 253, 262, 276, 289, 302, 315, 328, 341, 352, 367, 379, 391, 405, 419, 433, 447, 461, 474, 483, 485, 493, 495, 503, 505, 514, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 654, 661, 674, 678, 682, 683, 684], "viabl": 677, "view": [670, 676], "vijaywargiya": 682, "vijaywargiya2025tensoropinf": 682, "vincent": [], "violat": 676, "viridis_r": [683, 685, 686], "virtual": [674, 680], "visibl": 661, "visual": [661, 676, 683, 684, 685], "vital": 670, "vj": 675, "vmax": 684, "vmin": 684, "volum": [661, 670, 682, 684], "vr": [21, 22, 23, 31, 32, 33, 40, 46, 208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 547, 661, 662, 668, 669, 675, 681, 683, 685, 686], "vr_orth": 661, "vr_raw": 661, "w": [21, 22, 31, 32, 49, 663, 670, 679, 681, 682], "wa": [6, 25, 31, 36, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 367, 379, 391, 405, 419, 433, 447, 461, 474, 485, 495, 505, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 613, 663, 668, 670, 676, 679, 680, 683, 685], "wai": [31, 360, 522, 661, 667, 668, 670, 674, 681, 683], "wait": 652, "walk": 681, "wang": 682, "want": [661, 662, 664, 673], "warn": [21, 58, 159, 173, 654, 661, 673, 679, 684], "water": [670, 682], "wayn": 682, "we": [229, 241, 253, 262, 661, 662, 663, 664, 668, 669, 670, 674, 675, 676, 680, 681, 683, 684, 685, 686], "weight": [21, 22, 31, 32, 35, 49, 50, 670, 679], "weighter": 670, "well": [31, 50, 58, 207, 217, 229, 241, 253, 262, 566, 652, 661, 663, 664, 681, 683, 685], "wen": 682, "were": [676, 679, 683], "what": [676, 677], "when": [31, 49, 94, 268, 281, 294, 307, 320, 333, 360, 384, 393, 398, 407, 412, 421, 426, 435, 440, 449, 454, 463, 498, 522, 551, 558, 559, 560, 566, 569, 578, 604, 661, 664, 668, 670, 673, 674, 676, 679, 683], "where": [0, 1, 6, 8, 18, 21, 25, 28, 36, 40, 44, 46, 57, 62, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 109, 113, 114, 116, 118, 122, 126, 127, 129, 131, 139, 141, 149, 151, 155, 159, 160, 161, 163, 165, 173, 174, 175, 177, 179, 183, 187, 189, 193, 197, 199, 207, 208, 209, 210, 213, 217, 218, 219, 220, 223, 226, 229, 230, 231, 232, 235, 238, 241, 242, 243, 244, 247, 253, 254, 255, 258, 262, 263, 264, 267, 272, 274, 276, 277, 285, 287, 289, 290, 298, 300, 302, 303, 311, 313, 315, 316, 324, 326, 328, 329, 337, 339, 341, 342, 352, 357, 359, 361, 363, 364, 367, 373, 379, 384, 387, 389, 391, 398, 401, 403, 405, 412, 415, 417, 419, 426, 429, 431, 433, 440, 443, 445, 447, 454, 457, 459, 461, 468, 474, 479, 483, 485, 493, 495, 503, 505, 514, 516, 519, 521, 523, 525, 526, 529, 534, 537, 539, 540, 545, 546, 547, 552, 556, 557, 561, 565, 566, 570, 574, 579, 583, 584, 589, 599, 603, 608, 612, 613, 624, 661, 662, 664, 667, 668, 669, 670, 676, 677, 679, 681, 683, 684, 685, 686], "wherea": 664, "whether": 557, "which": [26, 31, 37, 49, 58, 63, 114, 135, 145, 155, 161, 169, 211, 228, 229, 233, 240, 241, 252, 253, 256, 261, 262, 273, 274, 280, 286, 287, 293, 299, 300, 306, 312, 313, 319, 325, 326, 332, 338, 339, 345, 372, 384, 388, 389, 396, 397, 398, 402, 403, 410, 411, 412, 416, 417, 424, 425, 426, 430, 431, 438, 439, 440, 444, 445, 452, 453, 454, 458, 459, 466, 467, 498, 502, 509, 510, 513, 518, 566, 584, 620, 621, 631, 632, 633, 640, 641, 644, 661, 662, 663, 664, 667, 668, 670, 674, 676, 677, 679, 680, 681, 683, 684, 685, 686], "while": [21, 615, 620, 621, 624, 632, 633, 640, 641, 652, 662, 668, 670, 674, 685, 686], "who": [], "whole": [557, 661, 670], "whose": [205, 215, 372, 483, 493, 503, 514, 661, 668, 669, 670, 681, 683], "why": 685, "widehat": 675, "wiki": 669, "wikipedia": 669, "wil": 682, "wildli": 681, "wilei": 682, "willcox": [674, 678, 680, 682], "wind": [670, 678, 682], "window": 652, "winner": 654, "winv": 670, "wish": 683, "within": [58, 652, 672, 674, 676, 679, 680, 683], "without": [135, 183, 205, 212, 215, 222, 257, 266, 566, 620, 621, 632, 633, 640, 641, 644, 648, 652, 661, 662, 664, 667, 668, 674, 676, 683, 685], "word": [7, 17, 27, 43, 623, 635, 643, 661, 670, 683], "work": [661, 664, 674, 676, 677, 679], "workflow": [615, 628, 636, 681], "worri": 673, "would": [676, 679], "wouw": 682, "wpmucdn": [], "wr": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 668], "wrap": [63, 211, 233, 256, 662, 679, 683], "wrapper": [658, 659, 673], "wright": 682, "write": [183, 557, 575, 652, 656, 668, 674, 676, 677, 681], "written": [1, 479, 566, 584, 663, 664, 668, 673, 674, 681, 686], "wrong": 676, "wrtvr": 668, "x": [26, 37, 204, 654, 661, 662, 663, 670, 677, 679, 681, 683, 684, 685, 686], "x_": [683, 684, 685, 686], "x_0": [683, 684, 685, 686], "x_1": [683, 684, 685, 686], "x_all": [683, 685, 686], "x_i": [684, 685, 686], "x_n": [683, 684, 685, 686], "xi": [661, 670], "xlim": [38, 39, 40, 41, 42, 48, 51, 52], "xloc": 684, "xpred": 684, "xveloc": 670, "xvelocity_sc": 670, "xvelocity_scal": 670, "xx": 684, "xxxxx": 676, "xy": 681, "y": [613, 614, 662, 669, 670, 681, 682, 683, 684, 686], "y0": [683, 684, 686], "y_shift": 614, "yet": [4, 560, 563, 564, 586, 679], "yevgeniya": 682, "yi": [678, 682], "yield": [667, 683, 685, 686], "yildiz2021shallow": 682, "ymax": 684, "ymin": 685, "yml": [666, 673], "ymssp": 682, "york": 682, "you": [661, 664, 670, 673, 674, 680, 681], "your": [674, 676, 680], "yourself": [], "yscale": 613, "yuepeng": 682, "yuwei": 682, "yuxiao": 682, "y\u0131ld\u0131z": 682, "z": [0, 109, 112, 114, 116, 118, 122, 125, 127, 129, 131, 135, 138, 141, 145, 148, 151, 155, 158, 161, 163, 165, 169, 172, 175, 177, 179, 183, 186, 189, 193, 199, 208, 218, 230, 242, 254, 263, 573, 668, 679, 681, 682, 683, 685, 686], "z1": [685, 686], "z2": [685, 686], "z_": [668, 681], "z_0": 668, "z_i": [109, 114, 116, 118, 127, 129, 131, 141, 151, 155, 161, 163, 165, 175, 177, 179, 189, 199, 664, 668], "z_j": 668, "zastrow": 682, "zastrow2023flutt": 682, "zealand": [678, 682], "zen": 682, "zero": [114, 127, 161, 175, 204, 205, 215, 226, 238, 250, 259, 351, 378, 484, 566, 661, 668, 670, 679, 683], "zeros_lik": [685, 686], "zeta": [663, 684], "zhat": [208, 218, 230, 241, 242, 254, 262, 263], "zhat_": [217, 241, 262], "zhat_0": 217, "zhat_j": 217, "zhu": 682, "zip": [231, 235, 255, 258, 269, 275, 282, 288, 295, 301, 308, 314, 321, 327, 334, 340, 385, 390, 399, 404, 413, 418, 427, 432, 441, 446, 455, 460, 499, 504, 511, 515, 683, 684, 686], "zone": 661, "ztrue": 685, "zw": 681, "\u00b5": 204, "\u03b81": 204, "\u03b82": 204, "\u03b83": 204}, "titles": ["Lp_error()", "BasisMulti", "compress()", "decompress()", "fit()", "get_var()", "load()", "project()", "projection_error()", "save()", "split()", "verify()", "BasisTemplate", "compress()", "decompress()", "fit()", "load()", "project()", "projection_error()", "save()", "verify()", "LinearBasis", "compress()", "decompress()", "fit()", "load()", "plot1D()", "project()", "projection_error()", "save()", "verify()", "PODBasis", "compress()", "decompress()", "fit()", "from_svd()", "load()", "plot1D()", "plot_cumulative_energy()", "plot_energy()", "plot_projection_error()", "plot_residual_energy()", "plot_svdval_decay()", "project()", "projection_error()", "save()", "set_dimension()", "verify()", "cumulative_energy()", "method_of_snapshots()", "pod_basis()", "residual_energy()", "svdval_decay()", "DerivativeEstimatorTemplate", "estimate()", "mask()", "verify()", "verify_shapes()", "InterpDerivativeEstimator", "estimate()", "mask()", "verify()", "verify_shapes()", "NonuniformFiniteDifferencer", "estimate()", "mask()", "verify()", "verify_shapes()", "UniformFiniteDifferencer", "estimate()", "mask()", "verify()", "verify_shapes()", "bwd1()", "bwd2()", "bwd3()", "bwd4()", "bwd5()", "bwd6()", "ctr2()", "ctr4()", "ctr6()", "ddt()", "ddt_nonuniform()", "ddt_uniform()", "fwd1()", "fwd2()", "fwd3()", "fwd4()", "fwd5()", "fwd6()", "ord2()", "ord4()", "ord6()", "LifterTemplate", "lift()", "lift_ddts()", "unlift()", "verify()", "PolynomialLifter", "lift()", "lift_ddts()", "unlift()", "verify()", "QuadraticLifter", "lift()", "lift_ddts()", "unlift()", "verify()", "L2DecoupledSolver", "cond()", "copy()", "fit()", "load()", "posterior()", "regcond()", "regresidual()", "reset()", "residual()", "save()", "solve()", "verify()", "L2Solver", "cond()", "copy()", "fit()", "load()", "posterior()", "regcond()", "regresidual()", "reset()", "residual()", "save()", "solve()", "verify()", "PlainSolver", "cond()", "copy()", "fit()", "load()", "reset()", "residual()", "save()", "solve()", "verify()", "SolverTemplate", "cond()", "copy()", "fit()", "load()", "reset()", "residual()", "save()", "solve()", "verify()", "TikhonovDecoupledSolver", "cond()", "copy()", "fit()", "get_operator_regularizer()", "load()", "posterior()", "regcond()", "regresidual()", "reset()", "residual()", "save()", "solve()", "verify()", "TikhonovSolver", "cond()", "copy()", "fit()", "get_operator_regularizer()", "load()", "posterior()", "regcond()", "regresidual()", "reset()", "residual()", "save()", "solve()", "verify()", "TotalLeastSquaresSolver", "cond()", "copy()", "fit()", "load()", "reset()", "residual()", "save()", "solve()", "verify()", "TruncatedSVDSolver", "cond()", "copy()", "fit()", "load()", "reset()", "residual()", "save()", "solve()", "tcond()", "verify()", "lstsq_size()", "ContinuousModel", "copy()", "fit()", "galerkin()", "jacobian()", "load()", "predict()", "refit()", "rhs()", "save()", "DiscreteModel", "copy()", "fit()", "galerkin()", "jacobian()", "load()", "predict()", "refit()", "rhs()", "save()", "stack_trajectories()", "InterpContinuousModel", "copy()", "evaluate()", "fit()", "galerkin()", "jacobian()", "load()", "predict()", "refit()", "rhs()", "save()", "set_interpolator()", "InterpDiscreteModel", "copy()", "evaluate()", "fit()", "galerkin()", "jacobian()", "load()", "predict()", "refit()", "rhs()", "save()", "set_interpolator()", "ParametricContinuousModel", "copy()", "evaluate()", "fit()", "galerkin()", "jacobian()", "predict()", "refit()", "rhs()", "ParametricDiscreteModel", "copy()", "evaluate()", "fit()", "galerkin()", "jacobian()", "predict()", "refit()", "rhs()", "AffineConstantOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "AffineCubicOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "AffineInputOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "AffineLinearOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "AffineQuadraticOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "AffineStateInputOperator", "apply()", "coeffs()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "ConstantOperator", "apply()", "copy()", "datablock()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "CubicOperator", "apply()", "ckron()", "ckron_indices()", "compress_entries()", "copy()", "datablock()", "expand_entries()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "InputMixin", "InputOperator", "apply()", "copy()", "datablock()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "InterpConstantOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "InterpCubicOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "InterpInputOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "InterpLinearOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "InterpQuadraticOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "InterpStateInputOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "set_interpolator()", "set_training_parameters()", "verify()", "LinearOperator", "apply()", "copy()", "datablock()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "OpInfOperator", "apply()", "copy()", "datablock()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "OperatorTemplate", "apply()", "copy()", "galerkin()", "jacobian()", "load()", "save()", "verify()", "ParametricOpInfOperator", "apply()", "copy()", "datablock()", "evaluate()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "ParametricOperatorTemplate", "apply()", "copy()", "evaluate()", "galerkin()", "jacobian()", "load()", "save()", "verify()", "QuadraticOperator", "apply()", "ckron()", "ckron_indices()", "compress_entries()", "copy()", "datablock()", "expand_entries()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "StateInputOperator", "apply()", "copy()", "datablock()", "galerkin()", "jacobian()", "load()", "operator_dimension()", "save()", "set_entries()", "verify()", "frobenius_error()", "lp_error()", "projection_error()", "NullTransformer", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "ScaleTransformer", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "ShiftScaleTransformer", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "ShiftTransformer", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "TransformerMulti", "fit()", "fit_transform()", "get_var()", "inverse_transform()", "load()", "save()", "split()", "transform()", "transform_ddts()", "verify()", "TransformerPipeline", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "TransformerTemplate", "fit()", "fit_transform()", "inverse_transform()", "load()", "save()", "transform()", "transform_ddts()", "verify()", "scale()", "shift()", "BayesianROM", "decode()", "draw_operators()", "encode()", "fit()", "fit_regselect_continuous()", "fit_regselect_discrete()", "predict()", "project()", "OperatorPosterior", "load()", "rvs()", "save()", "ParametricROM", "decode()", "encode()", "fit()", "fit_regselect_continuous()", "fit_regselect_discrete()", "predict()", "project()", "ROM", "decode()", "encode()", "fit()", "fit_regselect_continuous()", "fit_regselect_discrete()", "predict()", "project()", "ContinuousRegTest", "copy()", "evaluate()", "unstable()", "DiscreteRegTest", "copy()", "evaluate()", "unstable()", "TimedBlock", "add_logfile()", "gridsearch()", "hdf5_loadhandle", "hdf5_savehandle", "mpl_config()", "requires()", "requires2()", "str2repr()", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.basis</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.ddt</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.lift</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.lstsq</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf</span></code>", "Generate Missing Stubs", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.models</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.operators</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.post</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.pre</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.roms</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">opinf.utils</span></code>", "Writing Documentation", "How to Contribute", "Index of Notation", "Testing Source Code", "Operator Inference in Python", "References", "What\u2019s New", "Package Installation", "What is Operator Inference?", "Literature", "Getting Started", "Regularization", "External Inputs", "Parametric Problems"], "titleterms": {"": 679, "0": 679, "1": 679, "10": 679, "11": 679, "12": 679, "13": 679, "14": 679, "15": 679, "16": 679, "2": 679, "3": 679, "4": 679, "5": 679, "6": 679, "7": 679, "8": 679, "9": 679, "No": [670, 683], "Not": 668, "The": 683, "Theses": 682, "absolut": [669, 683], "accept": 674, "accuraci": 683, "action": 676, "add": [], "add_logfil": 653, "affect": 670, "affin": [668, 686], "affineconstantoper": 268, "affinecubicoper": 281, "affineinputoper": 294, "affinelinearoper": 307, "affinequadraticoper": 320, "affinestateinputoper": 333, "alphabet": 682, "api": [661, 677], "appli": [269, 282, 295, 308, 321, 334, 347, 358, 374, 385, 399, 413, 427, 441, 455, 469, 480, 491, 499, 511, 520, 535], "applic": 682, "approxim": 661, "ar": 668, "attempt": 683, "author": 682, "autodoc": 673, "base": 661, "basi": [661, 666, 683], "basismulti": 1, "basistempl": 12, "bayesianrom": 615, "better": 683, "bibtex": 682, "black": 676, "block": 661, "book": 673, "branch": [674, 680], "brief": 681, "build": 673, "bwd1": 73, "bwd2": 74, "bwd3": 75, "bwd4": 76, "bwd5": 77, "bwd6": 78, "calibr": 683, "canon": 661, "center": [661, 670], "ckron": [359, 521], "ckron_indic": [360, 522], "class": [662, 668, 683], "code": [672, 676, 680], "coeff": [270, 283, 296, 309, 322, 335], "commit": 680, "comparison": 685, "complet": 662, "compress": [2, 13, 22, 32, 661, 683], "compress_entri": [361, 523], "comput": [681, 683], "cond": [110, 123, 136, 146, 156, 170, 184, 194], "condit": 683, "constantoper": 346, "construct": [684, 685, 686], "constructor": 683, "content": 677, "continuousmodel": 205, "continuousregtest": 644, "contribut": [673, 674], "conveni": 662, "copi": [111, 124, 137, 147, 157, 171, 185, 195, 206, 216, 227, 239, 251, 260, 271, 284, 297, 310, 323, 336, 348, 362, 375, 386, 400, 414, 428, 442, 456, 470, 481, 492, 500, 512, 524, 536, 645, 649], "ctr2": 79, "ctr4": 80, "ctr6": 81, "cubic": 662, "cubicoper": 357, "cumulative_energi": 48, "custom": [661, 662, 663, 664, 668, 670, 683], "data": [661, 664, 668, 670, 681, 683, 684, 685, 686], "datablock": [272, 285, 298, 311, 324, 337, 349, 363, 376, 387, 401, 415, 429, 443, 457, 471, 482, 501, 525, 537], "ddt": [82, 662, 666], "ddt_nonuniform": 83, "ddt_uniform": 84, "decod": [616, 629, 637], "decomposit": [661, 682], "decompress": [3, 14, 23, 33], "default": 664, "definit": [661, 684, 685, 686], "deriv": [662, 683], "derivativeestimatortempl": 53, "determinist": 671, "develop": [663, 668, 670, 677], "diagon": 661, "differ": 662, "dimens": [661, 675], "dimension": [661, 670, 681, 685], "discretemodel": 215, "discreteregtest": 648, "dissert": 682, "do": 668, "document": [672, 673], "domain": 682, "draw_oper": 617, "encod": [618, 630, 638], "entri": 668, "equat": [683, 684, 685, 686], "error": [669, 683], "estim": [54, 59, 64, 69, 662, 683], "evalu": [228, 240, 252, 261, 273, 286, 299, 312, 325, 338, 388, 402, 416, 430, 444, 458, 502, 513, 646, 650, 683, 686], "exampl": [661, 662, 663, 664, 668, 670, 673, 681], "expand_entri": [364, 526], "extern": 685, "file": 682, "finit": 662, "first": 683, "fit": [4, 15, 24, 34, 112, 125, 138, 148, 158, 172, 186, 196, 207, 217, 229, 241, 253, 262, 549, 558, 567, 576, 585, 596, 605, 619, 631, 639, 670], "fit_regselect_continu": [620, 632, 640], "fit_regselect_discret": [621, 633, 641], "fit_transform": [550, 559, 568, 577, 586, 597, 606], "fix": 668, "flake8": 676, "fom": 683, "form": 670, "format": 676, "free": 670, "frobenius_error": 545, "from": [668, 680], "from_svd": 35, "full": [684, 685, 686], "fwd1": 85, "fwd2": 86, "fwd3": 87, "fwd4": 88, "fwd5": 89, "fwd6": 90, "galerkin": [208, 218, 230, 242, 254, 263, 274, 287, 300, 313, 326, 339, 350, 365, 377, 389, 403, 417, 431, 445, 459, 472, 483, 493, 503, 514, 527, 538, 685], "gener": [666, 684, 685, 686], "get": [681, 683], "get_operator_regular": [159, 173], "get_var": [5, 587], "github": 676, "govern": [683, 684, 685, 686], "gridsearch": 654, "guid": 677, "hadamard": [668, 670], "hdf5": 672, "hdf5_loadhandl": 655, "hdf5_savehandl": 656, "help": 673, "helper": 672, "how": 674, "i": [664, 681], "implement": [], "index": 675, "infer": [664, 677, 681, 683], "initi": 683, "input": [668, 685], "inputmixin": 372, "inputoper": 373, "instal": 680, "interpconstantoper": 384, "interpcontinuousmodel": 226, "interpcubicoper": 398, "interpderivativeestim": 58, "interpdiscretemodel": 238, "interpinputoper": 412, "interplinearoper": 426, "interpol": 662, "interpolatori": [662, 667, 668, 686], "interpquadraticoper": 440, "interpstateinputoper": 454, "intrus": 685, "inverse_transform": [551, 560, 569, 578, 588, 598, 607], "ipynb": 666, "jacobian": [209, 219, 231, 243, 255, 264, 275, 288, 301, 314, 327, 340, 351, 366, 378, 390, 404, 418, 432, 446, 460, 473, 484, 494, 504, 515, 528, 539], "jupyt": 673, "known": 661, "l2decoupledsolv": 109, "l2solver": 122, "latest": 680, "learn": 668, "least": 664, "lift": [95, 100, 105, 663, 666, 670, 682], "lift_ddt": [96, 101, 106], "liftertempl": 94, "linear": 661, "linearbasi": 21, "linearoper": 468, "literatur": 682, "load": [6, 16, 25, 36, 113, 126, 139, 149, 160, 174, 187, 197, 210, 220, 232, 244, 276, 289, 302, 315, 328, 341, 352, 367, 379, 391, 405, 419, 433, 447, 461, 474, 485, 495, 505, 516, 529, 540, 552, 561, 570, 579, 589, 599, 608, 625, 672], "local": 673, "low": [661, 681], "lp_error": [0, 546], "lstsq": [664, 666], "lstsq_size": 204, "lunch": 670, "main": 680, "manifold": 682, "map": 663, "mask": [55, 60, 65, 70], "matric": 675, "matrix": 661, "matter": 683, "method": 682, "method_of_snapshot": 49, "methodologi": 682, "miss": 666, "model": [667, 668, 669, 670, 671, 681, 683, 684, 685, 686], "monolith": 661, "mpl_config": 657, "multi": 685, "multilith": 661, "multipl": 685, "multivari": [661, 670], "new": [673, 679, 683, 685], "non": [661, 670], "nonlinear": 682, "nonparametr": [667, 668], "nonuniformfinitedifferenc": 63, "normal": 683, "notat": [661, 670, 675], "note": [663, 668, 670], "nulltransform": 548, "object": [683, 684, 685, 686], "od": 683, "oper": [664, 666, 668, 677, 681, 683], "operator_dimens": [277, 290, 303, 316, 329, 342, 353, 368, 380, 392, 406, 420, 434, 448, 462, 475, 486, 506, 530, 541], "operatorposterior": 624, "operatortempl": 490, "opinf": [661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672], "opinfoper": 479, "ord2": 91, "ord4": 92, "ord6": 93, "order": [669, 671, 681, 683, 684, 685, 686], "organ": 674, "origin": 682, "orthogon": 661, "orthonorm": 661, "overview": [661, 662, 663, 664, 667, 668, 670], "packag": 680, "paper": 682, "parameter": 686, "parametr": [667, 668, 682, 686], "parametriccontinuousmodel": 250, "parametricdiscretemodel": 259, "parametricoperatortempl": 510, "parametricopinfoper": 498, "parametricrom": 628, "partial": 662, "perform": 683, "plainsolv": 135, "plot1d": [26, 37], "plot_cumulative_energi": 38, "plot_energi": 39, "plot_projection_error": 40, "plot_residual_energi": 41, "plot_svdval_decai": 42, "pod": 661, "pod_basi": 50, "podbasi": 31, "polynomiallift": 99, "post": 669, "posterior": [114, 127, 161, 175], "pre": [666, 670], "predict": [211, 221, 233, 245, 256, 265, 622, 634, 642, 683], "preprocess": [662, 670], "preserv": 682, "probabilist": 671, "problem": [664, 681, 682, 683, 684, 685, 686], "product": 668, "project": [7, 17, 27, 43, 623, 635, 643, 661, 668, 669, 682], "projection_error": [8, 18, 28, 44, 547], "proper": 661, "pypi": 680, "pytest": 676, "python": 677, "quadraticlift": 104, "quadraticoper": 519, "re": 682, "recalibr": 668, "recommend": 680, "reduc": [661, 669, 671, 681, 683, 686], "reduct": 661, "refer": [673, 677, 678], "refit": [212, 222, 234, 246, 257, 266], "regcond": [115, 128, 162, 176], "regresidu": [116, 129, 163, 177], "regress": [664, 681], "regular": [664, 672, 683, 684], "rel": 669, "releas": 680, "repositori": 674, "represent": 681, "requir": 658, "requires2": 659, "reset": [117, 130, 140, 150, 164, 178, 188, 198], "residu": [118, 131, 141, 151, 165, 179, 189, 199], "residual_energi": 51, "rh": [213, 223, 235, 247, 258, 267], "rom": [636, 671, 683, 684, 685], "routin": [664, 672], "rv": 626, "save": [9, 19, 29, 45, 119, 132, 142, 152, 166, 180, 190, 200, 214, 224, 236, 248, 278, 291, 304, 317, 330, 343, 354, 369, 381, 393, 407, 421, 435, 449, 463, 476, 487, 496, 507, 517, 531, 542, 553, 562, 571, 580, 590, 600, 609, 627, 672], "scalabl": 682, "scale": [613, 670], "scaletransform": 557, "second": 683, "select": [661, 672], "set": 681, "set_dimens": 46, "set_entri": [279, 292, 305, 318, 331, 344, 355, 370, 382, 394, 408, 422, 436, 450, 464, 477, 488, 508, 532, 543], "set_interpol": [237, 249, 395, 409, 423, 437, 451, 465], "set_training_paramet": [396, 410, 424, 438, 452, 466], "setup": 674, "share": 682, "shift": [614, 670], "shiftscaletransform": 566, "shifttransform": 575, "shortcut": 683, "singl": 685, "softwar": [], "solv": [120, 133, 143, 153, 167, 181, 191, 201, 681, 683], "solver": [664, 683], "solvertempl": 145, "sort": 682, "sourc": [676, 680], "specif": 663, "specifi": 683, "speedup": 683, "sphinx": 673, "spline": 662, "split": [10, 591], "squar": 664, "stabil": 683, "stack_trajectori": 225, "stai": 686, "standard": 674, "start": 683, "state": 681, "stateinputoper": 534, "statement": [681, 683, 684, 685, 686], "statist": 682, "str2repr": 660, "structur": [673, 682], "stub": 666, "style": 676, "summari": [673, 674, 676], "survei": 682, "svd": 664, "svdval_decai": 52, "tcond": 202, "test": 676, "than": 683, "theori": [], "tikhonov": 664, "tikhonovdecoupledsolv": 155, "tikhonovsolv": 169, "time": [662, 672, 683], "timedblock": 652, "todo": 673, "total": 664, "totalleastsquaressolv": 183, "train": [681, 683, 684, 685, 686], "trajectori": 685, "transform": [554, 563, 572, 581, 592, 601, 610, 670], "transform_ddt": [555, 564, 573, 582, 593, 602, 611], "transformermulti": 584, "transformerpipelin": 595, "transformertempl": 604, "truncat": 664, "truncatedsvdsolv": 193, "tune": 686, "tutori": [673, 677], "type": 667, "uniformfinitedifferenc": 68, "unit": 676, "unlift": [97, 102, 107], "unstabl": [647, 651], "up": 681, "util": 672, "v": 661, "variabl": 663, "vector": [668, 675], "verifi": [11, 20, 30, 47, 56, 61, 66, 71, 98, 103, 108, 121, 134, 144, 154, 168, 182, 192, 203, 280, 293, 306, 319, 332, 345, 356, 371, 383, 397, 411, 425, 439, 453, 467, 478, 489, 497, 509, 518, 533, 544, 556, 565, 574, 583, 594, 603, 612], "verify_shap": [57, 62, 67, 72], "version": 679, "versu": 670, "via": 668, "volum": 663, "weight": 668, "what": [664, 679, 681], "work": [668, 682], "workflow": 674, "wrap": 664, "write": 673, "year": 682, "your": 682, "z": 664}})